name: Release Prod

permissions:
  contents: read

on:
  push:
    tags:
      - "release-*"

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  trigger-api-deployment:
    if: ${{ github.repository_owner == 'recallnet' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate docker image name
        id: image-name
        run: |
          set -eux
          hash=$(git rev-parse --short=7 HEAD)
          image=textile/js-recall:sha-$hash
          echo "image=$image" >> $GITHUB_OUTPUT

      - name: Trigger API deployment
        uses: ./.github/actions/trigger-deployment
        with:
          app-id: ${{ secrets.RECALL_WORKFLOW_TRIGGER_APP_ID }}
          app-private-key: ${{ secrets.RECALL_WORKFLOW_TRIGGER_PRIVATE_KEY }}
          stage: prod
          version: v0
          image: ${{ steps.image-name.outputs.image }}

  trigger-vercel-deployment:
    # Note: wait for API to deploy first to help minimize downtime. This presumes the API has
    # backwards compatibility, and it's okay for the frontend to be slightly out of sync for a
    # couple of minutes.
    needs: trigger-api-deployment
    if: ${{ github.repository_owner == 'recallnet' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.3 # Note: matches exact version from root `package.json`

      - name: Install Dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull Vercel env (production)
        run: vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Build
        run: vercel build --prod --token "$VERCEL_TOKEN"

      - name: Deploy to Production
        run: vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"
