name: AI Issue Resolution
description: Automatically resolve issues tagged with 'good-for-ai'

on:
  issues:
    types: [labeled]

jobs:
  ai-resolution:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      pull-requests: write

    # Only run when 'good-for-ai' label is added by organization members
    if: |
      contains(github.event.issue.labels.*.name, 'good-for-ai') &&
      github.event.sender.type == 'User'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check repository access
        id: check-access
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Check if the user is a collaborator on the repository
              const collaborator = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.payload.sender.login
              });

              // Check if user has appropriate permissions (admin, write, maintain, triage)
              const permission = collaborator.data.permission;
              if (permission === 'admin' || permission === 'write' || permission === 'maintain' || permission === 'triage') {
                console.log(`✅ User ${context.payload.sender.login} has ${permission} access to the repository`);
                core.setOutput('has-access', 'true');
              } else {
                console.log(`❌ User ${context.payload.sender.login} does not have sufficient access (${permission})`);
                core.setOutput('has-access', 'false');
              }
            } catch (error) {
              console.log(`❌ User ${context.payload.sender.login} is not a collaborator on the repository`);
              core.setOutput('has-access', 'false');
            }

      - name: Setup GitHub MCP Server
        if: steps.check-access.outputs.has-access == 'true'
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server:sha-7aced2b"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF

      - name: Create AI resolution prompt
        if: steps.check-access.outputs.has-access == 'true'
        run: |
          mkdir -p /tmp/claude-prompts

          cat > /tmp/claude-prompts/ai-resolution-prompt.txt << EOF
          You are an AI assistant tasked with resolving GitHub issues. Your goal is to analyze the issue, implement a fix, and create a pull request.

          PROJECT CONTEXT:
          - Repository: ${GITHUB_REPOSITORY}
          - Issue Number: ${{ github.event.issue.number }}
          - Issue Title: "${{ github.event.issue.title }}"
          - Issue Description: See issue details below

          CRITICAL: Always read CLAUDE.md first for project context and development guidelines.

          TASK:
          1. FIRST: Read CLAUDE.md to understand project structure, development commands, and coding standards
          2. Get the issue details using mcp__github__get_issue
          3. Check if a PR already exists for this issue using mcp__github__list_pull_requests
          4. If a PR already exists, do not create another one - stop here
          5. Analyze the issue description
          6. Understand the codebase structure using available tools
          7. Implement the fix by:
             - Creating a new branch (use format: ai-fix/issue-{number})
             - Making the necessary code changes
             - Committing the changes
             - Creating a pull request with a descriptive title and body
          8. The PR should:
             - Reference the original issue
             - Include a clear description of the fix
             - Be ready for review

          AVAILABLE TOOLS:
          - mcp__github__get_issue: Get issue details
          - mcp__github__get_issue_comments: Get issue comments
          - mcp__github__list_pull_requests: Check for existing PRs
          - mcp__github__create_branch: Create a new branch
          - mcp__github__create_pull_request: Create a PR
          - mcp__github__create_or_update_file: Create/update files
          - mcp__github__push_files: Push multiple files
          - Bash: For git operations and file manipulation
          - View, GlobTool, GrepTool: For exploring codebase
          - Write: For creating new files

          WORKFLOW:
          1. ALWAYS start by reading CLAUDE.md for project context
          2. Get issue details and understand the problem
          3. Check for existing PRs to avoid duplicates
          4. If PR exists, stop here
          5. Explore the codebase to understand the structure
          6. Create a new branch: ai-fix/issue-{issue_number}
          7. Implement the fix by creating/modifying files
          8. Commit changes using git commands
          9. Create a pull request that references the original issue
          10. Ensure the PR description explains what was fixed and how

          IMPORTANT:
          - ALWAYS read CLAUDE.md first for project guidelines
          - Only work on this specific issue
          - Check for existing PRs first to avoid duplicates
          - Create a descriptive branch name
          - Write clear commit messages
          - Reference the issue number in the PR title/body
          - Make sure the fix actually addresses the reported problem
          - Follow the project's coding standards from CLAUDE.md
          - Include appropriate tests if the issue involves functionality
          - Run quality gates (lint, format, types, test) before completing
          EOF
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Run Claude Code for AI Resolution
        if: steps.check-access.outputs.has-access == 'true'
        id: ai-resolution
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt_file: /tmp/claude-prompts/ai-resolution-prompt.txt
          allowed_tools: "Bash(git:*),View,GlobTool,GrepTool,Write,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__list_pull_requests,mcp__github__create_branch,mcp__github__create_pull_request,mcp__github__create_or_update_file,mcp__github__push_files"
          mcp_config: /tmp/mcp-config/mcp-servers.json
          timeout_minutes: "25"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Mark issue as processed
        if: steps.check-access.outputs.has-access == 'true' && steps.ai-resolution.outputs.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ai-processed']
            })

      - name: Handle insufficient access
        if: steps.check-access.outputs.has-access == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`❌ User ${context.payload.sender.login} does not have sufficient access to trigger AI resolution. Only repository collaborators with admin, write, maintain, or triage permissions can trigger this workflow.`);
            console.log(`User permission level: ${context.payload.sender.login} is not a collaborator or has insufficient permissions.`);
            console.log(`This workflow requires repository access to create branches and pull requests.`);