name: API Live Trading CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: fe319abf1a1b0d76b39894e5e17aff0c
  NEXT_PUBLIC_CHAIN_NAME: testnet
  # Required for Envio indexer to fetch initial block numbers
  # This should be replaced with a real key stored in GitHub secrets
  ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY || 'demo-key-for-testing' }}

jobs:
  live-trading-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Give enough time for Envio indexer to sync
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_simulator_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-live-trading-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-live-trading-
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install

      - name: Build everything
        run: pnpm build

      - name: Setup Envio Indexer
        working-directory: apps/envio-indexer
        run: |
          echo "📦 Installing Envio indexer dependencies..."
          pnpm install
          
          echo "🔍 Verifying Envio CLI is available..."
          npx envio --version || echo "Envio CLI will be installed on first use"
          
          echo "📁 Current directory structure:"
          ls -la

      - name: Detect environment and get postgres IP
        id: detect-env
        working-directory: apps/api
        run: |
          # Default for GitHub Actions
          echo "db_host=localhost" >> $GITHUB_OUTPUT
          echo "test_host=localhost" >> $GITHUB_OUTPUT

          # Check if we're running in act
          if [ -z "$ACTIONS_RUNTIME_URL" ]; then
            echo "Running in act - finding Postgres container IP"

            # Get the container ID of the postgres container
            POSTGRES_CONTAINER_ID=$(docker ps --filter "ancestor=postgres:14" --format "{{.ID}}")

            if [ -n "$POSTGRES_CONTAINER_ID" ]; then
              echo "Found postgres container: $POSTGRES_CONTAINER_ID"

              # Get the IP address of the container
              POSTGRES_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $POSTGRES_CONTAINER_ID)

              if [ -n "$POSTGRES_IP" ]; then
                echo "Found postgres container IP: $POSTGRES_IP"
                echo "db_host=$POSTGRES_IP" >> $GITHUB_OUTPUT
              else
                echo "Could not get IP, falling back to 127.0.0.1"
                echo "db_host=127.0.0.1" >> $GITHUB_OUTPUT
              fi
            else
              echo "Could not find postgres container, falling back to 127.0.0.1"
              echo "db_host=127.0.0.1" >> $GITHUB_OUTPUT
            fi

            # For act, we need to use 0.0.0.0 to listen on all interfaces
            echo "test_host=0.0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Create .env.test file
        working-directory: apps/api
        run: |
          DB_HOST_VALUE="${{ steps.detect-env.outputs.db_host }}"
          echo "Using DB_HOST=$DB_HOST_VALUE"

          cat > .env.test << EOF
          # Test Database Configuration
          DATABASE_URL=postgresql://postgres:postgres@${DB_HOST_VALUE}:5432/trading_simulator_test

          # Test Server Configuration
          TEST_PORT=3001
          TEST_HOST=${{ steps.detect-env.outputs.test_host }}
          NODE_ENV=test
          PORT=3001
          DOMAIN=.example.com

          # API Configuration
          API_DOMAIN=http://localhost:3001

          # Test Security Secrets
          # Note: root encryption key is also used for sessions; requires a 32 character length
          ROOT_ENCRYPTION_KEY=test_root_encryption_key_with_32_characters

          # EVM Chain Configuration
          EVM_CHAINS=eth,polygon,bsc,arbitrum,base,optimism,avalanche,linea

          # Test Environment Options
          START_SERVER_MODE=spawn
          USE_APP_INIT_SCRIPT=false
          E2E_CLEANUP_DB=true
          DB_CLEANUP_STRATEGY=truncate

          # Test Admin Credentials
          TEST_ADMIN_USERNAME=admin
          TEST_ADMIN_PASSWORD=test-password-123
          TEST_ADMIN_EMAIL=admin@test.com

          # Test Team Credentials
          TEST_TEAM_NAME=Test Team Alpha
          TEST_TEAM_EMAIL=team@test.com
          TEST_TEAM_CONTACT=John Doe

          # Test Solana Token Address
          TEST_SOL_TOKEN_ADDRESS=4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R

          # Initial token balances for testing
          INITIAL_SVM_SOL_BALANCE=10
          INITIAL_SVM_USDC_BALANCE=5000
          INITIAL_SVM_USDT_BALANCE=1000

          # Ethereum (EVM) balances
          INITIAL_ETH_ETH_BALANCE=1
          INITIAL_ETH_USDC_BALANCE=5000
          INITIAL_ETH_USDT_BALANCE=0

          # Individual chain balances
          INITIAL_OPTIMISM_USDC_BALANCE=200
          INITIAL_POLYGON_USDC_BALANCE=200
          INITIAL_ARBITRUM_USDC_BALANCE=200

          # Max Trade Percentage
          MAX_TRADE_PERCENTAGE=15

          # Base-specific balances
          INITIAL_BASE_USDC_BALANCE=5000

          # Portfolio configuration
          PRICE_CACHE_TTL_MS=60000
          PRICE_CACHE_MAX_SIZE=10000
          CACHE_ACTIVE_COMP_TTL_MS=1

          # Optional: Disable ability for participants to view leaderboard activity
          DISABLE_PARTICIPANT_LEADERBOARD_ACCESS=false

          # Metrics server configuration
          METRICS_PORT=3003

          # Enable auto-verify user email
          ENABLE_AUTO_VERIFY_USER_EMAIL=true
          EOF

      - name: Run Live Trading E2E tests
        working-directory: apps/api
        run: |
          echo "🧪 Running Live Trading E2E tests..."
          echo "This will start the Envio indexer and run live trade processor tests"
          echo ""
          echo "📌 CI Environment Notes:"
          echo "  - Docker is available (required for Envio)"
          echo "  - Envio will start its own containers (postgres, hasura)"
          echo "  - Ports 8080 (Hasura) and 9898 (GraphQL) will be used"
          echo "  - ALCHEMY_API_KEY is set: ${ALCHEMY_API_KEY:0:10}..."
          echo ""
          
          # Create a wrapper script to handle test execution
          cat > run-live-trading-tests.cjs << EOF
          const { spawnSync } = require('child_process');

          console.log('⏳ Starting Live Trading E2E tests...');
          console.log('📡 Envio indexer will be automatically started by setup.ts');

          try {
            // Run only the live-trade-processor test with TEST_LIVE_TRADING enabled
            const result = spawnSync('pnpm', ['vitest', 'run', '--project', 'e2e', 'e2e/tests/live-trade-processor.test.ts'], {
              stdio: 'inherit',
              env: {
                ...process.env,
                TEST_LIVE_TRADING: 'true',
                E2E_TEST_DISTINGUISH_ERRORS: 'true'
              }
            });

            // Check the exit code
            if (result.status !== 0) {
              if (result.status === 1) {
                console.error('❌ Live trading tests failed');
                process.exit(1);
              } else {
                console.warn('⚠️ Process exited with code', result.status, 'but may be a cleanup issue');
                // For live trading tests, we should be stricter about exit codes
                // since the Envio indexer might cause issues
                process.exit(1);
              }
            } else {
              console.log('✅ Live trading tests completed successfully');
              process.exit(0);
            }
          } catch (error) {
            console.error('⚠️ Error running live trading tests:', error.message);
            process.exit(1);
          }
          EOF

          # Run the tests through the wrapper script
          node run-live-trading-tests.cjs
        env:
          TEST_MODE: true
          CI: true
          TEST_LIVE_TRADING: true  # Critical: Enable live trading tests
          DATABASE_URL: postgresql://postgres:postgres@${{ steps.detect-env.outputs.db_host }}:5432/trading_simulator_test
          TEST_HOST: ${{ steps.detect-env.outputs.test_host }}
          JEST_WORKER_ID: 1  # Force single worker to prevent open handles from child processes
          DB_CONNECTION_TIMEOUT: 5000
          DB_IDLE_TIMEOUT: 1000
          NODE_OPTIONS: "--max-old-space-size=4096"  # Increase Node.js memory limit
          E2E_CLEANUP_DB: true
          DB_CLEANUP_STRATEGY: truncate
          TEST_FORCE_EXIT: true

      - name: Debug - Show Envio logs on failure
        if: failure()
        working-directory: apps/envio-indexer
        run: |
          echo "📋 Showing Envio indexer logs (if available)..."
          if [ -f "envio.log" ]; then
            tail -n 100 envio.log
          else
            echo "No envio.log file found"
          fi
          
          echo "📋 Checking for other log files..."
          find . -name "*.log" -type f -exec echo "Found log: {}" \; -exec tail -n 50 {} \;
