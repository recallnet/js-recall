---
description: 
globs: 
alwaysApply: true
---
# Development Guidelines

## Monorepo Rules

- Each package/app must be able to build and run independently
- Changes to shared packages must not break dependent apps
- Use workspace dependencies with `workspace:*` version
- Follow the Turborepo pipeline defined in `turbo.json`

## Code Quality Standards

- Use TypeScript for all new code
- Follow ESLint rules from `@recallnet/eslint-config`
- Maintain consistent formatting with Prettier
- Keep packages focused and minimal
- Document exports and complex functions
- Write tests for critical functionality
- Maintain comprehensive TSDoc documentation:
  - All public APIs must have TSDoc comments
  - All functions must have parameter and return type documentation
  - All types, interfaces, and classes must be documented
  - Complex algorithms must include detailed explanations
  - Examples should be provided for non-obvious usage
  - Documentation coverage must be at least 99%
  - (only if the pnpm docs:check or pnpm docs:build script exists) Run `pnpm docs:check` to verify documentation coverage
  - (only if the pnpm docs:check or pnpm docs:build script exists) Run `pnpm docs:build` to generate documentation

## Package Development

- Keep packages small and focused
- Export types for all public APIs
- Version packages using changesets
- Document breaking changes
- Maintain backward compatibility when possible

## Application Development

- Use Next.js for web applications
- Follow the app directory structure
- Implement responsive designs
- Handle errors gracefully
- Use proper loading states
- Optimize for performance

## Component Guidelines

- Use the shared UI library when possible
- Follow accessibility best practices
- Implement proper error boundaries
- Use TypeScript strictly
- Document props and usage
- Keep components pure when possible

## State Management

- Use React hooks for local state
- Implement proper loading states
- Handle errors gracefully
- Cache network requests appropriately
- Use proper TypeScript types

## Testing Requirements

- Write unit tests for utilities
- Test components in isolation
- Implement integration tests
- Test error scenarios
- Verify accessibility

## Performance Guidelines

- Optimize bundle sizes
- Implement code splitting
- Use proper caching strategies
- Monitor performance metrics
- Optimize images and assets

## Environment and Tools

- Node.js >= 20
- pnpm 9.12.3 or higher
- Use VSCode with recommended extensions
- Configure editor for ESLint and Prettier

# Important Scripts

- `pnpm build`: Build all packages and apps
- `pnpm dev`: Run development environment
- `pnpm lint`: Run ESLint checks
- `pnpm format`: Format code with Prettier
- `pnpm clean`: Clean build artifacts
- `pnpm changeset`: Manage package versions
- `pnpm version-packages`: Update package versions
- `pnpm publish-packages`: Publish to registry
- `pnpm docs:check`: Verify TSDoc coverage meets 99% threshold
- `pnpm docs:build`: Generate TypeDoc documentation for all packages

# Documentation Requirements

- Maintain README files
- Document API changes
- Update usage examples
- Include setup instructions
- Document environment variables

# Deployment Guidelines

- Verify all tests pass
- Check bundle sizes
- Review dependency updates
- Test in staging environment
- Monitor performance metrics

# Additional Resources

- [Turborepo Documentation](mdc:https:/turbo.build/repo/docs)
- [pnpm Workspace Guide](mdc:https:/pnpm.io/workspaces)
- [Next.js Documentation](mdc:https:/nextjs.org/docs)
- [TypeScript Handbook](mdc:https:/www.typescriptlang.org/docs)
- [React Documentation](mdc:https:/react.dev)

# AI Interaction Guidelines

- Use TypeScript for all generated code
- Follow existing patterns and conventions
- Maintain consistent error handling
- Document complex algorithms
- Test generated code thoroughly
- Consider performance implications
- Use existing utilities and components
- Follow the monorepo structure
- Respect package boundaries
- Consider dependency implications