---
description: 
globs: 
alwaysApply: true
---
# Repository Specific Configuration (js-recall)

## Monorepo Setup (Turborepo)
- This is a Turborepo monorepo. Understand its structure and principles.
- Packages/apps must be buildable and runnable independently.
- Changes to shared packages must not break dependent apps.
- Use pnpm workspace dependencies with `workspace:*` version specifiers.
- Adhere to the build/task pipeline defined in `turbo.json`.

## Code Quality Tooling
- **ESLint:** Follow rules defined in the `@recallnet/eslint-config` package.
- **Prettier:** Maintain consistent formatting using Prettier (configuration likely shared or in `package.json`).

## Application Development (Next.js)
- **Framework:** Use Next.js for web applications (`apps/portal`, potentially others).
- **Structure:** Follow the standard Next.js App Router directory structure.
- **UI:** Implement responsive designs suitable for various screen sizes.

## Specific Libraries & Packages
- **UI Components:** Use the shared `@recallnet/ui` library for common UI elements when possible.
- *(Add other critical, repo-specific library usage guidelines here if any)*

## Environment and Tools Versions
- **Node.js:** `>= 20`
- **pnpm:** `9.12.3` or higher
- **Editor:** Use VSCode with recommended extensions (ensure ESLint and Prettier integrations are active).

## Repository Structure
Details the specific layout of this monorepo:

### Apps (`apps/*`)
- `portal/`: Main web application for Recall
- `faucet/`: Faucet application

### Packages (`packages/*`)
**Core Libraries:**
- `sdk/` (@recallnet/sdk): Core SDK implementation
- `sdkx/` (@recallnet/sdkx): Core SDK implementation
- `ui/` (@recallnet/ui): Shared UI component library
- `contracts/` (@recallnet/contracts): Smart contract interfaces
- `chains/` (@recallnet/chains): Chain-specific configurations
- `address-utils/` (@recallnet/address-utils): Utility library
- `bigint-utils/` (@recallnet/bigint-utils): Utility library
- `fvm/` (@recallnet/fvm): FVM-specific functionality
- `network-constants/` (@recallnet/network-constants v0.0.6): Network configuration constants
- `fonts/` (@recallnet/fonts): Shared font resources

**Development Tools:**
- `eslint-config/` (@recallnet/eslint-config): Shared ESLint configuration
- `typescript-config/` (@recallnet/typescript-config): Shared TypeScript configuration

## Mandatory Quality Checks & Commands
Before marking a task complete or merging code, the following commands **MUST** pass:

1.  **Lint:** `pnpm lint`
2.  **Format Check:** `pnpm format:check`
3.  **Documentation Check:** `pnpm docs:check` (Checks TSDoc coverage meets 99% threshold)
4.  **Build:** `pnpm build`

## Important Project Scripts
Commonly used scripts defined in `package.json` or `turbo.json`:

- `pnpm build`: Build all packages and apps.
- `pnpm dev`: Run the development environment (likely starts `portal` and potentially other apps).
- `pnpm lint`: Run ESLint checks across the monorepo.
- `pnpm format`: Format code with Prettier.
- `pnpm format:check`: Check formatting without making changes.
- `pnpm clean`: Clean build artifacts (`dist`, `node_modules`, etc.).
- `pnpm changeset`: Create a changeset file to document package changes for versioning.
- `pnpm version-packages`: Update package versions based on changesets.
- `pnpm publish-packages`: Publish updated packages to the registry.
- `pnpm docs:check`: Verify TSDoc coverage.
- `pnpm docs:build`: Generate TypeDoc documentation for all packages.

## Additional Resources (Project Context)
- [Turborepo Documentation](mdc:https:/turbo.build/repo/docs)
- [pnpm Workspace Guide](mdc:https:/pnpm.io/workspaces)
- [Next.js Documentation](mdc:https:/nextjs.org/docs)
- [React Documentation](mdc:https:/react.dev)
- [TypeScript Handbook](mdc:https:/www.typescriptlang.org/docs)