// TODO: this emulates `@wagmi/cli` autogenerated outputs: https://wagmi.sh/cli/getting-started
// This is done, in part, because `hokunet/ipc` and `hokunet/contracts` ABIs are both used,
// so we'll eventually want to just publish those as independent packages and import them here.

// TODO: we should probably remove all overloads. The viem type inference gets messy if there are too many.
// The ABI below had to remove everything except the most advanced input params for the following:
// - `queryObjects`
// - `approveCredit`

export const bucketManagerABI = [
  {
    type: "function",
    name: "addObject",
    inputs: [
      { name: "bucket", type: "address", internalType: "address" },
      {
        name: "params",
        type: "tuple",
        internalType: "struct AddObjectParams",
        components: [
          { name: "source", type: "string", internalType: "string" },
          { name: "key", type: "string", internalType: "string" },
          { name: "blobHash", type: "string", internalType: "string" },
          {
            name: "recoveryHash",
            type: "string",
            internalType: "string",
          },
          { name: "size", type: "uint64", internalType: "uint64" },
          { name: "ttl", type: "uint64", internalType: "uint64" },
          {
            name: "metadata",
            type: "tuple[]",
            internalType: "struct KeyValue[]",
            components: [
              { name: "key", type: "string", internalType: "string" },
              { name: "value", type: "string", internalType: "string" },
            ],
          },
          { name: "overwrite", type: "bool", internalType: "bool" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "addObject",
    inputs: [
      { name: "bucket", type: "address", internalType: "address" },
      { name: "source", type: "string", internalType: "string" },
      { name: "key", type: "string", internalType: "string" },
      { name: "blobHash", type: "string", internalType: "string" },
      { name: "recoveryHash", type: "string", internalType: "string" },
      { name: "size", type: "uint64", internalType: "uint64" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "createBucket",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "createBucket",
    inputs: [
      { name: "owner", type: "address", internalType: "address" },
      {
        name: "metadata",
        type: "tuple[]",
        internalType: "struct KeyValue[]",
        components: [
          { name: "key", type: "string", internalType: "string" },
          { name: "value", type: "string", internalType: "string" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "createBucket",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deleteObject",
    inputs: [
      { name: "bucket", type: "address", internalType: "address" },
      { name: "key", type: "string", internalType: "string" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getObject",
    inputs: [
      { name: "bucket", type: "address", internalType: "address" },
      { name: "key", type: "string", internalType: "string" },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ObjectValue",
        components: [
          { name: "blobHash", type: "string", internalType: "string" },
          {
            name: "recoveryHash",
            type: "string",
            internalType: "string",
          },
          { name: "size", type: "uint64", internalType: "uint64" },
          { name: "expiry", type: "uint64", internalType: "uint64" },
          {
            name: "metadata",
            type: "tuple[]",
            internalType: "struct KeyValue[]",
            components: [
              { name: "key", type: "string", internalType: "string" },
              { name: "value", type: "string", internalType: "string" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "listBuckets",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct Machine[]",
        components: [
          { name: "kind", type: "uint8", internalType: "enum Kind" },
          { name: "addr", type: "address", internalType: "address" },
          {
            name: "metadata",
            type: "tuple[]",
            internalType: "struct KeyValue[]",
            components: [
              { name: "key", type: "string", internalType: "string" },
              { name: "value", type: "string", internalType: "string" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "listBuckets",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct Machine[]",
        components: [
          { name: "kind", type: "uint8", internalType: "enum Kind" },
          { name: "addr", type: "address", internalType: "address" },
          {
            name: "metadata",
            type: "tuple[]",
            internalType: "struct KeyValue[]",
            components: [
              { name: "key", type: "string", internalType: "string" },
              { name: "value", type: "string", internalType: "string" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "queryObjects",
    inputs: [
      { name: "bucket", type: "address", internalType: "address" },
      { name: "prefix", type: "string", internalType: "string" },
      { name: "delimiter", type: "string", internalType: "string" },
      { name: "startKey", type: "string", internalType: "string" },
      { name: "limit", type: "uint64", internalType: "uint64" },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Query",
        components: [
          {
            name: "objects",
            type: "tuple[]",
            internalType: "struct Object[]",
            components: [
              { name: "key", type: "string", internalType: "string" },
              {
                name: "state",
                type: "tuple",
                internalType: "struct ObjectState",
                components: [
                  {
                    name: "blobHash",
                    type: "string",
                    internalType: "string",
                  },
                  {
                    name: "size",
                    type: "uint64",
                    internalType: "uint64",
                  },
                  {
                    name: "metadata",
                    type: "tuple[]",
                    internalType: "struct KeyValue[]",
                    components: [
                      {
                        name: "key",
                        type: "string",
                        internalType: "string",
                      },
                      {
                        name: "value",
                        type: "string",
                        internalType: "string",
                      },
                    ],
                  },
                ],
              },
            ],
          },
          {
            name: "commonPrefixes",
            type: "string[]",
            internalType: "string[]",
          },
          { name: "nextKey", type: "string", internalType: "string" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AddObject",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "bucket",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "CreateBucket",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "DeleteObject",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "bucket",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
] as const;

export const blobManagerABI = [
  {
    type: "function",
    name: "addBlob",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct AddBlobParams",
        components: [
          { name: "sponsor", type: "address", internalType: "address" },
          { name: "source", type: "string", internalType: "string" },
          { name: "blobHash", type: "string", internalType: "string" },
          {
            name: "metadataHash",
            type: "string",
            internalType: "string",
          },
          {
            name: "subscriptionId",
            type: "string",
            internalType: "string",
          },
          { name: "size", type: "uint64", internalType: "uint64" },
          { name: "ttl", type: "uint64", internalType: "uint64" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deleteBlob",
    inputs: [
      { name: "subscriber", type: "address", internalType: "address" },
      { name: "blobHash", type: "string", internalType: "string" },
      { name: "subscriptionId", type: "string", internalType: "string" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAddedBlobs",
    inputs: [{ name: "size", type: "uint32", internalType: "uint32" }],
    outputs: [
      {
        name: "blobs",
        type: "tuple[]",
        internalType: "struct BlobTuple[]",
        components: [
          { name: "blobHash", type: "string", internalType: "string" },
          {
            name: "sourceInfo",
            type: "tuple[]",
            internalType: "struct BlobSourceInfo[]",
            components: [
              {
                name: "subscriber",
                type: "address",
                internalType: "address",
              },
              {
                name: "subscriptionId",
                type: "string",
                internalType: "string",
              },
              { name: "source", type: "string", internalType: "string" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getBlob",
    inputs: [{ name: "blobHash", type: "string", internalType: "string" }],
    outputs: [
      {
        name: "blob",
        type: "tuple",
        internalType: "struct Blob",
        components: [
          { name: "size", type: "uint64", internalType: "uint64" },
          {
            name: "metadataHash",
            type: "string",
            internalType: "string",
          },
          {
            name: "subscribers",
            type: "tuple[]",
            internalType: "struct Subscriber[]",
            components: [
              {
                name: "subscriber",
                type: "string",
                internalType: "string",
              },
              {
                name: "subscriptionGroup",
                type: "tuple[]",
                internalType: "struct SubscriptionGroup[]",
                components: [
                  {
                    name: "subscriptionId",
                    type: "string",
                    internalType: "string",
                  },
                  {
                    name: "subscription",
                    type: "tuple",
                    internalType: "struct Subscription",
                    components: [
                      {
                        name: "added",
                        type: "uint64",
                        internalType: "uint64",
                      },
                      {
                        name: "expiry",
                        type: "uint64",
                        internalType: "uint64",
                      },
                      {
                        name: "source",
                        type: "string",
                        internalType: "string",
                      },
                      {
                        name: "delegate",
                        type: "address",
                        internalType: "address",
                      },
                      {
                        name: "failed",
                        type: "bool",
                        internalType: "bool",
                      },
                    ],
                  },
                ],
              },
            ],
          },
          {
            name: "status",
            type: "uint8",
            internalType: "enum BlobStatus",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getBlobStatus",
    inputs: [
      { name: "subscriber", type: "address", internalType: "address" },
      { name: "blobHash", type: "string", internalType: "string" },
      { name: "subscriptionId", type: "string", internalType: "string" },
    ],
    outputs: [{ name: "status", type: "uint8", internalType: "enum BlobStatus" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPendingBlobs",
    inputs: [{ name: "size", type: "uint32", internalType: "uint32" }],
    outputs: [
      {
        name: "blobs",
        type: "tuple[]",
        internalType: "struct BlobTuple[]",
        components: [
          { name: "blobHash", type: "string", internalType: "string" },
          {
            name: "sourceInfo",
            type: "tuple[]",
            internalType: "struct BlobSourceInfo[]",
            components: [
              {
                name: "subscriber",
                type: "address",
                internalType: "address",
              },
              {
                name: "subscriptionId",
                type: "string",
                internalType: "string",
              },
              { name: "source", type: "string", internalType: "string" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPendingBlobsCount",
    inputs: [],
    outputs: [{ name: "", type: "uint64", internalType: "uint64" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPendingBytesCount",
    inputs: [],
    outputs: [{ name: "", type: "uint64", internalType: "uint64" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStorageStats",
    inputs: [],
    outputs: [
      {
        name: "stats",
        type: "tuple",
        internalType: "struct StorageStats",
        components: [
          {
            name: "capacityFree",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "capacityUsed",
            type: "uint64",
            internalType: "uint64",
          },
          { name: "numBlobs", type: "uint64", internalType: "uint64" },
          {
            name: "numResolving",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "numAccounts",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "bytesResolving",
            type: "uint64",
            internalType: "uint64",
          },
          { name: "numAdded", type: "uint64", internalType: "uint64" },
          { name: "bytesAdded", type: "uint64", internalType: "uint64" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStorageUsage",
    inputs: [{ name: "addr", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSubnetStats",
    inputs: [],
    outputs: [
      {
        name: "stats",
        type: "tuple",
        internalType: "struct SubnetStats",
        components: [
          { name: "balance", type: "uint256", internalType: "uint256" },
          {
            name: "capacityFree",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "capacityUsed",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "creditSold",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "creditCommitted",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "creditDebited",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "tokenCreditRate",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "numAccounts",
            type: "uint64",
            internalType: "uint64",
          },
          { name: "numBlobs", type: "uint64", internalType: "uint64" },
          { name: "numAdded", type: "uint64", internalType: "uint64" },
          {
            name: "bytesAdded",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "numResolving",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "bytesResolving",
            type: "uint64",
            internalType: "uint64",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "overwriteBlob",
    inputs: [
      { name: "oldHash", type: "string", internalType: "string" },
      {
        name: "params",
        type: "tuple",
        internalType: "struct AddBlobParams",
        components: [
          { name: "sponsor", type: "address", internalType: "address" },
          { name: "source", type: "string", internalType: "string" },
          { name: "blobHash", type: "string", internalType: "string" },
          {
            name: "metadataHash",
            type: "string",
            internalType: "string",
          },
          {
            name: "subscriptionId",
            type: "string",
            internalType: "string",
          },
          { name: "size", type: "uint64", internalType: "uint64" },
          { name: "ttl", type: "uint64", internalType: "uint64" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AddBlob",
    inputs: [
      {
        name: "caller",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "sponsor",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "blobHash",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "subscriptionId",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "DeleteBlob",
    inputs: [
      {
        name: "caller",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "subscriber",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "blobHash",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "subscriptionId",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OverwriteBlob",
    inputs: [
      {
        name: "caller",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "oldHash",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "newHash",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "subscriptionId",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
] as const;

export const creditManagerABI = [
  {
    type: "function",
    name: "approveCredit",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
      { name: "caller", type: "address[]", internalType: "address[]" },
      { name: "creditLimit", type: "uint256", internalType: "uint256" },
      { name: "gasFeeLimit", type: "uint256", internalType: "uint256" },
      { name: "ttl", type: "uint64", internalType: "uint64" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "buyCredit",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "buyCredit",
    inputs: [{ name: "recipient", type: "address", internalType: "address" }],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getAccount",
    inputs: [{ name: "addr", type: "address", internalType: "address" }],
    outputs: [
      {
        name: "account",
        type: "tuple",
        internalType: "struct Account",
        components: [
          {
            name: "capacityUsed",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "creditFree",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "creditCommitted",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "creditSponsor",
            type: "address",
            internalType: "address",
          },
          {
            name: "lastDebitEpoch",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "approvals",
            type: "tuple[]",
            internalType: "struct Approval[]",
            components: [
              { name: "to", type: "string", internalType: "string" },
              {
                name: "approval",
                type: "tuple",
                internalType: "struct CreditApproval",
                components: [
                  {
                    name: "creditLimit",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "gasFeeLimit",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "expiry",
                    type: "uint64",
                    internalType: "uint64",
                  },
                  {
                    name: "creditUsed",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "gasFeeUsed",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
              },
            ],
          },
          { name: "maxTtl", type: "uint64", internalType: "uint64" },
          {
            name: "gasAllowance",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getCreditApproval",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
    ],
    outputs: [
      {
        name: "approval",
        type: "tuple",
        internalType: "struct CreditApproval",
        components: [
          {
            name: "creditLimit",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "gasFeeLimit",
            type: "uint256",
            internalType: "uint256",
          },
          { name: "expiry", type: "uint64", internalType: "uint64" },
          {
            name: "creditUsed",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "gasFeeUsed",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getCreditBalance",
    inputs: [{ name: "addr", type: "address", internalType: "address" }],
    outputs: [
      {
        name: "balance",
        type: "tuple",
        internalType: "struct Balance",
        components: [
          {
            name: "creditFree",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "creditCommitted",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "creditSponsor",
            type: "address",
            internalType: "address",
          },
          {
            name: "lastDebitEpoch",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "approvals",
            type: "tuple[]",
            internalType: "struct Approval[]",
            components: [
              { name: "to", type: "string", internalType: "string" },
              {
                name: "approval",
                type: "tuple",
                internalType: "struct CreditApproval",
                components: [
                  {
                    name: "creditLimit",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "gasFeeLimit",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "expiry",
                    type: "uint64",
                    internalType: "uint64",
                  },
                  {
                    name: "creditUsed",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "gasFeeUsed",
                    type: "uint256",
                    internalType: "uint256",
                  },
                ],
              },
            ],
          },
          {
            name: "gasAllowance",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getCreditStats",
    inputs: [],
    outputs: [
      {
        name: "stats",
        type: "tuple",
        internalType: "struct CreditStats",
        components: [
          { name: "balance", type: "uint256", internalType: "uint256" },
          {
            name: "creditSold",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "creditCommitted",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "creditDebited",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "tokenCreditRate",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "numAccounts",
            type: "uint64",
            internalType: "uint64",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "revokeCredit",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "revokeCredit",
    inputs: [{ name: "to", type: "address", internalType: "address" }],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "revokeCredit",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
      { name: "caller", type: "address", internalType: "address" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setAccountSponsor",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "sponsor", type: "address", internalType: "address" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ApproveCredit",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "caller",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
      {
        name: "creditLimit",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "gasFeeLimit",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "ttl",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BuyCredit",
    inputs: [
      {
        name: "addr",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RevokeCredit",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "caller",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SetAccountSponsor",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "sponsor",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
] as const;

export const gatewayManagerFacetABI = [
  {
    type: "function",
    name: "addStake",
    inputs: [{ name: "amount", type: "uint256", internalType: "uint256" }],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "fund",
    inputs: [
      {
        name: "subnetId",
        type: "tuple",
        internalType: "struct SubnetID",
        components: [
          { name: "root", type: "uint64", internalType: "uint64" },
          { name: "route", type: "address[]", internalType: "address[]" },
        ],
      },
      {
        name: "to",
        type: "tuple",
        internalType: "struct FvmAddress",
        components: [
          { name: "addrType", type: "uint8", internalType: "uint8" },
          { name: "payload", type: "bytes", internalType: "bytes" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "fundWithToken",
    inputs: [
      {
        name: "subnetId",
        type: "tuple",
        internalType: "struct SubnetID",
        components: [
          { name: "root", type: "uint64", internalType: "uint64" },
          { name: "route", type: "address[]", internalType: "address[]" },
        ],
      },
      {
        name: "to",
        type: "tuple",
        internalType: "struct FvmAddress",
        components: [
          { name: "addrType", type: "uint8", internalType: "uint8" },
          { name: "payload", type: "bytes", internalType: "bytes" },
        ],
      },
      { name: "amount", type: "uint256", internalType: "uint256" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  { type: "function", name: "kill", inputs: [], outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    name: "register",
    inputs: [
      { name: "genesisCircSupply", type: "uint256", internalType: "uint256" },
      { name: "collateral", type: "uint256", internalType: "uint256" },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "release",
    inputs: [
      {
        name: "to",
        type: "tuple",
        internalType: "struct FvmAddress",
        components: [
          { name: "addrType", type: "uint8", internalType: "uint8" },
          { name: "payload", type: "bytes", internalType: "bytes" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "releaseStake",
    inputs: [{ name: "amount", type: "uint256", internalType: "uint256" }],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "NewBottomUpMsgBatch",
    inputs: [{ name: "epoch", type: "uint256", indexed: true, internalType: "uint256" }],
    anonymous: false,
  },
  {
    type: "event",
    name: "NewTopDownMessage",
    inputs: [
      { name: "subnet", type: "address", indexed: true, internalType: "address" },
      {
        name: "message",
        type: "tuple",
        indexed: false,
        internalType: "struct IpcEnvelope",
        components: [
          { name: "kind", type: "uint8", internalType: "enum IpcMsgKind" },
          {
            name: "to",
            type: "tuple",
            internalType: "struct IPCAddress",
            components: [
              {
                name: "subnetId",
                type: "tuple",
                internalType: "struct SubnetID",
                components: [
                  { name: "root", type: "uint64", internalType: "uint64" },
                  { name: "route", type: "address[]", internalType: "address[]" },
                ],
              },
              {
                name: "rawAddress",
                type: "tuple",
                internalType: "struct FvmAddress",
                components: [
                  { name: "addrType", type: "uint8", internalType: "uint8" },
                  { name: "payload", type: "bytes", internalType: "bytes" },
                ],
              },
            ],
          },
          {
            name: "from",
            type: "tuple",
            internalType: "struct IPCAddress",
            components: [
              {
                name: "subnetId",
                type: "tuple",
                internalType: "struct SubnetID",
                components: [
                  { name: "root", type: "uint64", internalType: "uint64" },
                  { name: "route", type: "address[]", internalType: "address[]" },
                ],
              },
              {
                name: "rawAddress",
                type: "tuple",
                internalType: "struct FvmAddress",
                components: [
                  { name: "addrType", type: "uint8", internalType: "uint8" },
                  { name: "payload", type: "bytes", internalType: "bytes" },
                ],
              },
            ],
          },
          { name: "nonce", type: "uint64", internalType: "uint64" },
          { name: "value", type: "uint256", internalType: "uint256" },
          { name: "message", type: "bytes", internalType: "bytes" },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [{ name: "target", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "AddressInsufficientBalance",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
  },
  { type: "error", name: "AlreadyRegisteredSubnet", inputs: [] },
  { type: "error", name: "CallFailed", inputs: [] },
  { type: "error", name: "CannotReleaseZero", inputs: [] },
  { type: "error", name: "FailedInnerCall", inputs: [] },
  { type: "error", name: "InsufficientFunds", inputs: [] },
  { type: "error", name: "InvalidActorAddress", inputs: [] },
  {
    type: "error",
    name: "InvalidXnetMessage",
    inputs: [{ name: "reason", type: "uint8", internalType: "enum InvalidXnetMessageReason" }],
  },
  {
    type: "error",
    name: "MethodNotAllowed",
    inputs: [{ name: "reason", type: "string", internalType: "string" }],
  },
  { type: "error", name: "NotEmptySubnetCircSupply", inputs: [] },
  { type: "error", name: "NotEnoughBalance", inputs: [] },
  { type: "error", name: "NotEnoughFunds", inputs: [] },
  { type: "error", name: "NotEnoughFundsToRelease", inputs: [] },
  { type: "error", name: "NotRegisteredSubnet", inputs: [] },
  { type: "error", name: "ReentrancyError", inputs: [] },
  {
    type: "error",
    name: "SafeERC20FailedOperation",
    inputs: [{ name: "token", type: "address", internalType: "address" }],
  },
] as const;

export const ierc20ABI = [
  {
    type: "function",
    name: "allowance",
    inputs: [
      { name: "owner", type: "address", internalType: "address" },
      { name: "spender", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      { name: "spender", type: "address", internalType: "address" },
      { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      { name: "to", type: "address", internalType: "address" },
      { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      { name: "from", type: "address", internalType: "address" },
      { name: "to", type: "address", internalType: "address" },
      { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;
