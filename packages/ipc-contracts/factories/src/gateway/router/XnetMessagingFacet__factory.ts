/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  XnetMessagingFacet,
  XnetMessagingFacetInterface,
} from "../../../../src/gateway/router/XnetMessagingFacet";

const _abi = [
  {
    inputs: [],
    name: "CannotSendCrossMsgToItself",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum InvalidXnetMessageReason",
        name: "reason",
        type: "uint8",
      },
    ],
    name: "InvalidXnetMessage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "MethodNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "NotRegisteredSubnet",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSystemActor",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
    ],
    name: "NewBottomUpMsgBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "subnet",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IpcMsgKind",
            name: "kind",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "to",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "from",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        indexed: false,
        internalType: "struct IpcEnvelope",
        name: "message",
        type: "tuple",
      },
    ],
    name: "NewTopDownMessage",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IpcMsgKind",
            name: "kind",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "to",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "from",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct IpcEnvelope[]",
        name: "crossMsgs",
        type: "tuple[]",
      },
    ],
    name: "applyCrossMessages",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657612851908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c63dd8319ee1461002c57600080fd5b346102b457602090816003193601126102b05782356001600160401b03948582116102ac57366023830112156102ac5781850135958087116102a857602490818860051b8501019436861161029357635d3f8a6960e01b815233888201528681848173__$e800e3908cdbb6b1b5bd452383a17b18f7$__5af490811561029e578a91610265575b50156102555788866100c3610340565b986100e486519a8b9384936308c7427760e11b855284015286830190610566565b038173__$a0fe38a9a81205afccc10810b09a4d3f45$__5af496871561024b578997610227575b5061011588610470565b976101228451998a61031f565b8852818401938689015b868610610163578a8a8a815191835b838110610146578480f35b8061015d6101566001938561075b565b5185610ec0565b0161013b565b853583811161022357820160c0602319823603011261022357855191610188836102b8565b85820135600381101561021f578352604482013585811161021f576101b290873691850101610634565b8a840152606482013585811161021f576101d190873691850101610634565b878401526101e1608483016105be565b606084015260a4820135608084015260c48201359285841161021f5761020f8b9493888695369201016105ed565b60a082015281520195019461012c565b8d80fd5b8b80fd5b6102449197503d808b833e61023c818361031f565b81019061053e565b953861010b565b83513d8b823e3d90fd5b825163f0d97f3b60e01b81528790fd5b90508681813d8311610297575b61027c818361031f565b810103126102935761028d9061074e565b386100b3565b8980fd5b503d610272565b84513d8c823e3d90fd5b8780fd5b8680fd5b8480fd5b8380fd5b60c081019081106001600160401b038211176102d357604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176102d357604052565b606081019081106001600160401b038211176102d357604052565b90601f801991011681019081106001600160401b038211176102d357604052565b6040519061034d826102e9565b816001600160401b036012541681526040518091826013549283815260208091019360136000527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090916000905b8282106103b757505050506103b390602093038461031f565b0152565b83546001600160a01b03168752958601958794506001938401939091019061039a565b90604051916103e8836102e9565b826001600160401b0382541681526001809201916040519283849282548083526020809301936000526020600020926000905b828210610436575050505050602092916103b391038461031f565b84546001600160a01b0316865288965094850194938301939083019061041b565b51906001600160401b038216820361046b57565b600080fd5b6001600160401b0381116102d35760051b60200190565b51906001600160a01b038216820361046b57565b919060408382031261046b57604051926104b4846102e9565b836104be82610457565b815260209182810151906001600160401b03821161046b57019280601f8501121561046b5783516104ee81610470565b946104fc604051968761031f565b818652848087019260051b82010192831161046b5784809101915b83831061052657505050500152565b819061053184610487565b8152019101908490610517565b9060208282031261046b5781516001600160401b03811161046b57610563920161049b565b90565b604082016001600160401b0382511683526020606081809401519460408382015285518094520193019160005b8281106105a1575050505090565b83516001600160a01b031685529381019392810192600101610593565b35906001600160401b038216820361046b57565b6001600160401b0381116102d357601f01601f191660200190565b81601f8201121561046b57803590610604826105d2565b92610612604051948561031f565b8284526020838301011161046b57816000926020809301838601378301015290565b9190604092838183031261046b57835161064d816102e9565b80948235936001600160401b039485811161046b57840193828583031261046b578251610679816102e9565b610682866105be565b8152602095868101359088821161046b570183601f8201121561046b578035906106ab82610470565b916106b88751938461031f565b808352888084019160051b8301019186831161046b578901905b82821061072f57505050868201528452848101359086821161046b570191808383031261046b575194610704866102e9565b823560ff8116810361046b5786528483013590811161046b5761072792016105ed565b828401520152565b81356001600160a01b038116810361046b5781529089019089016106d2565b5190811515820361046b57565b805182101561076f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9081602091031261046b5751600281101561046b5790565b600311156107a757565b634e487b7160e01b600052602160045260246000fd5b60005b8381106107d05750506000910152565b81810151838201526020016107c0565b906020916107f9815180928185528580860191016107bd565b601f01601f1916010190565b60406020610563938161081f855185845285840190610566565b940151908281860391015260ff815116845201519181602082015201906107e0565b6105639181516108508161079d565b815260a0610882610870602085015160c0602086015260c0850190610805565b60408501518482036040860152610805565b926001600160401b0360608201511660608401526080810151608084015201519060a08184039101526107e0565b60408101906001600160401b03601254168152606060209160406020820152601354809452019160136000527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090916000905b828210610910575050505090565b83546001600160a01b031685529384019360019384019390910190610902565b61094561056392604083526040830190610841565b9060208183039101526108b0565b600211156107a757565b9060016001600160401b038093160191821161097557565b634e487b7160e01b600052601160045260246000fd5b9081604091031261046b57604051906109a3826102e9565b8051600281101561046b5782526109bc90602001610487565b602082015290565b61094561056392604083526040830190610566565b8181106109e4575050565b600081556001016109d9565b90600160401b81116102d357815490808355818110610a0e57505050565b610a2492600052602060002091820191016109d9565b565b90600182811c92168015610a56575b6020831014610a4057565b634e487b7160e01b600052602260045260246000fd5b91607f1691610a35565b8151610a6b8161079d565b610a748161079d565b60ff199060ff828454169116178255600180830160209182860151948551926001600160401b039586855116916001600160401b0319928382541617905585600284019501518051908882116102d3578790610ad083896109f0565b01600096875287872086885b848110610ea557505050505085600384019801519760ff895116828254161790558560048401980151978851888111610dd757610b198254610a26565b99601f9a8b8111610e79575b5088908b8311600114610e1a57610b549291899183610c86575b50508160011b916000199060031b1c19161790565b90555b6005830160408a01519081519089825116858254161790558760068601910151908151918a8311610e06578990610b8e84846109f0565b0190885288882087895b848110610deb57505050505086600785019101519160ff835116908254161790558560088401910151805190888211610dd757610bd58354610a26565b8a8111610dab575b5087908a8311600114610d3f5782600b959360a0979593610c13938b92610c865750508160011b916000199060031b1c19161790565b90555b60098201908860608c015116908254161790556080890151600a82015501960151928351948511610d2b57610c4b8754610a26565b868111610cf5575b5080958511600114610c91575050928291610c829492610c865750508160011b916000199060031b1c19161790565b9055565b015190503880610b3f565b8683528083209195919391928591601f19831691905b88838310610cdb5750505010610cc2575b505050811b019055565b015160001960f88460031b161c19169055388080610cb8565b858701518855909601959485019487935090810190610ca7565b610d1c908885528285208880890160051c820192858a10610d22575b0160051c01906109d9565b38610c53565b92508192610d11565b634e487b7160e01b83526041600452602483fd5b8388528888208793929091601f1984168a5b8c828210610d9557505091600b979593918560a09a98969410610d7c575b505050811b019055610c16565b015160001960f88460031b161c19169055388080610d6f565b8385015186558b97909501949384019301610d51565b610dd1908489528989208c80860160051c8201928c8710610d22570160051c01906109d9565b38610bdd565b634e487b7160e01b87526041600452602487fd5b83516001600160a01b031683820155928b0192899101610b98565b634e487b7160e01b89526041600452602489fd5b8389528989208893929091601f1984168b5b8d828210610e635750508411610e4a575b505050811b019055610b57565b015160001960f88460031b161c19169055388080610e3d565b8385015186558c97909501949384019301610e2c565b610e9f90848a528a8a208d80860160051c8201928d8710610d22570160051c01906109d9565b38610b25565b83516001600160a01b031683820155928a0192889101610adc565b602090818301918251519173__$a0fe38a9a81205afccc10810b09a4d3f45$__604093845192630c133d1360e31b8452600493858180610f0a602496848a84015287830190610566565b0381875af490811561136657600091611331575b506113075785516000610f30826102e9565b80825286820152865163855f7e4560e01b8152868180610f528d8a8301610930565b038173__$33b79814e84bf6cf5e47244090b19ce5f8$__5af49081156112fc576000916112cf575b50610f8481610953565b600181036111f1575050610f97906116a4565b90156111e757600381016001600160401b03808254891c168160608c015116036111b657858793838a67ffffffffffffffff60401b610fe2610ffd9661101d9a985480941c1661095d565b8d1b169067ffffffffffffffff60401b1916179055016103da565b8751632cff562160e11b8152868101849052938492839290830190610566565b0381855af4908115611172578391869160009161117d575b5081516380875df760e01b815292839182906001600160a01b03165afa908115611172579161108993918593600091611145575b50965b5151865163c836244d60e01b8152948593849283929183016109c4565b03915af490811561113a57600091611105575b50156110c65750506110ae908261188d565b90156110bd57610a2491611637565b610a24916115c9565b610a249392506021908251818101908282526110f6816110e88782018961184c565b03601f19810183528261031f565b51902060005252600020610a60565b90508181813d8311611133575b61111c818361031f565b8101031261046b5761112d9061074e565b3861109c565b503d611112565b83513d6000823e3d90fd5b6111659150873d891161116b575b61115d818361031f565b81019061098b565b38611069565b503d611153565b85513d6000823e3d90fd5b925050508381813d83116111af575b611196818361031f565b8101031261046b57846111a98492610487565b38611035565b503d61118c565b5050509294505050610a249391519263bc0f01cf60e01b9084015260028184015282526111e282610304565b61143a565b5050505050505050565b90979291506111ff81610953565b15611212575b509183916110899361106c565b9095506001600160401b039081600354871c168260608a015116036112a5575091839161127361124a61108995600354891c1661095d565b67ffffffffffffffff60401b6003549160401b169067ffffffffffffffff60401b191617600355565b6000838751611281816102e9565b82815201528551611291816102e9565b600081526000848201529691935091611205565b939550505050610a249391519263bc0f01cf60e01b9084015260028184015282526111e282610304565b6112ef9150873d89116112f5575b6112e7818361031f565b810190610785565b38610f7a565b503d6112dd565b88513d6000823e3d90fd5b509294505050610a249391519263bc0f01cf60e01b9084015260018184015282526111e282610304565b90508581813d831161135f575b611348818361031f565b8101031261046b576113599061074e565b38610f1e565b503d61133e565b87513d6000823e3d90fd5b81601f8201121561046b578051611387816105d2565b92611395604051948561031f565b8184526020828401011161046b5761056391602080850191016107bd565b919060408382031261046b57604051926113cc846102e9565b838151916001600160401b039283811161046b57846113ec91830161049b565b825260208101519083821161046b570160408185031261046b5760405193611413856102e9565b815160ff8116810361046b578552602082015193841161046b576020936107279201611371565b6114438161198e565b6115c557600281516114548161079d565b61145d8161079d565b146115c557604051634dbefc2d60e11b81526060600482015290611485906064830190610841565b916001602483015260031982840301604483015281806114a860009586946107e0565b038173__$33b79814e84bf6cf5e47244090b19ce5f8$__5af49081156115ba5782916114dd575b506114da91506119b8565b50565b90503d8083833e6114ee818361031f565b8101906020818303126115b65780516001600160401b03918282116102b0570160c0818403126102b45760405193611525856102b8565b815160038110156115b257855260208201518381116115b2578461154a9184016113b3565b602086015260408201518381116115b257846115679184016113b3565b604086015261157860608301610457565b60608601526080820151608086015260a08201519283116115af5750916115a4916114da949301611371565b60a0820152386114cf565b80fd5b5080fd5b8280fd5b6040513d84823e3d90fd5b5050565b6115d28161198e565b6115c557600281516115e38161079d565b6115ec8161079d565b146115c557604051634dbefc2d60e11b81526060600482015290611614906064830190610841565b916002602483015260031982840301604483015281806114a860009586946107e0565b6116408161198e565b6115c557600281516116518161079d565b61165a8161079d565b146115c557604051634dbefc2d60e11b81526060600482015290611682906064830190610841565b9181806114a860009586948560248501526003198483030160448501526107e0565b6116e273__$a0fe38a9a81205afccc10810b09a4d3f45$__91604051906390ba52cf60e01b8252818060209485938460048401526024830190610566565b0381865af490811561178657600091611792575b50600052601f815261173781604060002093611714600486016103da565b906040518080958194630c133d1360e31b83528660048401526024830190610566565b03915af491821561178657600092611750575b50501591565b90809250813d831161177f575b611767818361031f565b8101031261046b576117789061074e565b388061174a565b503d61175d565b6040513d6000823e3d90fd5b90508181813d83116117b8575b6117a9818361031f565b8101031261046b5751386116f6565b503d61179f565b91908251906040815260808101936001600160401b038351166040830152602080930151946040606084015285518091528360a0840196019060005b81811061182f575050509360408381938161056397980151908281860391015260ff815116845201519382015201906107e0565b82516001600160a01b0316885296850196918501916001016117fb565b61056391815161185b8161079d565b815260a061088261187b602085015160c0602086015260c08501906117bf565b604085015184820360408601526117bf565b91906040516118eb816020936118bb8583019763065c4c3160e11b895260606024850152608484019061184c565b9080516118c781610953565b60448401528501516001600160a01b0316606483015203601f19810183528261031f565b600080948192519073__$33b79814e84bf6cf5e47244090b19ce5f8$__5af4903d15611986573d9361191c856105d2565b9461192a604051968761031f565b85523d818387013e5b8483611940575050509190565b91945092915080518101936040828603126102b45761196081830161074e565b936040830151906001600160401b0382116115af57508161056394959601920101611371565b606093611933565b80516119998161079d565b6119a28161079d565b156119b05760a00151511590565b608001511590565b906020918281019283515173__$a0fe38a9a81205afccc10810b09a4d3f45$__90604091825191630c133d1360e31b83526004906024938683820152868180611a0388820186610566565b0381875af490811561214f5760009161211a575b5061210457845163c836244d60e01b80825290878180611a39868883016109c4565b0381885af4908115611366576000916120cf575b506120bf5785880151519086519263855f7e4560e01b8452888480611a748d898301610930565b038173__$33b79814e84bf6cf5e47244090b19ce5f8$__5af49384156112fc576000946120a0575b508751631ccc893360e11b815285810189905260008180611ad4611ac36044830187610566565b828103600319018d84015288610566565b03818a5af4908115611f4457611b0495949392918b91600091612085575b508a51809781928683528a83016109c4565b03818a5af4948515611f445760009561204e575b50600090611b2585610953565b60018503611f4f57505087516308c7427760e11b81528581018a90529060008280611b528b820187610566565b03818a5af4918215611f4457918a91611b809493600092611f27575b508a51948592839283528983016109c4565b0381895af49182156112fc57908991600093611eef575b5082611e72575b50505b611dd9575b611baf81610953565b15908115611dd1575b50611bd75750505050506080919250611bd081612452565b0151151590565b6001600160401b0395949580600354861c16818114611d9057611c42979899611c2860016000930167ffffffffffffffff60401b6003549160401b169067ffffffffffffffff60401b191617600355565b515186518099819263089032d560e01b83528683016109c4565b0381865af496871561117257600097611db4575b50611c60876116a4565b919015611da4576003820190815490611c808183168060608c015261095d565b16906001600160401b0319161790556002608087015191018054918201809211611d90575583516304e384ff60e21b815290810187905294869286929183918291611ccd91830190610566565b03915af4928315611d8557600093611d2b575b50518381526001600160a01b03909216927ffdd39ce2560484814971f663392e78ae37dc62ba184b3370d830371dd271a8b792918291611d23919083019061184c565b0390a2600090565b92508383813d8311611d7e575b611d42818361031f565b8101031261046b57611d23611d777ffdd39ce2560484814971f663392e78ae37dc62ba184b3370d830371dd271a8b794610487565b9350611ce0565b503d611d38565b50513d6000823e3d90fd5b84601184634e487b7160e01b600052526000fd5b8551630e991abd60e41b81528390fd5b611dca9197503d806000833e61023c818361031f565b9538611c56565b905038611bb8565b8751611de48161079d565b611ded8161079d565b611ba657855163015538b160e01b8152808401889052604f818701527f70726f7061676174696f6e206f6620605472616e7366657260206d657373616760448201527f6573206e6f742073757070706f7274656420666f72207375626e65747320776960648201526e746820455243323020737570706c7960881b608482015260a490fd5b611e959250885180938192632cff562160e11b835284898401528a830190610566565b0381885af4801561136657600090611eb9575b611eb2915061215a565b8738611b9e565b508781813d8311611ee8575b611ecf818361031f565b8101031261046b57611ee3611eb291610487565b611ea8565b503d611ec5565b8281939294503d8311611f20575b611f07818361031f565b8101031261046b57611f19899161074e565b9138611b97565b503d611efd565b611f3d9192503d806000833e61023c818361031f565b9038611b6e565b89513d6000823e3d90fd5b91509150611f5c83610953565b818315611f6b575b5050611ba1565b885163089032d560e01b81529182908190611f88908983016109c4565b0381895af49081156120445782918a91611fc1949161202a575b50895180948192632cff562160e11b8352848a8401528b830190610566565b0381895af490811561201f578091611fe6575b50611fdf915061215a565b3881611f64565b90508882813d8311612018575b611ffd818361031f565b810103126115af5750612012611fdf91610487565b38611fd4565b503d611ff3565b8851903d90823e3d90fd5b61203e91503d8085833e61023c818361031f565b38611fa2565b88513d84823e3d90fd5b9094508981813d831161207e575b612066818361031f565b8101031261046b576120779061074e565b9338611b18565b503d61205c565b61209a91503d806000833e61023c818361031f565b38611af2565b6120b8919450893d8b116112f5576112e7818361031f565b9238611a9c565b8551632f3335ff60e21b81528390fd5b90508781813d83116120fd575b6120e6818361031f565b8101031261046b576120f79061074e565b38611a4d565b503d6120dc565b845163bc0f01cf60e01b81526001818401528490fd5b90508681813d8311612148575b612131818361031f565b8101031261046b576121429061074e565b38611a17565b503d612127565b86513d6000823e3d90fd5b604080516380875df760e01b815291829060049082906001600160a01b03165afa8015611786576001916000916121a4575b505161219781610953565b6121a081610953565b1490565b6121bd915060403d60401161116b5761115d818361031f565b3861218c565b601381146114da57601354906001600160401b0382116102d3576121e782826109f0565b6000908152602081207f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09080545b848410612222575050505050565b600191820180546001600160a01b0390921684860155939091019290612214565b805482101561076f57600052600c602060002091020190600090565b8054600160401b8110156102d35761227c91600182018155612243565b91909161228c57610a2491610a60565b634e487b7160e01b600052600060045260246000fd5b604051906122af826102e9565b6060602083600081520152565b604051906122c9826102e9565b816122d26122a2565b815260206122de6122a2565b910152565b906040519182600082546122f681610a26565b908184526020946001916001811690816000146123645750600114612325575b505050610a249250038361031f565b600090815285812095935091905b81831061234c575050610a249350820101388080612316565b85548884018501529485019487945091830191612333565b92505050610a2494925060ff191682840152151560051b820101388080612316565b9060405191612394836102e9565b6020836123a0836103da565b81526107276003604051946123b4866102e9565b60ff6002820154168652016122e3565b6123ce8154610a26565b90816123d8575050565b81601f600093116001146123ea575055565b908083918252612409601f60208420940160051c8401600185016109d9565b5555565b6003610a2491600081556001810180546000825580612436575b505060006002820155016123c4565b61244b916000526020600020908101906109d9565b3880612427565b60019081546001600160401b039080156128055780824316048481018091116109755781810291818304149015171561097557600380549280841690806124a06060938060608a015261095d565b166001600160401b031980961617835560009484865260206023815260409586882090600282018054156127c75750508501958654865460c01c146000146127b5578654986124ee8a610470565b976124fb8351998a61031f565b8a8952601f1961250a8c610470565b01848b898c825b85841061276d5750505050505082519a60608c018c81108882111761275957845261253a610340565b8c52848c0197438952848d019a8b528d8c5b848d888a8d8886106126cd575050505050505050437f4ecfe3c1ed32ef0a63d3801d51eb20214db90b14dc5fd1ca58a9de54f16f46a68c80a28a825580612650575b50906125999161225f565b84518852602382528720975191838351169089541617885580898901920151805193841161263c5781906125d085859b9a9b6109f0565b019188528088209089895b85811061262157505050505050516002840155815151939201915b838110612604575050505050565b8061261b6126148793855161075b565b518561225f565b016125f6565b84516001600160a01b031684820155938201938b91016125db565b634e487b7160e01b88526041600452602488fd5b600c9080600c0290600c8204036126b957828c52858c20908101908e5b8d83831061267e575050505061258e565b829161268e91869455820161240d565b61269a6005820161240d565b8d60098201558d600a8201556126b2600b82016123c4565b018e61266d565b634e487b7160e01b8c52601160045260248cfd5b600b869461273b926126e28761275099612243565b509151958051956126f2876102b8565b60ff8454166127008161079d565b875261270d8c8501612386565b9087015261271d60058401612386565b908601526009820154168a850152600a8101546080850152016122e3565b60a082015261274a838361075b565b5261075b565b50018e9061254c565b634e487b7160e01b8c52604160045260248cfd5b84918185928b519561277e876102b8565b8187526127896122bc565b868801526127956122bc565b8d88015286015260808501528d60a0850152010152018590898c8e612511565b5050505050509050610a24925061225f565b955095975095505096610a2497601286036127e7575b505050550161225f565b6127fd92601254169086541617855584016121c3565b3880806127dd565b634e487b7160e01b600052601260045260246000fdfea2646970667358221220872f255198da50b59a293c65bb87c628339ad5c74868e4ae90738d5a0075369f64736f6c63430008170033";

type XnetMessagingFacetConstructorParams =
  | [linkLibraryAddresses: XnetMessagingFacetLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XnetMessagingFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class XnetMessagingFacet__factory extends ContractFactory {
  constructor(...args: XnetMessagingFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        XnetMessagingFacet__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: XnetMessagingFacetLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e800e3908cdbb6b1b5bd452383a17b18f7\\$__", "g"),
      linkLibraryAddresses["src/lib/AccountHelper.sol:AccountHelper"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$a0fe38a9a81205afccc10810b09a4d3f45\\$__", "g"),
      linkLibraryAddresses["src/lib/SubnetIDHelper.sol:SubnetIDHelper"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$33b79814e84bf6cf5e47244090b19ce5f8\\$__", "g"),
      linkLibraryAddresses["src/lib/CrossMsgHelper.sol:CrossMsgHelper"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      XnetMessagingFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): XnetMessagingFacet__factory {
    return super.connect(runner) as XnetMessagingFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XnetMessagingFacetInterface {
    return new Interface(_abi) as XnetMessagingFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): XnetMessagingFacet {
    return new Contract(address, _abi, runner) as unknown as XnetMessagingFacet;
  }
}

export interface XnetMessagingFacetLibraryAddresses {
  ["src/lib/AccountHelper.sol:AccountHelper"]: string;
  ["src/lib/SubnetIDHelper.sol:SubnetIDHelper"]: string;
  ["src/lib/CrossMsgHelper.sol:CrossMsgHelper"]: string;
}
