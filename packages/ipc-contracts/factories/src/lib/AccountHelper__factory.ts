/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AccountHelper,
  AccountHelperInterface,
} from "../../../src/lib/AccountHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isSystemActor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601857608e908161001e823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c635d3f8a6914602657600080fd5b60203660031901126053576004356001600160a01b038116919082900360535760209160ff60981b148152f35b600080fdfea264697066735822122068e6076db22212d48c4927c574a1ba66e190658e90913bfc989d5a9d2124c94f64736f6c63430008170033";

type AccountHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountHelper__factory extends ContractFactory {
  constructor(...args: AccountHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AccountHelper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AccountHelper__factory {
    return super.connect(runner) as AccountHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountHelperInterface {
    return new Interface(_abi) as AccountHelperInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AccountHelper {
    return new Contract(address, _abi, runner) as unknown as AccountHelper;
  }
}
