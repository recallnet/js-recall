"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibDiamond__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "_selector",
                type: "bytes4",
            },
        ],
        name: "CannotAddFunctionToDiamondThatAlreadyExists",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4[]",
                name: "_selectors",
                type: "bytes4[]",
            },
        ],
        name: "CannotAddSelectorsToZeroAddress",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "_selector",
                type: "bytes4",
            },
        ],
        name: "CannotRemoveFunctionThatDoesNotExist",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "_selector",
                type: "bytes4",
            },
        ],
        name: "CannotRemoveImmutableFunction",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "_selector",
                type: "bytes4",
            },
        ],
        name: "CannotReplaceFunctionThatDoesNotExists",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "_selector",
                type: "bytes4",
            },
        ],
        name: "CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4[]",
                name: "_selectors",
                type: "bytes4[]",
            },
        ],
        name: "CannotReplaceFunctionsFromFacetWithZeroAddress",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "_selector",
                type: "bytes4",
            },
        ],
        name: "CannotReplaceImmutableFunction",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "enum IDiamond.FacetCutAction",
                name: "_action",
                type: "uint8",
            },
        ],
        name: "IncorrectFacetCutAction",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_initializationContractAddress",
                type: "address",
            },
            {
                internalType: "bytes",
                name: "_calldata",
                type: "bytes",
            },
        ],
        name: "InitializationFunctionReverted",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidAddress",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_contractAddress",
                type: "address",
            },
            {
                internalType: "string",
                name: "_message",
                type: "string",
            },
        ],
        name: "NoBytecodeAtAddress",
        type: "error",
    },
    {
        inputs: [],
        name: "NoSelectorsGivenToAdd",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_facetAddress",
                type: "address",
            },
        ],
        name: "NoSelectorsProvidedForFacetForCut",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_user",
                type: "address",
            },
            {
                internalType: "address",
                name: "_contractOwner",
                type: "address",
            },
        ],
        name: "NotContractOwner",
        type: "error",
    },
    {
        inputs: [],
        name: "NotOwner",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_facetAddress",
                type: "address",
            },
        ],
        name: "RemoveFacetAddressMustBeZeroAddress",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "oldOwner",
                type: "address",
            },
            {
                indexed: false,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        inputs: [],
        name: "DIAMOND_STORAGE_POSITION",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608080604052346018576094908161001e823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c63b2bebf5514602657600080fd5b6000366003190112605957807f806e0cbb9fce296bbc336a48f42bf1dbc69722d18d90d6fe705b7582c2bb4bd260209252f35b600080fdfea2646970667358221220bad3576de11574af321a6601c9c71aa22127037af84c3dfc7c8504f7fd936a7f64736f6c63430008170033";
const isSuperArgs = (xs) => xs.length > 1;
class LibDiamond__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.LibDiamond__factory = LibDiamond__factory;
LibDiamond__factory.bytecode = _bytecode;
LibDiamond__factory.abi = _abi;
//# sourceMappingURL=LibDiamond__factory.js.map