/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LibGateway,
  LibGatewayInterface,
} from "../../../src/lib/LibGateway";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "weight",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "metadata",
                type: "bytes",
              },
            ],
            internalType: "struct Validator[]",
            name: "validators",
            type: "tuple[]",
          },
          {
            internalType: "uint64",
            name: "configurationNumber",
            type: "uint64",
          },
        ],
        indexed: false,
        internalType: "struct Membership",
        name: "",
        type: "tuple",
      },
    ],
    name: "MembershipUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
    ],
    name: "NewBottomUpMsgBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "subnet",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IpcMsgKind",
            name: "kind",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "to",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "from",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        indexed: false,
        internalType: "struct IpcEnvelope",
        name: "message",
        type: "tuple",
      },
    ],
    name: "NewTopDownMessage",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f899466af62f64f06fd7c40653bba012bc5400b38b4d1493c00ee033dcc67ce264736f6c63430008170033";

type LibGatewayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibGatewayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibGateway__factory extends ContractFactory {
  constructor(...args: LibGatewayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LibGateway & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LibGateway__factory {
    return super.connect(runner) as LibGateway__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibGatewayInterface {
    return new Interface(_abi) as LibGatewayInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LibGateway {
    return new Contract(address, _abi, runner) as unknown as LibGateway;
  }
}
