/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGateway,
  IGatewayInterface,
} from "../../../src/interfaces/IGateway";

const _abi = [
  {
    inputs: [],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint64",
                name: "root",
                type: "uint64",
              },
              {
                internalType: "address[]",
                name: "route",
                type: "address[]",
              },
            ],
            internalType: "struct SubnetID",
            name: "subnetID",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "blockHeight",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "nextConfigurationNumber",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "enum IpcMsgKind",
                name: "kind",
                type: "uint8",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint64",
                        name: "root",
                        type: "uint64",
                      },
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "addrType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct FvmAddress",
                    name: "rawAddress",
                    type: "tuple",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "to",
                type: "tuple",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint64",
                        name: "root",
                        type: "uint64",
                      },
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "addrType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct FvmAddress",
                    name: "rawAddress",
                    type: "tuple",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "from",
                type: "tuple",
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "message",
                type: "bytes",
              },
            ],
            internalType: "struct IpcEnvelope[]",
            name: "msgs",
            type: "tuple[]",
          },
        ],
        internalType: "struct BottomUpCheckpoint",
        name: "bottomUpCheckpoint",
        type: "tuple",
      },
    ],
    name: "commitCheckpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "height",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
        ],
        internalType: "struct ParentFinality",
        name: "finality",
        type: "tuple",
      },
    ],
    name: "commitParentFinality",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint64",
                name: "root",
                type: "uint64",
              },
              {
                internalType: "address[]",
                name: "route",
                type: "address[]",
              },
            ],
            internalType: "struct SubnetID",
            name: "subnetID",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "blockHeight",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "nextConfigurationNumber",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "enum IpcMsgKind",
                name: "kind",
                type: "uint8",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint64",
                        name: "root",
                        type: "uint64",
                      },
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "addrType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct FvmAddress",
                    name: "rawAddress",
                    type: "tuple",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "to",
                type: "tuple",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint64",
                        name: "root",
                        type: "uint64",
                      },
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "addrType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "payload",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct FvmAddress",
                    name: "rawAddress",
                    type: "tuple",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "from",
                type: "tuple",
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "message",
                type: "bytes",
              },
            ],
            internalType: "struct IpcEnvelope[]",
            name: "msgs",
            type: "tuple[]",
          },
        ],
        internalType: "struct BottomUpCheckpoint",
        name: "checkpoint",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "membershipRootHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "membershipWeight",
        type: "uint256",
      },
    ],
    name: "createBottomUpCheckpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "root",
            type: "uint64",
          },
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnetId",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "addrType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct FvmAddress",
        name: "to",
        type: "tuple",
      },
    ],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "root",
            type: "uint64",
          },
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnetId",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "addrType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct FvmAddress",
        name: "to",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "fundWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "msgCid",
        type: "bytes32",
      },
    ],
    name: "propagate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "genesisCircSupply",
        type: "uint256",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "addrType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct FvmAddress",
        name: "to",
        type: "tuple",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "releaseStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IpcMsgKind",
            name: "kind",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "to",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "from",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct IpcEnvelope",
        name: "envelope",
        type: "tuple",
      },
    ],
    name: "sendContractXnetMessage",
    outputs: [
      {
        components: [
          {
            internalType: "enum IpcMsgKind",
            name: "kind",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "to",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "from",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct IpcEnvelope",
        name: "committed",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IGateway__factory {
  static readonly abi = _abi;
  static createInterface(): IGatewayInterface {
    return new Interface(_abi) as IGatewayInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IGateway {
    return new Contract(address, _abi, runner) as unknown as IGateway;
  }
}
