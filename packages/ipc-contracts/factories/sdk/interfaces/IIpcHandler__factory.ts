/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IIpcHandler,
  IIpcHandlerInterface,
} from "../../../sdk/interfaces/IIpcHandler";

const _abi = [
  {
    inputs: [],
    name: "CallerIsNotGateway",
    type: "error",
  },
  {
    inputs: [],
    name: "UnrecognizedResult",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedMsgKind",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IpcMsgKind",
            name: "kind",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "to",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "root",
                    type: "uint64",
                  },
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "subnetId",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "addrType",
                    type: "uint8",
                  },
                  {
                    internalType: "bytes",
                    name: "payload",
                    type: "bytes",
                  },
                ],
                internalType: "struct FvmAddress",
                name: "rawAddress",
                type: "tuple",
              },
            ],
            internalType: "struct IPCAddress",
            name: "from",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct IpcEnvelope",
        name: "envelope",
        type: "tuple",
      },
    ],
    name: "handleIpcMessage",
    outputs: [
      {
        internalType: "bytes",
        name: "ret",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IIpcHandler__factory {
  static readonly abi = _abi;
  static createInterface(): IIpcHandlerInterface {
    return new Interface(_abi) as IIpcHandlerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IIpcHandler {
    return new Contract(address, _abi, runner) as unknown as IIpcHandler;
  }
}
