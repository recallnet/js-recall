"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IIpcHandler__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CallerIsNotGateway",
        type: "error",
    },
    {
        inputs: [],
        name: "UnrecognizedResult",
        type: "error",
    },
    {
        inputs: [],
        name: "UnsupportedMsgKind",
        type: "error",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "enum IpcMsgKind",
                        name: "kind",
                        type: "uint8",
                    },
                    {
                        components: [
                            {
                                components: [
                                    {
                                        internalType: "uint64",
                                        name: "root",
                                        type: "uint64",
                                    },
                                    {
                                        internalType: "address[]",
                                        name: "route",
                                        type: "address[]",
                                    },
                                ],
                                internalType: "struct SubnetID",
                                name: "subnetId",
                                type: "tuple",
                            },
                            {
                                components: [
                                    {
                                        internalType: "uint8",
                                        name: "addrType",
                                        type: "uint8",
                                    },
                                    {
                                        internalType: "bytes",
                                        name: "payload",
                                        type: "bytes",
                                    },
                                ],
                                internalType: "struct FvmAddress",
                                name: "rawAddress",
                                type: "tuple",
                            },
                        ],
                        internalType: "struct IPCAddress",
                        name: "to",
                        type: "tuple",
                    },
                    {
                        components: [
                            {
                                components: [
                                    {
                                        internalType: "uint64",
                                        name: "root",
                                        type: "uint64",
                                    },
                                    {
                                        internalType: "address[]",
                                        name: "route",
                                        type: "address[]",
                                    },
                                ],
                                internalType: "struct SubnetID",
                                name: "subnetId",
                                type: "tuple",
                            },
                            {
                                components: [
                                    {
                                        internalType: "uint8",
                                        name: "addrType",
                                        type: "uint8",
                                    },
                                    {
                                        internalType: "bytes",
                                        name: "payload",
                                        type: "bytes",
                                    },
                                ],
                                internalType: "struct FvmAddress",
                                name: "rawAddress",
                                type: "tuple",
                            },
                        ],
                        internalType: "struct IPCAddress",
                        name: "from",
                        type: "tuple",
                    },
                    {
                        internalType: "uint64",
                        name: "nonce",
                        type: "uint64",
                    },
                    {
                        internalType: "uint256",
                        name: "value",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "message",
                        type: "bytes",
                    },
                ],
                internalType: "struct IpcEnvelope",
                name: "envelope",
                type: "tuple",
            },
        ],
        name: "handleIpcMessage",
        outputs: [
            {
                internalType: "bytes",
                name: "ret",
                type: "bytes",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
];
class IIpcHandler__factory {
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.IIpcHandler__factory = IIpcHandler__factory;
IIpcHandler__factory.abi = _abi;
//# sourceMappingURL=IIpcHandler__factory.js.map