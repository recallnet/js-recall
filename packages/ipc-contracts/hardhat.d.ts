/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "FilAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FilAddress__factory>;
    getContractFactory(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProof__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "IIpcHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIpcHandler__factory>;
    getContractFactory(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondCutFacet__factory>;
    getContractFactory(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondLoupeFacet__factory>;
    getContractFactory(
      name: "GatewayGetterFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayGetterFacet__factory>;
    getContractFactory(
      name: "GatewayManagerFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayManagerFacet__factory>;
    getContractFactory(
      name: "GatewayMessengerFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayMessengerFacet__factory>;
    getContractFactory(
      name: "CheckpointingFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CheckpointingFacet__factory>;
    getContractFactory(
      name: "TopDownFinalityFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TopDownFinalityFacet__factory>;
    getContractFactory(
      name: "XnetMessagingFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XnetMessagingFacet__factory>;
    getContractFactory(
      name: "GatewayDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayDiamond__factory>;
    getContractFactory(
      name: "IDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamond__factory>;
    getContractFactory(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondCut__factory>;
    getContractFactory(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondLoupe__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGateway__factory>;
    getContractFactory(
      name: "AccountHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountHelper__factory>;
    getContractFactory(
      name: "CrossMsgHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossMsgHelper__factory>;
    getContractFactory(
      name: "FvmAddressHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FvmAddressHelper__factory>;
    getContractFactory(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamond__factory>;
    getContractFactory(
      name: "LibGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibGateway__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "LibQuorum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibQuorum__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "LibStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibStaking__factory>;
    getContractFactory(
      name: "LibStakingReleaseQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibStakingReleaseQueue__factory>;
    getContractFactory(
      name: "LibValidatorSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibValidatorSet__factory>;
    getContractFactory(
      name: "LibStakingChangeLog",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibStakingChangeLog__factory>;
    getContractFactory(
      name: "LibSubnetActor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibSubnetActor__factory>;
    getContractFactory(
      name: "SubnetIDHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetIDHelper__factory>;
    getContractFactory(
      name: "SupplySourceHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupplySourceHelper__factory>;
    getContractFactory(
      name: "OwnershipFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnershipFacet__factory>;
    getContractFactory(
      name: "SubnetActorCheckpointingFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetActorCheckpointingFacet__factory>;
    getContractFactory(
      name: "SubnetActorGetterFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetActorGetterFacet__factory>;
    getContractFactory(
      name: "SubnetActorManagerFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetActorManagerFacet__factory>;
    getContractFactory(
      name: "SubnetActorPauseFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetActorPauseFacet__factory>;
    getContractFactory(
      name: "SubnetActorRewardFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetActorRewardFacet__factory>;
    getContractFactory(
      name: "SubnetActorDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetActorDiamond__factory>;
    getContractFactory(
      name: "RegisterSubnetFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegisterSubnetFacet__factory>;
    getContractFactory(
      name: "SubnetGetterFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetGetterFacet__factory>;
    getContractFactory(
      name: "SubnetRegistryDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubnetRegistryDiamond__factory>;

    getContractAt(
      name: "FilAddress",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FilAddress>;
    getContractAt(
      name: "IERC1363",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "MerkleProof",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProof>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "IIpcHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIpcHandler>;
    getContractAt(
      name: "DiamondCutFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondCutFacet>;
    getContractAt(
      name: "DiamondLoupeFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondLoupeFacet>;
    getContractAt(
      name: "GatewayGetterFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayGetterFacet>;
    getContractAt(
      name: "GatewayManagerFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayManagerFacet>;
    getContractAt(
      name: "GatewayMessengerFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayMessengerFacet>;
    getContractAt(
      name: "CheckpointingFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CheckpointingFacet>;
    getContractAt(
      name: "TopDownFinalityFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TopDownFinalityFacet>;
    getContractAt(
      name: "XnetMessagingFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XnetMessagingFacet>;
    getContractAt(
      name: "GatewayDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayDiamond>;
    getContractAt(
      name: "IDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamond>;
    getContractAt(
      name: "IDiamondCut",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondCut>;
    getContractAt(
      name: "IDiamondLoupe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondLoupe>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IGateway",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGateway>;
    getContractAt(
      name: "AccountHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountHelper>;
    getContractAt(
      name: "CrossMsgHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossMsgHelper>;
    getContractAt(
      name: "FvmAddressHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FvmAddressHelper>;
    getContractAt(
      name: "LibDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamond>;
    getContractAt(
      name: "LibGateway",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibGateway>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "LibQuorum",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibQuorum>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "LibStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibStaking>;
    getContractAt(
      name: "LibStakingReleaseQueue",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibStakingReleaseQueue>;
    getContractAt(
      name: "LibValidatorSet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibValidatorSet>;
    getContractAt(
      name: "LibStakingChangeLog",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibStakingChangeLog>;
    getContractAt(
      name: "LibSubnetActor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibSubnetActor>;
    getContractAt(
      name: "SubnetIDHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetIDHelper>;
    getContractAt(
      name: "SupplySourceHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SupplySourceHelper>;
    getContractAt(
      name: "OwnershipFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnershipFacet>;
    getContractAt(
      name: "SubnetActorCheckpointingFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetActorCheckpointingFacet>;
    getContractAt(
      name: "SubnetActorGetterFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetActorGetterFacet>;
    getContractAt(
      name: "SubnetActorManagerFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetActorManagerFacet>;
    getContractAt(
      name: "SubnetActorPauseFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetActorPauseFacet>;
    getContractAt(
      name: "SubnetActorRewardFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetActorRewardFacet>;
    getContractAt(
      name: "SubnetActorDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetActorDiamond>;
    getContractAt(
      name: "RegisterSubnetFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RegisterSubnetFacet>;
    getContractAt(
      name: "SubnetGetterFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetGetterFacet>;
    getContractAt(
      name: "SubnetRegistryDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubnetRegistryDiamond>;

    deployContract(
      name: "FilAddress",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FilAddress>;
    deployContract(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "IIpcHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIpcHandler>;
    deployContract(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutFacet>;
    deployContract(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupeFacet>;
    deployContract(
      name: "GatewayGetterFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayGetterFacet>;
    deployContract(
      name: "GatewayManagerFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayManagerFacet>;
    deployContract(
      name: "GatewayMessengerFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayMessengerFacet>;
    deployContract(
      name: "CheckpointingFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CheckpointingFacet>;
    deployContract(
      name: "TopDownFinalityFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TopDownFinalityFacet>;
    deployContract(
      name: "XnetMessagingFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.XnetMessagingFacet>;
    deployContract(
      name: "GatewayDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayDiamond>;
    deployContract(
      name: "IDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamond>;
    deployContract(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondLoupe>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IGateway",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGateway>;
    deployContract(
      name: "AccountHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountHelper>;
    deployContract(
      name: "CrossMsgHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CrossMsgHelper>;
    deployContract(
      name: "FvmAddressHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FvmAddressHelper>;
    deployContract(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDiamond>;
    deployContract(
      name: "LibGateway",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibGateway>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "LibQuorum",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibQuorum>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "LibStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibStaking>;
    deployContract(
      name: "LibStakingReleaseQueue",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibStakingReleaseQueue>;
    deployContract(
      name: "LibValidatorSet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibValidatorSet>;
    deployContract(
      name: "LibStakingChangeLog",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibStakingChangeLog>;
    deployContract(
      name: "LibSubnetActor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibSubnetActor>;
    deployContract(
      name: "SubnetIDHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetIDHelper>;
    deployContract(
      name: "SupplySourceHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SupplySourceHelper>;
    deployContract(
      name: "OwnershipFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnershipFacet>;
    deployContract(
      name: "SubnetActorCheckpointingFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorCheckpointingFacet>;
    deployContract(
      name: "SubnetActorGetterFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorGetterFacet>;
    deployContract(
      name: "SubnetActorManagerFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorManagerFacet>;
    deployContract(
      name: "SubnetActorPauseFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorPauseFacet>;
    deployContract(
      name: "SubnetActorRewardFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorRewardFacet>;
    deployContract(
      name: "SubnetActorDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorDiamond>;
    deployContract(
      name: "RegisterSubnetFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegisterSubnetFacet>;
    deployContract(
      name: "SubnetGetterFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetGetterFacet>;
    deployContract(
      name: "SubnetRegistryDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetRegistryDiamond>;

    deployContract(
      name: "FilAddress",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FilAddress>;
    deployContract(
      name: "IERC1363",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "MerkleProof",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "IIpcHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIpcHandler>;
    deployContract(
      name: "DiamondCutFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutFacet>;
    deployContract(
      name: "DiamondLoupeFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupeFacet>;
    deployContract(
      name: "GatewayGetterFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayGetterFacet>;
    deployContract(
      name: "GatewayManagerFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayManagerFacet>;
    deployContract(
      name: "GatewayMessengerFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayMessengerFacet>;
    deployContract(
      name: "CheckpointingFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CheckpointingFacet>;
    deployContract(
      name: "TopDownFinalityFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TopDownFinalityFacet>;
    deployContract(
      name: "XnetMessagingFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.XnetMessagingFacet>;
    deployContract(
      name: "GatewayDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayDiamond>;
    deployContract(
      name: "IDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamond>;
    deployContract(
      name: "IDiamondCut",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "IDiamondLoupe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondLoupe>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IGateway",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGateway>;
    deployContract(
      name: "AccountHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountHelper>;
    deployContract(
      name: "CrossMsgHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CrossMsgHelper>;
    deployContract(
      name: "FvmAddressHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FvmAddressHelper>;
    deployContract(
      name: "LibDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDiamond>;
    deployContract(
      name: "LibGateway",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibGateway>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "LibQuorum",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibQuorum>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "LibStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibStaking>;
    deployContract(
      name: "LibStakingReleaseQueue",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibStakingReleaseQueue>;
    deployContract(
      name: "LibValidatorSet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibValidatorSet>;
    deployContract(
      name: "LibStakingChangeLog",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibStakingChangeLog>;
    deployContract(
      name: "LibSubnetActor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibSubnetActor>;
    deployContract(
      name: "SubnetIDHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetIDHelper>;
    deployContract(
      name: "SupplySourceHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SupplySourceHelper>;
    deployContract(
      name: "OwnershipFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnershipFacet>;
    deployContract(
      name: "SubnetActorCheckpointingFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorCheckpointingFacet>;
    deployContract(
      name: "SubnetActorGetterFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorGetterFacet>;
    deployContract(
      name: "SubnetActorManagerFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorManagerFacet>;
    deployContract(
      name: "SubnetActorPauseFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorPauseFacet>;
    deployContract(
      name: "SubnetActorRewardFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorRewardFacet>;
    deployContract(
      name: "SubnetActorDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetActorDiamond>;
    deployContract(
      name: "RegisterSubnetFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegisterSubnetFacet>;
    deployContract(
      name: "SubnetGetterFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetGetterFacet>;
    deployContract(
      name: "SubnetRegistryDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubnetRegistryDiamond>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
