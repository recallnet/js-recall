/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SubnetIDStruct = { root: BigNumberish; route: AddressLike[] };

export type SubnetIDStructOutput = [root: bigint, route: string[]] & {
  root: bigint;
  route: string[];
};

export type FvmAddressStruct = { addrType: BigNumberish; payload: BytesLike };

export type FvmAddressStructOutput = [addrType: bigint, payload: string] & {
  addrType: bigint;
  payload: string;
};

export type IPCAddressStruct = {
  subnetId: SubnetIDStruct;
  rawAddress: FvmAddressStruct;
};

export type IPCAddressStructOutput = [
  subnetId: SubnetIDStructOutput,
  rawAddress: FvmAddressStructOutput
] & { subnetId: SubnetIDStructOutput; rawAddress: FvmAddressStructOutput };

export type IpcEnvelopeStruct = {
  kind: BigNumberish;
  to: IPCAddressStruct;
  from: IPCAddressStruct;
  nonce: BigNumberish;
  value: BigNumberish;
  message: BytesLike;
};

export type IpcEnvelopeStructOutput = [
  kind: bigint,
  to: IPCAddressStructOutput,
  from: IPCAddressStructOutput,
  nonce: bigint,
  value: bigint,
  message: string
] & {
  kind: bigint;
  to: IPCAddressStructOutput;
  from: IPCAddressStructOutput;
  nonce: bigint;
  value: bigint;
  message: string;
};

export interface CrossMsgHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "applyType"
      | "createCallMsg"
      | "createFundMsg"
      | "createReleaseMsg"
      | "createResultMsg"
      | "createTransferMsg"
      | "isSorted"
      | "toHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyType",
    values: [IpcEnvelopeStruct, SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createCallMsg",
    values: [
      IPCAddressStruct,
      IPCAddressStruct,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createFundMsg",
    values: [SubnetIDStruct, AddressLike, FvmAddressStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createReleaseMsg",
    values: [SubnetIDStruct, AddressLike, FvmAddressStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createResultMsg",
    values: [IpcEnvelopeStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransferMsg",
    values: [IPCAddressStruct, IPCAddressStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSorted",
    values: [IpcEnvelopeStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "toHash",
    values: [IpcEnvelopeStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "applyType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCallMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFundMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReleaseMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createResultMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransferMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSorted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toHash", data: BytesLike): Result;
}

export interface CrossMsgHelper extends BaseContract {
  connect(runner?: ContractRunner | null): CrossMsgHelper;
  waitForDeployment(): Promise<this>;

  interface: CrossMsgHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  applyType: TypedContractMethod<
    [message: IpcEnvelopeStruct, currentSubnet: SubnetIDStruct],
    [bigint],
    "view"
  >;

  createCallMsg: TypedContractMethod<
    [
      from: IPCAddressStruct,
      to: IPCAddressStruct,
      value: BigNumberish,
      method: BytesLike,
      params: BytesLike
    ],
    [IpcEnvelopeStructOutput],
    "view"
  >;

  createFundMsg: TypedContractMethod<
    [
      subnet: SubnetIDStruct,
      signer: AddressLike,
      to: FvmAddressStruct,
      value: BigNumberish
    ],
    [IpcEnvelopeStructOutput],
    "view"
  >;

  createReleaseMsg: TypedContractMethod<
    [
      subnet: SubnetIDStruct,
      signer: AddressLike,
      to: FvmAddressStruct,
      value: BigNumberish
    ],
    [IpcEnvelopeStructOutput],
    "view"
  >;

  createResultMsg: TypedContractMethod<
    [crossMsg: IpcEnvelopeStruct, outcome: BigNumberish, ret: BytesLike],
    [IpcEnvelopeStructOutput],
    "view"
  >;

  createTransferMsg: TypedContractMethod<
    [from: IPCAddressStruct, to: IPCAddressStruct, value: BigNumberish],
    [IpcEnvelopeStructOutput],
    "view"
  >;

  isSorted: TypedContractMethod<
    [crossMsgs: IpcEnvelopeStruct[]],
    [boolean],
    "view"
  >;

  toHash: TypedContractMethod<
    [crossMsgs: IpcEnvelopeStruct[]],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "applyType"
  ): TypedContractMethod<
    [message: IpcEnvelopeStruct, currentSubnet: SubnetIDStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCallMsg"
  ): TypedContractMethod<
    [
      from: IPCAddressStruct,
      to: IPCAddressStruct,
      value: BigNumberish,
      method: BytesLike,
      params: BytesLike
    ],
    [IpcEnvelopeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "createFundMsg"
  ): TypedContractMethod<
    [
      subnet: SubnetIDStruct,
      signer: AddressLike,
      to: FvmAddressStruct,
      value: BigNumberish
    ],
    [IpcEnvelopeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "createReleaseMsg"
  ): TypedContractMethod<
    [
      subnet: SubnetIDStruct,
      signer: AddressLike,
      to: FvmAddressStruct,
      value: BigNumberish
    ],
    [IpcEnvelopeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "createResultMsg"
  ): TypedContractMethod<
    [crossMsg: IpcEnvelopeStruct, outcome: BigNumberish, ret: BytesLike],
    [IpcEnvelopeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTransferMsg"
  ): TypedContractMethod<
    [from: IPCAddressStruct, to: IPCAddressStruct, value: BigNumberish],
    [IpcEnvelopeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSorted"
  ): TypedContractMethod<[crossMsgs: IpcEnvelopeStruct[]], [boolean], "view">;
  getFunction(
    nameOrSignature: "toHash"
  ): TypedContractMethod<[crossMsgs: IpcEnvelopeStruct[]], [string], "view">;

  filters: {};
}
