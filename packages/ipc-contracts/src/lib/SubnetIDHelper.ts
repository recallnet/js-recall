/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SubnetIDStruct = { root: BigNumberish; route: AddressLike[] };

export type SubnetIDStructOutput = [root: bigint, route: string[]] & {
  root: bigint;
  route: string[];
};

export interface SubnetIDHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commonParent"
      | "createSubnetId"
      | "down"
      | "equals"
      | "getActor"
      | "getAddress"
      | "getParentSubnet"
      | "isEmpty"
      | "isRoot"
      | "toHash"
      | "toString"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commonParent",
    values: [SubnetIDStruct, SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubnetId",
    values: [SubnetIDStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "down",
    values: [SubnetIDStruct, SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "equals",
    values: [SubnetIDStruct, SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getActor",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentSubnet",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmpty",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoot",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "toHash",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "toString",
    values: [SubnetIDStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "commonParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubnetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "down", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "equals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParentSubnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toString", data: BytesLike): Result;
}

export interface SubnetIDHelper extends BaseContract {
  connect(runner?: ContractRunner | null): SubnetIDHelper;
  waitForDeployment(): Promise<this>;

  interface: SubnetIDHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commonParent: TypedContractMethod<
    [subnet1: SubnetIDStruct, subnet2: SubnetIDStruct],
    [SubnetIDStructOutput],
    "view"
  >;

  createSubnetId: TypedContractMethod<
    [subnet: SubnetIDStruct, actor: AddressLike],
    [SubnetIDStructOutput],
    "view"
  >;

  down: TypedContractMethod<
    [subnet1: SubnetIDStruct, subnet2: SubnetIDStruct],
    [SubnetIDStructOutput],
    "view"
  >;

  equals: TypedContractMethod<
    [subnet1: SubnetIDStruct, subnet2: SubnetIDStruct],
    [boolean],
    "view"
  >;

  getActor: TypedContractMethod<[subnet: SubnetIDStruct], [string], "view">;

  getAddress: TypedContractMethod<[subnet: SubnetIDStruct], [string], "view">;

  getParentSubnet: TypedContractMethod<
    [subnet: SubnetIDStruct],
    [SubnetIDStructOutput],
    "view"
  >;

  isEmpty: TypedContractMethod<[subnetId: SubnetIDStruct], [boolean], "view">;

  isRoot: TypedContractMethod<[subnet: SubnetIDStruct], [boolean], "view">;

  toHash: TypedContractMethod<[subnet: SubnetIDStruct], [string], "view">;

  toString: TypedContractMethod<[subnet: SubnetIDStruct], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commonParent"
  ): TypedContractMethod<
    [subnet1: SubnetIDStruct, subnet2: SubnetIDStruct],
    [SubnetIDStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "createSubnetId"
  ): TypedContractMethod<
    [subnet: SubnetIDStruct, actor: AddressLike],
    [SubnetIDStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "down"
  ): TypedContractMethod<
    [subnet1: SubnetIDStruct, subnet2: SubnetIDStruct],
    [SubnetIDStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "equals"
  ): TypedContractMethod<
    [subnet1: SubnetIDStruct, subnet2: SubnetIDStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActor"
  ): TypedContractMethod<[subnet: SubnetIDStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[subnet: SubnetIDStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getParentSubnet"
  ): TypedContractMethod<
    [subnet: SubnetIDStruct],
    [SubnetIDStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEmpty"
  ): TypedContractMethod<[subnetId: SubnetIDStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRoot"
  ): TypedContractMethod<[subnet: SubnetIDStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "toHash"
  ): TypedContractMethod<[subnet: SubnetIDStruct], [string], "view">;
  getFunction(
    nameOrSignature: "toString"
  ): TypedContractMethod<[subnet: SubnetIDStruct], [string], "view">;

  filters: {};
}
