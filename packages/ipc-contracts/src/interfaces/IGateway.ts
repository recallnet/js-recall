/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SubnetIDStruct = { root: BigNumberish; route: AddressLike[] };

export type SubnetIDStructOutput = [root: bigint, route: string[]] & {
  root: bigint;
  route: string[];
};

export type FvmAddressStruct = { addrType: BigNumberish; payload: BytesLike };

export type FvmAddressStructOutput = [addrType: bigint, payload: string] & {
  addrType: bigint;
  payload: string;
};

export type IPCAddressStruct = {
  subnetId: SubnetIDStruct;
  rawAddress: FvmAddressStruct;
};

export type IPCAddressStructOutput = [
  subnetId: SubnetIDStructOutput,
  rawAddress: FvmAddressStructOutput
] & { subnetId: SubnetIDStructOutput; rawAddress: FvmAddressStructOutput };

export type IpcEnvelopeStruct = {
  kind: BigNumberish;
  to: IPCAddressStruct;
  from: IPCAddressStruct;
  nonce: BigNumberish;
  value: BigNumberish;
  message: BytesLike;
};

export type IpcEnvelopeStructOutput = [
  kind: bigint,
  to: IPCAddressStructOutput,
  from: IPCAddressStructOutput,
  nonce: bigint,
  value: bigint,
  message: string
] & {
  kind: bigint;
  to: IPCAddressStructOutput;
  from: IPCAddressStructOutput;
  nonce: bigint;
  value: bigint;
  message: string;
};

export type BottomUpCheckpointStruct = {
  subnetID: SubnetIDStruct;
  blockHeight: BigNumberish;
  blockHash: BytesLike;
  nextConfigurationNumber: BigNumberish;
  msgs: IpcEnvelopeStruct[];
};

export type BottomUpCheckpointStructOutput = [
  subnetID: SubnetIDStructOutput,
  blockHeight: bigint,
  blockHash: string,
  nextConfigurationNumber: bigint,
  msgs: IpcEnvelopeStructOutput[]
] & {
  subnetID: SubnetIDStructOutput;
  blockHeight: bigint;
  blockHash: string;
  nextConfigurationNumber: bigint;
  msgs: IpcEnvelopeStructOutput[];
};

export type ParentFinalityStruct = {
  height: BigNumberish;
  blockHash: BytesLike;
};

export type ParentFinalityStructOutput = [height: bigint, blockHash: string] & {
  height: bigint;
  blockHash: string;
};

export interface IGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStake"
      | "commitCheckpoint"
      | "commitParentFinality"
      | "createBottomUpCheckpoint"
      | "fund"
      | "fundWithToken"
      | "kill"
      | "propagate"
      | "register"
      | "release"
      | "releaseStake"
      | "sendContractXnetMessage"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addStake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitCheckpoint",
    values: [BottomUpCheckpointStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "commitParentFinality",
    values: [ParentFinalityStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createBottomUpCheckpoint",
    values: [BottomUpCheckpointStruct, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [SubnetIDStruct, FvmAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fundWithToken",
    values: [SubnetIDStruct, FvmAddressStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propagate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [FvmAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendContractXnetMessage",
    values: [IpcEnvelopeStruct]
  ): string;

  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitParentFinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBottomUpCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propagate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendContractXnetMessage",
    data: BytesLike
  ): Result;
}

export interface IGateway extends BaseContract {
  connect(runner?: ContractRunner | null): IGateway;
  waitForDeployment(): Promise<this>;

  interface: IGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStake: TypedContractMethod<[], [void], "payable">;

  commitCheckpoint: TypedContractMethod<
    [bottomUpCheckpoint: BottomUpCheckpointStruct],
    [void],
    "nonpayable"
  >;

  commitParentFinality: TypedContractMethod<
    [finality: ParentFinalityStruct],
    [void],
    "nonpayable"
  >;

  createBottomUpCheckpoint: TypedContractMethod<
    [
      checkpoint: BottomUpCheckpointStruct,
      membershipRootHash: BytesLike,
      membershipWeight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fund: TypedContractMethod<
    [subnetId: SubnetIDStruct, to: FvmAddressStruct],
    [void],
    "payable"
  >;

  fundWithToken: TypedContractMethod<
    [subnetId: SubnetIDStruct, to: FvmAddressStruct, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  kill: TypedContractMethod<[], [void], "nonpayable">;

  propagate: TypedContractMethod<[msgCid: BytesLike], [void], "payable">;

  register: TypedContractMethod<
    [genesisCircSupply: BigNumberish],
    [void],
    "payable"
  >;

  release: TypedContractMethod<[to: FvmAddressStruct], [void], "payable">;

  releaseStake: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendContractXnetMessage: TypedContractMethod<
    [envelope: IpcEnvelopeStruct],
    [IpcEnvelopeStructOutput],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStake"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "commitCheckpoint"
  ): TypedContractMethod<
    [bottomUpCheckpoint: BottomUpCheckpointStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitParentFinality"
  ): TypedContractMethod<
    [finality: ParentFinalityStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBottomUpCheckpoint"
  ): TypedContractMethod<
    [
      checkpoint: BottomUpCheckpointStruct,
      membershipRootHash: BytesLike,
      membershipWeight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<
    [subnetId: SubnetIDStruct, to: FvmAddressStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fundWithToken"
  ): TypedContractMethod<
    [subnetId: SubnetIDStruct, to: FvmAddressStruct, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "kill"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "propagate"
  ): TypedContractMethod<[msgCid: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[genesisCircSupply: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[to: FvmAddressStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "releaseStake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendContractXnetMessage"
  ): TypedContractMethod<
    [envelope: IpcEnvelopeStruct],
    [IpcEnvelopeStructOutput],
    "payable"
  >;

  filters: {};
}
