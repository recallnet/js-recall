/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SupplySourceStruct = {
  kind: BigNumberish;
  tokenAddress: AddressLike;
};

export type SupplySourceStructOutput = [kind: bigint, tokenAddress: string] & {
  kind: bigint;
  tokenAddress: string;
};

export type SubnetIDStruct = { root: BigNumberish; route: AddressLike[] };

export type SubnetIDStructOutput = [root: bigint, route: string[]] & {
  root: bigint;
  route: string[];
};

export declare namespace SubnetActorDiamond {
  export type ConstructorParamsStruct = {
    minActivationCollateral: BigNumberish;
    minValidators: BigNumberish;
    bottomUpCheckPeriod: BigNumberish;
    ipcGatewayAddr: AddressLike;
    activeValidatorsLimit: BigNumberish;
    majorityPercentage: BigNumberish;
    consensus: BigNumberish;
    powerScale: BigNumberish;
    permissionMode: BigNumberish;
    supplySource: SupplySourceStruct;
    parentId: SubnetIDStruct;
  };

  export type ConstructorParamsStructOutput = [
    minActivationCollateral: bigint,
    minValidators: bigint,
    bottomUpCheckPeriod: bigint,
    ipcGatewayAddr: string,
    activeValidatorsLimit: bigint,
    majorityPercentage: bigint,
    consensus: bigint,
    powerScale: bigint,
    permissionMode: bigint,
    supplySource: SupplySourceStructOutput,
    parentId: SubnetIDStructOutput
  ] & {
    minActivationCollateral: bigint;
    minValidators: bigint;
    bottomUpCheckPeriod: bigint;
    ipcGatewayAddr: string;
    activeValidatorsLimit: bigint;
    majorityPercentage: bigint;
    consensus: bigint;
    powerScale: bigint;
    permissionMode: bigint;
    supplySource: SupplySourceStructOutput;
    parentId: SubnetIDStructOutput;
  };
}

export interface RegisterSubnetFacetInterface extends Interface {
  getFunction(nameOrSignature: "newSubnetActor"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SubnetDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "newSubnetActor",
    values: [SubnetActorDiamond.ConstructorParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "newSubnetActor",
    data: BytesLike
  ): Result;
}

export namespace SubnetDeployedEvent {
  export type InputTuple = [subnetAddr: AddressLike];
  export type OutputTuple = [subnetAddr: string];
  export interface OutputObject {
    subnetAddr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RegisterSubnetFacet extends BaseContract {
  connect(runner?: ContractRunner | null): RegisterSubnetFacet;
  waitForDeployment(): Promise<this>;

  interface: RegisterSubnetFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  newSubnetActor: TypedContractMethod<
    [_params: SubnetActorDiamond.ConstructorParamsStruct],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "newSubnetActor"
  ): TypedContractMethod<
    [_params: SubnetActorDiamond.ConstructorParamsStruct],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "SubnetDeployed"
  ): TypedContractEvent<
    SubnetDeployedEvent.InputTuple,
    SubnetDeployedEvent.OutputTuple,
    SubnetDeployedEvent.OutputObject
  >;

  filters: {
    "SubnetDeployed(address)": TypedContractEvent<
      SubnetDeployedEvent.InputTuple,
      SubnetDeployedEvent.OutputTuple,
      SubnetDeployedEvent.OutputObject
    >;
    SubnetDeployed: TypedContractEvent<
      SubnetDeployedEvent.InputTuple,
      SubnetDeployedEvent.OutputTuple,
      SubnetDeployedEvent.OutputObject
    >;
  };
}
