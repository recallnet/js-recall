/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SubnetIDStruct = { root: BigNumberish; route: AddressLike[] };

export type SubnetIDStructOutput = [root: bigint, route: string[]] & {
  root: bigint;
  route: string[];
};

export type FvmAddressStruct = { addrType: BigNumberish; payload: BytesLike };

export type FvmAddressStructOutput = [addrType: bigint, payload: string] & {
  addrType: bigint;
  payload: string;
};

export type IPCAddressStruct = {
  subnetId: SubnetIDStruct;
  rawAddress: FvmAddressStruct;
};

export type IPCAddressStructOutput = [
  subnetId: SubnetIDStructOutput,
  rawAddress: FvmAddressStructOutput
] & { subnetId: SubnetIDStructOutput; rawAddress: FvmAddressStructOutput };

export type IpcEnvelopeStruct = {
  kind: BigNumberish;
  to: IPCAddressStruct;
  from: IPCAddressStruct;
  nonce: BigNumberish;
  value: BigNumberish;
  message: BytesLike;
};

export type IpcEnvelopeStructOutput = [
  kind: bigint,
  to: IPCAddressStructOutput,
  from: IPCAddressStructOutput,
  nonce: bigint,
  value: bigint,
  message: string
] & {
  kind: bigint;
  to: IPCAddressStructOutput;
  from: IPCAddressStructOutput;
  nonce: bigint;
  value: bigint;
  message: string;
};

export type BottomUpCheckpointStruct = {
  subnetID: SubnetIDStruct;
  blockHeight: BigNumberish;
  blockHash: BytesLike;
  nextConfigurationNumber: BigNumberish;
  msgs: IpcEnvelopeStruct[];
};

export type BottomUpCheckpointStructOutput = [
  subnetID: SubnetIDStructOutput,
  blockHeight: bigint,
  blockHash: string,
  nextConfigurationNumber: bigint,
  msgs: IpcEnvelopeStructOutput[]
] & {
  subnetID: SubnetIDStructOutput;
  blockHeight: bigint;
  blockHash: string;
  nextConfigurationNumber: bigint;
  msgs: IpcEnvelopeStructOutput[];
};

export type BottomUpMsgBatchStruct = {
  subnetID: SubnetIDStruct;
  blockHeight: BigNumberish;
  msgs: IpcEnvelopeStruct[];
};

export type BottomUpMsgBatchStructOutput = [
  subnetID: SubnetIDStructOutput,
  blockHeight: bigint,
  msgs: IpcEnvelopeStructOutput[]
] & {
  subnetID: SubnetIDStructOutput;
  blockHeight: bigint;
  msgs: IpcEnvelopeStructOutput[];
};

export type QuorumInfoStruct = {
  hash: BytesLike;
  rootHash: BytesLike;
  threshold: BigNumberish;
  currentWeight: BigNumberish;
  reached: boolean;
};

export type QuorumInfoStructOutput = [
  hash: string,
  rootHash: string,
  threshold: bigint,
  currentWeight: bigint,
  reached: boolean
] & {
  hash: string;
  rootHash: string;
  threshold: bigint;
  currentWeight: bigint;
  reached: boolean;
};

export type ValidatorStruct = {
  weight: BigNumberish;
  addr: AddressLike;
  metadata: BytesLike;
};

export type ValidatorStructOutput = [
  weight: bigint,
  addr: string,
  metadata: string
] & { weight: bigint; addr: string; metadata: string };

export type MembershipStruct = {
  validators: ValidatorStruct[];
  configurationNumber: BigNumberish;
};

export type MembershipStructOutput = [
  validators: ValidatorStructOutput[],
  configurationNumber: bigint
] & { validators: ValidatorStructOutput[]; configurationNumber: bigint };

export type ParentFinalityStruct = {
  height: BigNumberish;
  blockHash: BytesLike;
};

export type ParentFinalityStructOutput = [height: bigint, blockHash: string] & {
  height: bigint;
  blockHash: string;
};

export type SubnetStruct = {
  stake: BigNumberish;
  genesisEpoch: BigNumberish;
  circSupply: BigNumberish;
  topDownNonce: BigNumberish;
  appliedBottomUpNonce: BigNumberish;
  id: SubnetIDStruct;
};

export type SubnetStructOutput = [
  stake: bigint,
  genesisEpoch: bigint,
  circSupply: bigint,
  topDownNonce: bigint,
  appliedBottomUpNonce: bigint,
  id: SubnetIDStructOutput
] & {
  stake: bigint;
  genesisEpoch: bigint;
  circSupply: bigint;
  topDownNonce: bigint;
  appliedBottomUpNonce: bigint;
  id: SubnetIDStructOutput;
};

export interface GatewayGetterFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "appliedTopDownNonce"
      | "bottomUpCheckPeriod"
      | "bottomUpCheckpoint"
      | "bottomUpMsgBatch"
      | "bottomUpNonce"
      | "getAppliedBottomUpNonce"
      | "getCheckpointCurrentWeight"
      | "getCheckpointInfo"
      | "getCheckpointRetentionHeight"
      | "getCheckpointSignatureBundle"
      | "getCommitSha"
      | "getCurrentBottomUpCheckpoint"
      | "getCurrentConfigurationNumber"
      | "getCurrentMembership"
      | "getIncompleteCheckpointHeights"
      | "getIncompleteCheckpoints"
      | "getLastConfigurationNumber"
      | "getLastMembership"
      | "getLatestParentFinality"
      | "getNetworkName"
      | "getParentFinality"
      | "getQuorumThreshold"
      | "getSubnet"
      | "getSubnetKeys"
      | "getSubnetTopDownMsgsLength"
      | "getTopDownNonce"
      | "getValidatorConfigurationNumbers"
      | "listSubnets"
      | "majorityPercentage"
      | "maxMsgsPerBottomUpBatch"
      | "postbox"
      | "subnets"
      | "totalSubnets"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "appliedTopDownNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bottomUpCheckPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bottomUpCheckpoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bottomUpMsgBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bottomUpNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAppliedBottomUpNonce",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckpointCurrentWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckpointInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckpointRetentionHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckpointSignatureBundle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitSha",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBottomUpCheckpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentConfigurationNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMembership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncompleteCheckpointHeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncompleteCheckpoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastConfigurationNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastMembership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestParentFinality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParentFinality",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubnet",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubnetKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubnetTopDownMsgsLength",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopDownNonce",
    values: [SubnetIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorConfigurationNumbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listSubnets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "majorityPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMsgsPerBottomUpBatch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "postbox", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "subnets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "totalSubnets",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "appliedTopDownNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bottomUpCheckPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bottomUpCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bottomUpMsgBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bottomUpNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppliedBottomUpNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckpointCurrentWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckpointInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckpointRetentionHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckpointSignatureBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitSha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBottomUpCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentConfigurationNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncompleteCheckpointHeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncompleteCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastConfigurationNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestParentFinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentFinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSubnet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubnetKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubnetTopDownMsgsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopDownNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorConfigurationNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listSubnets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "majorityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMsgsPerBottomUpBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postbox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subnets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSubnets",
    data: BytesLike
  ): Result;
}

export interface GatewayGetterFacet extends BaseContract {
  connect(runner?: ContractRunner | null): GatewayGetterFacet;
  waitForDeployment(): Promise<this>;

  interface: GatewayGetterFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  appliedTopDownNonce: TypedContractMethod<[], [bigint], "view">;

  bottomUpCheckPeriod: TypedContractMethod<[], [bigint], "view">;

  bottomUpCheckpoint: TypedContractMethod<
    [e: BigNumberish],
    [BottomUpCheckpointStructOutput],
    "view"
  >;

  bottomUpMsgBatch: TypedContractMethod<
    [e: BigNumberish],
    [BottomUpMsgBatchStructOutput],
    "view"
  >;

  bottomUpNonce: TypedContractMethod<[], [bigint], "view">;

  getAppliedBottomUpNonce: TypedContractMethod<
    [subnetId: SubnetIDStruct],
    [[boolean, bigint]],
    "view"
  >;

  getCheckpointCurrentWeight: TypedContractMethod<
    [h: BigNumberish],
    [bigint],
    "view"
  >;

  getCheckpointInfo: TypedContractMethod<
    [h: BigNumberish],
    [QuorumInfoStructOutput],
    "view"
  >;

  getCheckpointRetentionHeight: TypedContractMethod<[], [bigint], "view">;

  getCheckpointSignatureBundle: TypedContractMethod<
    [h: BigNumberish],
    [
      [
        BottomUpCheckpointStructOutput,
        QuorumInfoStructOutput,
        string[],
        string[]
      ] & {
        ch: BottomUpCheckpointStructOutput;
        info: QuorumInfoStructOutput;
        signatories: string[];
        signatures: string[];
      }
    ],
    "view"
  >;

  getCommitSha: TypedContractMethod<[], [string], "view">;

  getCurrentBottomUpCheckpoint: TypedContractMethod<
    [],
    [
      [boolean, bigint, BottomUpCheckpointStructOutput] & {
        exists: boolean;
        epoch: bigint;
        checkpoint: BottomUpCheckpointStructOutput;
      }
    ],
    "view"
  >;

  getCurrentConfigurationNumber: TypedContractMethod<[], [bigint], "view">;

  getCurrentMembership: TypedContractMethod<
    [],
    [MembershipStructOutput],
    "view"
  >;

  getIncompleteCheckpointHeights: TypedContractMethod<[], [bigint[]], "view">;

  getIncompleteCheckpoints: TypedContractMethod<
    [],
    [BottomUpCheckpointStructOutput[]],
    "view"
  >;

  getLastConfigurationNumber: TypedContractMethod<[], [bigint], "view">;

  getLastMembership: TypedContractMethod<[], [MembershipStructOutput], "view">;

  getLatestParentFinality: TypedContractMethod<
    [],
    [ParentFinalityStructOutput],
    "view"
  >;

  getNetworkName: TypedContractMethod<[], [SubnetIDStructOutput], "view">;

  getParentFinality: TypedContractMethod<
    [blockNumber: BigNumberish],
    [ParentFinalityStructOutput],
    "view"
  >;

  getQuorumThreshold: TypedContractMethod<
    [totalWeight: BigNumberish],
    [bigint],
    "view"
  >;

  getSubnet: TypedContractMethod<
    [subnetId: SubnetIDStruct],
    [[boolean, SubnetStructOutput]],
    "view"
  >;

  getSubnetKeys: TypedContractMethod<[], [string[]], "view">;

  getSubnetTopDownMsgsLength: TypedContractMethod<
    [subnetId: SubnetIDStruct],
    [bigint],
    "view"
  >;

  getTopDownNonce: TypedContractMethod<
    [subnetId: SubnetIDStruct],
    [[boolean, bigint]],
    "view"
  >;

  getValidatorConfigurationNumbers: TypedContractMethod<
    [],
    [[bigint, bigint]],
    "view"
  >;

  listSubnets: TypedContractMethod<[], [SubnetStructOutput[]], "view">;

  majorityPercentage: TypedContractMethod<[], [bigint], "view">;

  maxMsgsPerBottomUpBatch: TypedContractMethod<[], [bigint], "view">;

  postbox: TypedContractMethod<
    [id: BytesLike],
    [IpcEnvelopeStructOutput],
    "view"
  >;

  subnets: TypedContractMethod<[h: BytesLike], [SubnetStructOutput], "view">;

  totalSubnets: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "appliedTopDownNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bottomUpCheckPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bottomUpCheckpoint"
  ): TypedContractMethod<
    [e: BigNumberish],
    [BottomUpCheckpointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "bottomUpMsgBatch"
  ): TypedContractMethod<
    [e: BigNumberish],
    [BottomUpMsgBatchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "bottomUpNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAppliedBottomUpNonce"
  ): TypedContractMethod<
    [subnetId: SubnetIDStruct],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCheckpointCurrentWeight"
  ): TypedContractMethod<[h: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCheckpointInfo"
  ): TypedContractMethod<[h: BigNumberish], [QuorumInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getCheckpointRetentionHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCheckpointSignatureBundle"
  ): TypedContractMethod<
    [h: BigNumberish],
    [
      [
        BottomUpCheckpointStructOutput,
        QuorumInfoStructOutput,
        string[],
        string[]
      ] & {
        ch: BottomUpCheckpointStructOutput;
        info: QuorumInfoStructOutput;
        signatories: string[];
        signatures: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCommitSha"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentBottomUpCheckpoint"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, BottomUpCheckpointStructOutput] & {
        exists: boolean;
        epoch: bigint;
        checkpoint: BottomUpCheckpointStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentConfigurationNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentMembership"
  ): TypedContractMethod<[], [MembershipStructOutput], "view">;
  getFunction(
    nameOrSignature: "getIncompleteCheckpointHeights"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getIncompleteCheckpoints"
  ): TypedContractMethod<[], [BottomUpCheckpointStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getLastConfigurationNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastMembership"
  ): TypedContractMethod<[], [MembershipStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLatestParentFinality"
  ): TypedContractMethod<[], [ParentFinalityStructOutput], "view">;
  getFunction(
    nameOrSignature: "getNetworkName"
  ): TypedContractMethod<[], [SubnetIDStructOutput], "view">;
  getFunction(
    nameOrSignature: "getParentFinality"
  ): TypedContractMethod<
    [blockNumber: BigNumberish],
    [ParentFinalityStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuorumThreshold"
  ): TypedContractMethod<[totalWeight: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSubnet"
  ): TypedContractMethod<
    [subnetId: SubnetIDStruct],
    [[boolean, SubnetStructOutput]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubnetKeys"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSubnetTopDownMsgsLength"
  ): TypedContractMethod<[subnetId: SubnetIDStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTopDownNonce"
  ): TypedContractMethod<
    [subnetId: SubnetIDStruct],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorConfigurationNumbers"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "listSubnets"
  ): TypedContractMethod<[], [SubnetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "majorityPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMsgsPerBottomUpBatch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "postbox"
  ): TypedContractMethod<[id: BytesLike], [IpcEnvelopeStructOutput], "view">;
  getFunction(
    nameOrSignature: "subnets"
  ): TypedContractMethod<[h: BytesLike], [SubnetStructOutput], "view">;
  getFunction(
    nameOrSignature: "totalSubnets"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
