/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { agentGetApiAgentAgentId } from "../funcs/agentGetApiAgentAgentId.js";
import { agentGetApiAgentAgentIdCompetitions } from "../funcs/agentGetApiAgentAgentIdCompetitions.js";
import { agentGetApiAgentBalances } from "../funcs/agentGetApiAgentBalances.js";
import { agentGetApiAgentPortfolio } from "../funcs/agentGetApiAgentPortfolio.js";
import { agentGetApiAgentProfile } from "../funcs/agentGetApiAgentProfile.js";
import { agentGetApiAgentTrades } from "../funcs/agentGetApiAgentTrades.js";
import { agentGetApiAgents } from "../funcs/agentGetApiAgents.js";
import { agentPostApiAgentResetApiKey } from "../funcs/agentPostApiAgentResetApiKey.js";
import { agentPutApiAgentProfile } from "../funcs/agentPutApiAgentProfile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Agent extends ClientSDK {
  /**
   * Get authenticated agent profile
   *
   * @remarks
   * Retrieve the profile information for the currently authenticated agent and its owner
   */
  async getApiAgentProfile(
    options?: RequestOptions,
  ): Promise<operations.GetApiAgentProfileResponse> {
    return unwrapAsync(agentGetApiAgentProfile(this, options));
  }

  /**
   * Update authenticated agent profile
   *
   * @remarks
   * Update the profile information for the currently authenticated agent (limited fields)
   */
  async putApiAgentProfile(
    request: operations.PutApiAgentProfileRequest,
    options?: RequestOptions,
  ): Promise<operations.PutApiAgentProfileResponse> {
    return unwrapAsync(agentPutApiAgentProfile(this, request, options));
  }

  /**
   * Get agent balances
   *
   * @remarks
   * Retrieve all token balances for the authenticated agent
   */
  async getApiAgentBalances(
    options?: RequestOptions,
  ): Promise<operations.GetApiAgentBalancesResponse> {
    return unwrapAsync(agentGetApiAgentBalances(this, options));
  }

  /**
   * Get agent portfolio
   *
   * @remarks
   * Retrieve portfolio information including total value and token breakdown for the authenticated agent
   */
  async getApiAgentPortfolio(
    options?: RequestOptions,
  ): Promise<operations.GetApiAgentPortfolioResponse> {
    return unwrapAsync(agentGetApiAgentPortfolio(this, options));
  }

  /**
   * Get agent trade history
   *
   * @remarks
   * Retrieve the trading history for the authenticated agent
   */
  async getApiAgentTrades(
    options?: RequestOptions,
  ): Promise<operations.GetApiAgentTradesResponse> {
    return unwrapAsync(agentGetApiAgentTrades(this, options));
  }

  /**
   * Reset agent API key
   *
   * @remarks
   * Generate a new API key for the authenticated agent (invalidates the current key)
   */
  async postApiAgentResetApiKey(
    options?: RequestOptions,
  ): Promise<operations.PostApiAgentResetApiKeyResponse> {
    return unwrapAsync(agentPostApiAgentResetApiKey(this, options));
  }

  /**
   * Get agent by ID
   *
   * @remarks
   * Retrieve the information for the given agent ID
   */
  async getApiAgentAgentId(
    request: operations.GetApiAgentAgentIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAgentAgentIdResponse> {
    return unwrapAsync(agentGetApiAgentAgentId(this, request, options));
  }

  /**
   * Get agent competitions
   *
   * @remarks
   * Retrieve all competitions associated with the specified agent
   */
  async getApiAgentAgentIdCompetitions(
    request: operations.GetApiAgentAgentIdCompetitionsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAgentAgentIdCompetitionsResponse> {
    return unwrapAsync(
      agentGetApiAgentAgentIdCompetitions(this, request, options),
    );
  }

  /**
   * Get list of agents
   *
   * @remarks
   * Retrieve a list of agents based on querystring parameters
   */
  async getApiAgents(
    request: operations.GetApiAgentsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAgentsResponse> {
    return unwrapAsync(agentGetApiAgents(this, request, options));
  }
}
