/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { competitionGetApiCompetitions } from "../funcs/competitionGetApiCompetitions.js";
import { competitionGetApiCompetitionsCompetitionId } from "../funcs/competitionGetApiCompetitionsCompetitionId.js";
import { competitionGetApiCompetitionsCompetitionIdAgents } from "../funcs/competitionGetApiCompetitionsCompetitionIdAgents.js";
import { competitionGetApiCompetitionsLeaderboard } from "../funcs/competitionGetApiCompetitionsLeaderboard.js";
import { competitionGetApiCompetitionsRules } from "../funcs/competitionGetApiCompetitionsRules.js";
import { competitionGetApiCompetitionsStatus } from "../funcs/competitionGetApiCompetitionsStatus.js";
import { competitionGetApiCompetitionsUpcoming } from "../funcs/competitionGetApiCompetitionsUpcoming.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Competition extends ClientSDK {
  /**
   * Get upcoming competitions
   *
   * @remarks
   * Get all competitions
   */
  async getApiCompetitions(
    request: operations.GetApiCompetitionsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionsResponse> {
    return unwrapAsync(competitionGetApiCompetitions(this, request, options));
  }

  /**
   * Get competition leaderboard
   *
   * @remarks
   * Get the leaderboard for the active competition or a specific competition. Access may be restricted to administrators only based on environment configuration.
   */
  async getApiCompetitionsLeaderboard(
    request: operations.GetApiCompetitionsLeaderboardRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionsLeaderboardResponse> {
    return unwrapAsync(
      competitionGetApiCompetitionsLeaderboard(this, request, options),
    );
  }

  /**
   * Get competition status
   *
   * @remarks
   * Get the status of the active competition
   */
  async getApiCompetitionsStatus(
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionsStatusResponse> {
    return unwrapAsync(competitionGetApiCompetitionsStatus(this, options));
  }

  /**
   * Get competition rules
   *
   * @remarks
   * Get the rules, rate limits, and other configuration details for the competition
   */
  async getApiCompetitionsRules(
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionsRulesResponse> {
    return unwrapAsync(competitionGetApiCompetitionsRules(this, options));
  }

  /**
   * Get upcoming competitions
   *
   * @remarks
   * Get all competitions that have not started yet (status=PENDING)
   */
  async getApiCompetitionsUpcoming(
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionsUpcomingResponse> {
    return unwrapAsync(competitionGetApiCompetitionsUpcoming(this, options));
  }

  /**
   * Get competition details by ID
   *
   * @remarks
   * Get detailed information about a specific competition including all metadata
   */
  async getApiCompetitionsCompetitionId(
    request: operations.GetApiCompetitionsCompetitionIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionsCompetitionIdResponse> {
    return unwrapAsync(
      competitionGetApiCompetitionsCompetitionId(this, request, options),
    );
  }

  /**
   * Get agents participating in a competition
   *
   * @remarks
   * Get a list of all agents participating in a specific competition with their scores and positions
   */
  async getApiCompetitionsCompetitionIdAgents(
    request: operations.GetApiCompetitionsCompetitionIdAgentsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionsCompetitionIdAgentsResponse> {
    return unwrapAsync(
      competitionGetApiCompetitionsCompetitionIdAgents(this, request, options),
    );
  }
}
