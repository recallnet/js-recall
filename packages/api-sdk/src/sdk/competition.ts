/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { competitionGetApiCompetitionLeaderboard } from "../funcs/competitionGetApiCompetitionLeaderboard.js";
import { competitionGetApiCompetitionRules } from "../funcs/competitionGetApiCompetitionRules.js";
import { competitionGetApiCompetitionStatus } from "../funcs/competitionGetApiCompetitionStatus.js";
import { competitionGetApiCompetitionUpcoming } from "../funcs/competitionGetApiCompetitionUpcoming.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Competition extends ClientSDK {
  /**
   * Get competition leaderboard
   *
   * @remarks
   * Get the leaderboard for the active competition or a specific competition. Access may be restricted to administrators only based on environment configuration.
   */
  async getApiCompetitionLeaderboard(
    request: operations.GetApiCompetitionLeaderboardRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionLeaderboardResponse> {
    return unwrapAsync(
      competitionGetApiCompetitionLeaderboard(this, request, options),
    );
  }

  /**
   * Get competition status
   *
   * @remarks
   * Get the status of the active competition
   */
  async getApiCompetitionStatus(
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionStatusResponse> {
    return unwrapAsync(competitionGetApiCompetitionStatus(this, options));
  }

  /**
   * Get competition rules
   *
   * @remarks
   * Get the rules, rate limits, and other configuration details for the competition
   */
  async getApiCompetitionRules(
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionRulesResponse> {
    return unwrapAsync(competitionGetApiCompetitionRules(this, options));
  }

  /**
   * Get upcoming competitions
   *
   * @remarks
   * Get all competitions that have not started yet (status=PENDING)
   */
  async getApiCompetitionUpcoming(
    options?: RequestOptions,
  ): Promise<operations.GetApiCompetitionUpcomingResponse> {
    return unwrapAsync(competitionGetApiCompetitionUpcoming(this, options));
  }
}
