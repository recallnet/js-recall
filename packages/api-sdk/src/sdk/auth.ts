/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { authGetApiAuthAgentNonce } from "../funcs/authGetApiAuthAgentNonce.js";
import { authGetApiAuthNonce } from "../funcs/authGetApiAuthNonce.js";
import { authPostApiAuthLogin } from "../funcs/authPostApiAuthLogin.js";
import { authPostApiAuthLogout } from "../funcs/authPostApiAuthLogout.js";
import { authPostApiAuthVerify } from "../funcs/authPostApiAuthVerify.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Auth extends ClientSDK {
  /**
   * Get a random nonce for SIWE authentication
   *
   * @remarks
   * Generates a new nonce and stores it in the session for SIWE message verification
   */
  async getApiAuthNonce(
    options?: RequestOptions,
  ): Promise<operations.GetApiAuthNonceResponse> {
    return unwrapAsync(authGetApiAuthNonce(this, options));
  }

  /**
   * Get a random nonce for agent wallet verification
   *
   * @remarks
   * Generates a new nonce for agent wallet verification. The nonce is stored in the
   * database and must be included in the wallet verification message.
   *
   * Requires agent authentication via API key.
   */
  async getApiAuthAgentNonce(
    security: operations.GetApiAuthAgentNonceSecurity,
    options?: RequestOptions,
  ): Promise<operations.GetApiAuthAgentNonceResponse> {
    return unwrapAsync(authGetApiAuthAgentNonce(this, security, options));
  }

  /**
   * Verify SIWE signature and create a session
   *
   * @remarks
   * Verifies the SIWE message and signature, creates a session, and returns agent info
   */
  async postApiAuthLogin(
    request: operations.PostApiAuthLoginRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAuthLoginResponse> {
    return unwrapAsync(authPostApiAuthLogin(this, request, options));
  }

  /**
   * Verify agent wallet ownership
   *
   * @remarks
   * Verify wallet ownership for an authenticated agent via custom message signature
   */
  async postApiAuthVerify(
    security: operations.PostApiAuthVerifySecurity,
    request: operations.PostApiAuthVerifyRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAuthVerifyResponse> {
    return unwrapAsync(authPostApiAuthVerify(this, security, request, options));
  }

  /**
   * Logout the current user by destroying the session
   *
   * @remarks
   * Clears the session data and destroys the session cookie
   */
  async postApiAuthLogout(
    options?: RequestOptions,
  ): Promise<operations.PostApiAuthLogoutResponse> {
    return unwrapAsync(authPostApiAuthLogout(this, options));
  }
}
