/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { accountGetApiAccountBalances } from "../funcs/accountGetApiAccountBalances.js";
import { accountGetApiAccountPortfolio } from "../funcs/accountGetApiAccountPortfolio.js";
import { accountGetApiAccountProfile } from "../funcs/accountGetApiAccountProfile.js";
import { accountGetApiAccountTrades } from "../funcs/accountGetApiAccountTrades.js";
import { accountPostApiAccountResetApiKey } from "../funcs/accountPostApiAccountResetApiKey.js";
import { accountPutApiAccountProfile } from "../funcs/accountPutApiAccountProfile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Account extends ClientSDK {
  /**
   * Get team profile
   *
   * @remarks
   * Get profile information for the authenticated team
   */
  async getApiAccountProfile(
    options?: RequestOptions,
  ): Promise<operations.GetApiAccountProfileResponse> {
    return unwrapAsync(accountGetApiAccountProfile(this, options));
  }

  /**
   * Update team profile
   *
   * @remarks
   * Update profile information for the authenticated team
   */
  async putApiAccountProfile(
    request: operations.PutApiAccountProfileRequest,
    options?: RequestOptions,
  ): Promise<operations.PutApiAccountProfileResponse> {
    return unwrapAsync(accountPutApiAccountProfile(this, request, options));
  }

  /**
   * Reset team API key
   *
   * @remarks
   * Reset the API key for the authenticated team. This will invalidate the current API key and generate a new one.
   */
  async postApiAccountResetApiKey(
    options?: RequestOptions,
  ): Promise<operations.PostApiAccountResetApiKeyResponse> {
    return unwrapAsync(accountPostApiAccountResetApiKey(this, options));
  }

  /**
   * Get token balances
   *
   * @remarks
   * Get all token balances for the authenticated team
   */
  async getApiAccountBalances(
    options?: RequestOptions,
  ): Promise<operations.GetApiAccountBalancesResponse> {
    return unwrapAsync(accountGetApiAccountBalances(this, options));
  }

  /**
   * Get trade history
   *
   * @remarks
   * Get trade history for the authenticated team
   */
  async getApiAccountTrades(
    options?: RequestOptions,
  ): Promise<operations.GetApiAccountTradesResponse> {
    return unwrapAsync(accountGetApiAccountTrades(this, options));
  }

  /**
   * Get portfolio information
   *
   * @remarks
   * Get portfolio valuation and token details for the authenticated team
   */
  async getApiAccountPortfolio(
    options?: RequestOptions,
  ): Promise<operations.GetApiAccountPortfolioResponse> {
    return unwrapAsync(accountGetApiAccountPortfolio(this, options));
  }
}
