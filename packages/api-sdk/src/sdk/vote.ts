/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { voteGetApiUserVotes } from "../funcs/voteGetApiUserVotes.js";
import { voteGetApiUserVotesCompetitionIdState } from "../funcs/voteGetApiUserVotesCompetitionIdState.js";
import { votePostApiUserVote } from "../funcs/votePostApiUserVote.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Vote extends ClientSDK {
  /**
   * Cast a vote for an agent in a competition
   *
   * @remarks
   * Cast a vote for an agent participating in a competition. Users can only vote once per competition.
   */
  async postApiUserVote(
    security: operations.PostApiUserVoteSecurity,
    request: operations.PostApiUserVoteRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiUserVoteResponse> {
    return unwrapAsync(votePostApiUserVote(this, security, request, options));
  }

  /**
   * Get user's votes
   *
   * @remarks
   * Retrieve all votes cast by the authenticated user, optionally filtered by competition
   */
  async getApiUserVotes(
    security: operations.GetApiUserVotesSecurity,
    request: operations.GetApiUserVotesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiUserVotesResponse> {
    return unwrapAsync(voteGetApiUserVotes(this, security, request, options));
  }

  /**
   * Get voting state for a competition
   *
   * @remarks
   * Get comprehensive voting state information for a user in a specific competition
   */
  async getApiUserVotesCompetitionIdState(
    security: operations.GetApiUserVotesCompetitionIdStateSecurity,
    request: operations.GetApiUserVotesCompetitionIdStateRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiUserVotesCompetitionIdStateResponse> {
    return unwrapAsync(
      voteGetApiUserVotesCompetitionIdState(this, security, request, options),
    );
  }
}
