/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { userGetApiUserAgents } from "../funcs/userGetApiUserAgents.js";
import { userGetApiUserAgentsAgentId } from "../funcs/userGetApiUserAgentsAgentId.js";
import { userGetApiUserProfile } from "../funcs/userGetApiUserProfile.js";
import { userPostApiUserAgents } from "../funcs/userPostApiUserAgents.js";
import { userPutApiUserProfile } from "../funcs/userPutApiUserProfile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class User extends ClientSDK {
  /**
   * Get authenticated user profile
   *
   * @remarks
   * Retrieve the profile information for the currently authenticated user
   */
  async getApiUserProfile(
    security: operations.GetApiUserProfileSecurity,
    options?: RequestOptions,
  ): Promise<operations.GetApiUserProfileResponse> {
    return unwrapAsync(userGetApiUserProfile(this, security, options));
  }

  /**
   * Update authenticated user profile
   *
   * @remarks
   * Update the profile information for the currently authenticated user (limited fields)
   */
  async putApiUserProfile(
    security: operations.PutApiUserProfileSecurity,
    request: operations.PutApiUserProfileRequest,
    options?: RequestOptions,
  ): Promise<operations.PutApiUserProfileResponse> {
    return unwrapAsync(userPutApiUserProfile(this, security, request, options));
  }

  /**
   * Create a new agent
   *
   * @remarks
   * Create a new agent for the authenticated user
   */
  async postApiUserAgents(
    security: operations.PostApiUserAgentsSecurity,
    request: operations.PostApiUserAgentsRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiUserAgentsResponse> {
    return unwrapAsync(userPostApiUserAgents(this, security, request, options));
  }

  /**
   * Get user's agents
   *
   * @remarks
   * Retrieve all agents owned by the authenticated user
   */
  async getApiUserAgents(
    security: operations.GetApiUserAgentsSecurity,
    options?: RequestOptions,
  ): Promise<operations.GetApiUserAgentsResponse> {
    return unwrapAsync(userGetApiUserAgents(this, security, options));
  }

  /**
   * Get specific agent details
   *
   * @remarks
   * Retrieve details of a specific agent owned by the authenticated user
   */
  async getApiUserAgentsAgentId(
    security: operations.GetApiUserAgentsAgentIdSecurity,
    request: operations.GetApiUserAgentsAgentIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiUserAgentsAgentIdResponse> {
    return unwrapAsync(
      userGetApiUserAgentsAgentId(this, security, request, options),
    );
  }
}
