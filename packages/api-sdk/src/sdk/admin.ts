/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { adminDeleteApiAdminTeamsTeamId } from "../funcs/adminDeleteApiAdminTeamsTeamId.js";
import { adminGetApiAdminCompetitionCompetitionIdSnapshots } from "../funcs/adminGetApiAdminCompetitionCompetitionIdSnapshots.js";
import { adminGetApiAdminReportsPerformance } from "../funcs/adminGetApiAdminReportsPerformance.js";
import { adminGetApiAdminTeams } from "../funcs/adminGetApiAdminTeams.js";
import { adminGetApiAdminTeamsSearch } from "../funcs/adminGetApiAdminTeamsSearch.js";
import { adminGetApiAdminTeamsTeamIdKey } from "../funcs/adminGetApiAdminTeamsTeamIdKey.js";
import { adminPostApiAdminCompetitionCreate } from "../funcs/adminPostApiAdminCompetitionCreate.js";
import { adminPostApiAdminCompetitionEnd } from "../funcs/adminPostApiAdminCompetitionEnd.js";
import { adminPostApiAdminCompetitionStart } from "../funcs/adminPostApiAdminCompetitionStart.js";
import { adminPostApiAdminSetup } from "../funcs/adminPostApiAdminSetup.js";
import { adminPostApiAdminTeamsRegister } from "../funcs/adminPostApiAdminTeamsRegister.js";
import { adminPostApiAdminTeamsTeamIdDeactivate } from "../funcs/adminPostApiAdminTeamsTeamIdDeactivate.js";
import { adminPostApiAdminTeamsTeamIdReactivate } from "../funcs/adminPostApiAdminTeamsTeamIdReactivate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Admin extends ClientSDK {
  /**
   * Set up initial admin account
   *
   * @remarks
   * Creates the first admin account. This endpoint is only available when no admin exists in the system.
   */
  async postApiAdminSetup(
    request: operations.PostApiAdminSetupRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminSetupResponse> {
    return unwrapAsync(adminPostApiAdminSetup(this, request, options));
  }

  /**
   * Register a new team
   *
   * @remarks
   * Admin-only endpoint to register a new team. Admins create team accounts and distribute the generated API keys to team members. Teams cannot register themselves.
   */
  async postApiAdminTeamsRegister(
    request: operations.PostApiAdminTeamsRegisterRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminTeamsRegisterResponse> {
    return unwrapAsync(adminPostApiAdminTeamsRegister(this, request, options));
  }

  /**
   * List all teams
   *
   * @remarks
   * Get a list of all non-admin teams
   */
  async getApiAdminTeams(
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminTeamsResponse> {
    return unwrapAsync(adminGetApiAdminTeams(this, options));
  }

  /**
   * Get a team's API key
   *
   * @remarks
   * Retrieves the original API key for a team. Use this when teams lose or misplace their API key.
   */
  async getApiAdminTeamsTeamIdKey(
    request: operations.GetApiAdminTeamsTeamIdKeyRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminTeamsTeamIdKeyResponse> {
    return unwrapAsync(adminGetApiAdminTeamsTeamIdKey(this, request, options));
  }

  /**
   * Delete a team
   *
   * @remarks
   * Permanently delete a team and all associated data
   */
  async deleteApiAdminTeamsTeamId(
    request: operations.DeleteApiAdminTeamsTeamIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiAdminTeamsTeamIdResponse> {
    return unwrapAsync(adminDeleteApiAdminTeamsTeamId(this, request, options));
  }

  /**
   * Create a competition
   *
   * @remarks
   * Create a new competition without starting it. It will be in PENDING status and can be started later.
   */
  async postApiAdminCompetitionCreate(
    request: operations.PostApiAdminCompetitionCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminCompetitionCreateResponse> {
    return unwrapAsync(
      adminPostApiAdminCompetitionCreate(this, request, options),
    );
  }

  /**
   * Start a competition
   *
   * @remarks
   * Start a new or existing competition with specified teams. If competitionId is provided, it will start an existing competition. Otherwise, it will create and start a new one.
   */
  async postApiAdminCompetitionStart(
    request: operations.PostApiAdminCompetitionStartRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminCompetitionStartResponse> {
    return unwrapAsync(
      adminPostApiAdminCompetitionStart(this, request, options),
    );
  }

  /**
   * End a competition
   *
   * @remarks
   * End an active competition and finalize the results
   */
  async postApiAdminCompetitionEnd(
    request: operations.PostApiAdminCompetitionEndRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminCompetitionEndResponse> {
    return unwrapAsync(adminPostApiAdminCompetitionEnd(this, request, options));
  }

  /**
   * Get competition snapshots
   *
   * @remarks
   * Get portfolio snapshots for a competition, optionally filtered by team
   */
  async getApiAdminCompetitionCompetitionIdSnapshots(
    request: operations.GetApiAdminCompetitionCompetitionIdSnapshotsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminCompetitionCompetitionIdSnapshotsResponse> {
    return unwrapAsync(
      adminGetApiAdminCompetitionCompetitionIdSnapshots(this, request, options),
    );
  }

  /**
   * Get performance reports
   *
   * @remarks
   * Get performance reports and leaderboard for a competition
   */
  async getApiAdminReportsPerformance(
    request: operations.GetApiAdminReportsPerformanceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminReportsPerformanceResponse> {
    return unwrapAsync(
      adminGetApiAdminReportsPerformance(this, request, options),
    );
  }

  /**
   * Deactivate a team
   *
   * @remarks
   * Deactivate a team from the competition. The team will no longer be able to perform any actions.
   */
  async postApiAdminTeamsTeamIdDeactivate(
    request: operations.PostApiAdminTeamsTeamIdDeactivateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminTeamsTeamIdDeactivateResponse> {
    return unwrapAsync(
      adminPostApiAdminTeamsTeamIdDeactivate(this, request, options),
    );
  }

  /**
   * Reactivate a team
   *
   * @remarks
   * Reactivate a previously deactivated team, allowing them to participate in the competition again.
   */
  async postApiAdminTeamsTeamIdReactivate(
    request: operations.PostApiAdminTeamsTeamIdReactivateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminTeamsTeamIdReactivateResponse> {
    return unwrapAsync(
      adminPostApiAdminTeamsTeamIdReactivate(this, request, options),
    );
  }

  /**
   * Search for teams
   *
   * @remarks
   * Search for teams based on various criteria like email, name, wallet address, etc.
   */
  async getApiAdminTeamsSearch(
    request: operations.GetApiAdminTeamsSearchRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminTeamsSearchResponse> {
    return unwrapAsync(adminGetApiAdminTeamsSearch(this, request, options));
  }
}
