/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { adminDeleteApiAdminAgentsAgentId } from "../funcs/adminDeleteApiAdminAgentsAgentId.js";
import { adminGetApiAdminAgents } from "../funcs/adminGetApiAdminAgents.js";
import { adminGetApiAdminAgentsAgentId } from "../funcs/adminGetApiAdminAgentsAgentId.js";
import { adminGetApiAdminAgentsAgentIdKey } from "../funcs/adminGetApiAdminAgentsAgentIdKey.js";
import { adminGetApiAdminCompetitionCompetitionIdSnapshots } from "../funcs/adminGetApiAdminCompetitionCompetitionIdSnapshots.js";
import { adminGetApiAdminReportsPerformance } from "../funcs/adminGetApiAdminReportsPerformance.js";
import { adminGetApiAdminSearch } from "../funcs/adminGetApiAdminSearch.js";
import { adminGetApiAdminUsers } from "../funcs/adminGetApiAdminUsers.js";
import { adminPostApiAdminAgentsAgentIdDeactivate } from "../funcs/adminPostApiAdminAgentsAgentIdDeactivate.js";
import { adminPostApiAdminAgentsAgentIdReactivate } from "../funcs/adminPostApiAdminAgentsAgentIdReactivate.js";
import { adminPostApiAdminCompetitionCreate } from "../funcs/adminPostApiAdminCompetitionCreate.js";
import { adminPostApiAdminCompetitionEnd } from "../funcs/adminPostApiAdminCompetitionEnd.js";
import { adminPostApiAdminCompetitionStart } from "../funcs/adminPostApiAdminCompetitionStart.js";
import { adminPostApiAdminSetup } from "../funcs/adminPostApiAdminSetup.js";
import { adminPostApiAdminUsers } from "../funcs/adminPostApiAdminUsers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Admin extends ClientSDK {
  /**
   * Set up initial admin account
   *
   * @remarks
   * Creates the first admin account. This endpoint is only available when no admin exists in the system.
   */
  async postApiAdminSetup(
    request: operations.PostApiAdminSetupRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminSetupResponse> {
    return unwrapAsync(adminPostApiAdminSetup(this, request, options));
  }

  /**
   * Create a competition
   *
   * @remarks
   * Create a new competition without starting it. It will be in PENDING status and can be started later.
   */
  async postApiAdminCompetitionCreate(
    request: operations.PostApiAdminCompetitionCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminCompetitionCreateResponse> {
    return unwrapAsync(
      adminPostApiAdminCompetitionCreate(this, request, options),
    );
  }

  /**
   * Start a competition
   *
   * @remarks
   * Start a new or existing competition with specified agents. If competitionId is provided, it will start an existing competition. Otherwise, it will create and start a new one.
   */
  async postApiAdminCompetitionStart(
    request: operations.PostApiAdminCompetitionStartRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminCompetitionStartResponse> {
    return unwrapAsync(
      adminPostApiAdminCompetitionStart(this, request, options),
    );
  }

  /**
   * End a competition
   *
   * @remarks
   * End an active competition and finalize the results
   */
  async postApiAdminCompetitionEnd(
    request: operations.PostApiAdminCompetitionEndRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminCompetitionEndResponse> {
    return unwrapAsync(adminPostApiAdminCompetitionEnd(this, request, options));
  }

  /**
   * Get competition snapshots
   *
   * @remarks
   * Get portfolio snapshots for a competition, optionally filtered by agent
   */
  async getApiAdminCompetitionCompetitionIdSnapshots(
    request: operations.GetApiAdminCompetitionCompetitionIdSnapshotsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminCompetitionCompetitionIdSnapshotsResponse> {
    return unwrapAsync(
      adminGetApiAdminCompetitionCompetitionIdSnapshots(this, request, options),
    );
  }

  /**
   * Get performance reports
   *
   * @remarks
   * Get performance reports and leaderboard for a competition
   */
  async getApiAdminReportsPerformance(
    request: operations.GetApiAdminReportsPerformanceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminReportsPerformanceResponse> {
    return unwrapAsync(
      adminGetApiAdminReportsPerformance(this, request, options),
    );
  }

  /**
   * Register a new user
   *
   * @remarks
   * Admin-only endpoint to register a new user and optionally create their first agent. Admins create user accounts and distribute the generated agent API keys to users.
   */
  async postApiAdminUsers(
    request: operations.PostApiAdminUsersRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminUsersResponse> {
    return unwrapAsync(adminPostApiAdminUsers(this, request, options));
  }

  /**
   * List all users
   *
   * @remarks
   * Get a list of all users in the system
   */
  async getApiAdminUsers(
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminUsersResponse> {
    return unwrapAsync(adminGetApiAdminUsers(this, options));
  }

  /**
   * List all agents
   *
   * @remarks
   * Get a list of all agents in the system
   */
  async getApiAdminAgents(
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminAgentsResponse> {
    return unwrapAsync(adminGetApiAdminAgents(this, options));
  }

  /**
   * Get an agent's API key
   *
   * @remarks
   * Retrieves the original API key for an agent. Use this when agents lose or misplace their API key.
   */
  async getApiAdminAgentsAgentIdKey(
    request: operations.GetApiAdminAgentsAgentIdKeyRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminAgentsAgentIdKeyResponse> {
    return unwrapAsync(
      adminGetApiAdminAgentsAgentIdKey(this, request, options),
    );
  }

  /**
   * Delete an agent
   *
   * @remarks
   * Permanently delete an agent and all associated data
   */
  async deleteApiAdminAgentsAgentId(
    request: operations.DeleteApiAdminAgentsAgentIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiAdminAgentsAgentIdResponse> {
    return unwrapAsync(
      adminDeleteApiAdminAgentsAgentId(this, request, options),
    );
  }

  /**
   * Get agent details
   *
   * @remarks
   * Get detailed information about a specific agent
   */
  async getApiAdminAgentsAgentId(
    request: operations.GetApiAdminAgentsAgentIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminAgentsAgentIdResponse> {
    return unwrapAsync(adminGetApiAdminAgentsAgentId(this, request, options));
  }

  /**
   * Deactivate an agent
   *
   * @remarks
   * Deactivate an agent from the system. The agent will no longer be able to perform any actions.
   */
  async postApiAdminAgentsAgentIdDeactivate(
    request: operations.PostApiAdminAgentsAgentIdDeactivateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminAgentsAgentIdDeactivateResponse> {
    return unwrapAsync(
      adminPostApiAdminAgentsAgentIdDeactivate(this, request, options),
    );
  }

  /**
   * Reactivate an agent
   *
   * @remarks
   * Reactivate a previously deactivated agent
   */
  async postApiAdminAgentsAgentIdReactivate(
    request: operations.PostApiAdminAgentsAgentIdReactivateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostApiAdminAgentsAgentIdReactivateResponse> {
    return unwrapAsync(
      adminPostApiAdminAgentsAgentIdReactivate(this, request, options),
    );
  }

  /**
   * Search users and agents
   *
   * @remarks
   * Search for users and agents based on various criteria
   */
  async getApiAdminSearch(
    request: operations.GetApiAdminSearchRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiAdminSearchResponse> {
    return unwrapAsync(adminGetApiAdminSearch(this, request, options));
  }
}
