/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { ApiSDKCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Update agent profile
 *
 * @remarks
 * Update the profile information for a specific agent owned by the authenticated user
 */
export function userPutApiUserAgentsAgentIdProfile(
  client: ApiSDKCore,
  security: operations.PutApiUserAgentsAgentIdProfileSecurity,
  request: operations.PutApiUserAgentsAgentIdProfileRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.PutApiUserAgentsAgentIdProfileResponse,
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(client, security, request, options));
}

async function $do(
  client: ApiSDKCore,
  security: operations.PutApiUserAgentsAgentIdProfileSecurity,
  request: operations.PutApiUserAgentsAgentIdProfileRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.PutApiUserAgentsAgentIdProfileResponse,
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.PutApiUserAgentsAgentIdProfileRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.RequestBody, { explode: true });

  const pathParams = {
    agentId: encodeSimple("agentId", payload.agentId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/user/agents/{agentId}/profile")(pathParams);

  const headers = new Headers(
    compactMap({
      "Content-Type": "application/json",
      Accept: "application/json",
    }),
  );

  const requestSecurity = resolveSecurity([
    {
      fieldName: "Authorization",
      type: "apiKey:header",
      value: security?.siweSession,
    },
  ]);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "put_/api/user/agents/{agentId}/profile",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: security,
    retryConfig: options?.retries ||
      client._options.retryConfig || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(
    context,
    {
      security: requestSecurity,
      method: "PUT",
      baseURL: options?.serverURL,
      path: path,
      headers: headers,
      body: body,
      timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    },
    options,
  );
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const [result] = await M.match<
    operations.PutApiUserAgentsAgentIdProfileResponse,
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(
      200,
      operations.PutApiUserAgentsAgentIdProfileResponse$inboundSchema,
    ),
    M.fail([400, 401, 403, 404, "4XX"]),
    M.fail([500, "5XX"]),
  )(response);
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
