/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";

import { ApiSDKCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$accountGetApiAccountBalances } from "./tools/accountGetApiAccountBalances.js";
import { tool$accountGetApiAccountPortfolio } from "./tools/accountGetApiAccountPortfolio.js";
import { tool$accountGetApiAccountProfile } from "./tools/accountGetApiAccountProfile.js";
import { tool$accountGetApiAccountTrades } from "./tools/accountGetApiAccountTrades.js";
import { tool$accountPostApiAccountResetApiKey } from "./tools/accountPostApiAccountResetApiKey.js";
import { tool$accountPutApiAccountProfile } from "./tools/accountPutApiAccountProfile.js";
import { tool$adminDeleteApiAdminTeamsTeamId } from "./tools/adminDeleteApiAdminTeamsTeamId.js";
import { tool$adminGetApiAdminCompetitionCompetitionIdSnapshots } from "./tools/adminGetApiAdminCompetitionCompetitionIdSnapshots.js";
import { tool$adminGetApiAdminReportsPerformance } from "./tools/adminGetApiAdminReportsPerformance.js";
import { tool$adminGetApiAdminTeams } from "./tools/adminGetApiAdminTeams.js";
import { tool$adminGetApiAdminTeamsSearch } from "./tools/adminGetApiAdminTeamsSearch.js";
import { tool$adminGetApiAdminTeamsTeamIdKey } from "./tools/adminGetApiAdminTeamsTeamIdKey.js";
import { tool$adminPostApiAdminCompetitionCreate } from "./tools/adminPostApiAdminCompetitionCreate.js";
import { tool$adminPostApiAdminCompetitionEnd } from "./tools/adminPostApiAdminCompetitionEnd.js";
import { tool$adminPostApiAdminCompetitionStart } from "./tools/adminPostApiAdminCompetitionStart.js";
import { tool$adminPostApiAdminSetup } from "./tools/adminPostApiAdminSetup.js";
import { tool$adminPostApiAdminTeamsRegister } from "./tools/adminPostApiAdminTeamsRegister.js";
import { tool$adminPostApiAdminTeamsTeamIdDeactivate } from "./tools/adminPostApiAdminTeamsTeamIdDeactivate.js";
import { tool$adminPostApiAdminTeamsTeamIdReactivate } from "./tools/adminPostApiAdminTeamsTeamIdReactivate.js";
import { tool$authGetApiAuthNonce } from "./tools/authGetApiAuthNonce.js";
import { tool$authPostApiAuthLogin } from "./tools/authPostApiAuthLogin.js";
import { tool$authPostApiAuthLogout } from "./tools/authPostApiAuthLogout.js";
import { tool$competitionGetApiCompetitions } from "./tools/competitionGetApiCompetitions.js";
import { tool$competitionGetApiCompetitionsLeaderboard } from "./tools/competitionGetApiCompetitionsLeaderboard.js";
import { tool$competitionGetApiCompetitionsRules } from "./tools/competitionGetApiCompetitionsRules.js";
import { tool$competitionGetApiCompetitionsStatus } from "./tools/competitionGetApiCompetitionsStatus.js";
import { tool$competitionGetApiCompetitionsUpcoming } from "./tools/competitionGetApiCompetitionsUpcoming.js";
import { tool$healthGetApiHealth } from "./tools/healthGetApiHealth.js";
import { tool$healthGetApiHealthDetailed } from "./tools/healthGetApiHealthDetailed.js";
import { tool$priceGetApiPrice } from "./tools/priceGetApiPrice.js";
import { tool$priceGetApiPriceTokenInfo } from "./tools/priceGetApiPriceTokenInfo.js";
import { tool$tradeGetApiTradeQuote } from "./tools/tradeGetApiTradeQuote.js";
import { tool$tradePostApiTradeExecute } from "./tools/tradePostApiTradeExecute.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  bearerAuth?: SDKOptions["bearerAuth"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "ApiSDK",
    version: "0.0.7",
  });

  const client = new ApiSDKCore({
    bearerAuth: deps.bearerAuth,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$accountGetApiAccountProfile);
  tool(tool$accountPutApiAccountProfile);
  tool(tool$accountPostApiAccountResetApiKey);
  tool(tool$accountGetApiAccountBalances);
  tool(tool$accountGetApiAccountTrades);
  tool(tool$accountGetApiAccountPortfolio);
  tool(tool$adminPostApiAdminSetup);
  tool(tool$adminPostApiAdminTeamsRegister);
  tool(tool$adminGetApiAdminTeams);
  tool(tool$adminGetApiAdminTeamsTeamIdKey);
  tool(tool$adminDeleteApiAdminTeamsTeamId);
  tool(tool$adminPostApiAdminCompetitionCreate);
  tool(tool$adminPostApiAdminCompetitionStart);
  tool(tool$adminPostApiAdminCompetitionEnd);
  tool(tool$adminGetApiAdminCompetitionCompetitionIdSnapshots);
  tool(tool$adminGetApiAdminReportsPerformance);
  tool(tool$adminPostApiAdminTeamsTeamIdDeactivate);
  tool(tool$adminPostApiAdminTeamsTeamIdReactivate);
  tool(tool$adminGetApiAdminTeamsSearch);
  tool(tool$authGetApiAuthNonce);
  tool(tool$authPostApiAuthLogin);
  tool(tool$authPostApiAuthLogout);
  tool(tool$competitionGetApiCompetitions);
  tool(tool$competitionGetApiCompetitionsLeaderboard);
  tool(tool$competitionGetApiCompetitionsStatus);
  tool(tool$competitionGetApiCompetitionsRules);
  tool(tool$competitionGetApiCompetitionsUpcoming);
  tool(tool$healthGetApiHealth);
  tool(tool$healthGetApiHealthDetailed);
  tool(tool$priceGetApiPrice);
  tool(tool$priceGetApiPriceTokenInfo);
  tool(tool$tradePostApiTradeExecute);
  tool(tool$tradeGetApiTradeQuote);

  return server;
}
