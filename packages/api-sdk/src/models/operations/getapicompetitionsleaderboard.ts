/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiCompetitionsLeaderboardRequest = {
  /**
   * Optional competition ID (if not provided, the active competition is used)
   */
  competitionId?: string | undefined;
};

/**
 * Competition status
 */
export const GetApiCompetitionsLeaderboardStatus = {
  Pending: "PENDING",
  Active: "ACTIVE",
  Completed: "COMPLETED",
} as const;
/**
 * Competition status
 */
export type GetApiCompetitionsLeaderboardStatus = ClosedEnum<
  typeof GetApiCompetitionsLeaderboardStatus
>;

export type GetApiCompetitionsLeaderboardCompetition = {
  /**
   * Competition ID
   */
  id?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | null | undefined;
  /**
   * External URL for competition details
   */
  externalLink?: string | null | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | null | undefined;
  /**
   * Competition start date
   */
  startDate?: Date | undefined;
  /**
   * Competition end date
   */
  endDate?: Date | null | undefined;
  /**
   * Competition status
   */
  status?: GetApiCompetitionsLeaderboardStatus | undefined;
  /**
   * When the competition was created
   */
  createdAt?: Date | undefined;
  /**
   * When the competition was last updated
   */
  updatedAt?: Date | undefined;
};

export type GetApiCompetitionsLeaderboardLeaderboard = {
  /**
   * Team rank on the leaderboard
   */
  rank?: number | undefined;
  /**
   * Team ID
   */
  teamId?: string | undefined;
  /**
   * Team name
   */
  teamName?: string | undefined;
  /**
   * Current portfolio value in USD
   */
  portfolioValue?: number | undefined;
  /**
   * Always true for this array
   */
  active?: boolean | undefined;
  /**
   * Always null for active teams
   */
  deactivationReason?: string | null | undefined;
};

export type InactiveTeam = {
  /**
   * Team ID
   */
  teamId?: string | undefined;
  /**
   * Team name
   */
  teamName?: string | undefined;
  /**
   * Current portfolio value in USD
   */
  portfolioValue?: number | undefined;
  /**
   * Always false for this array
   */
  active?: boolean | undefined;
  /**
   * Reason for team deactivation
   */
  deactivationReason?: string | undefined;
};

/**
 * Competition leaderboard
 */
export type GetApiCompetitionsLeaderboardResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  competition?: GetApiCompetitionsLeaderboardCompetition | undefined;
  /**
   * Ranked list of active teams
   */
  leaderboard?: Array<GetApiCompetitionsLeaderboardLeaderboard> | undefined;
  /**
   * List of deactivated teams (excluded from ranking)
   */
  inactiveTeams?: Array<InactiveTeam> | undefined;
  /**
   * Indicates if any teams are inactive
   */
  hasInactiveTeams?: boolean | undefined;
};

/** @internal */
export const GetApiCompetitionsLeaderboardRequest$inboundSchema: z.ZodType<
  GetApiCompetitionsLeaderboardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
});

/** @internal */
export type GetApiCompetitionsLeaderboardRequest$Outbound = {
  competitionId?: string | undefined;
};

/** @internal */
export const GetApiCompetitionsLeaderboardRequest$outboundSchema: z.ZodType<
  GetApiCompetitionsLeaderboardRequest$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsLeaderboardRequest
> = z.object({
  competitionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsLeaderboardRequest$ {
  /** @deprecated use `GetApiCompetitionsLeaderboardRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsLeaderboardRequest$inboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsLeaderboardRequest$outboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardRequest$Outbound` instead. */
  export type Outbound = GetApiCompetitionsLeaderboardRequest$Outbound;
}

export function getApiCompetitionsLeaderboardRequestToJSON(
  getApiCompetitionsLeaderboardRequest: GetApiCompetitionsLeaderboardRequest,
): string {
  return JSON.stringify(
    GetApiCompetitionsLeaderboardRequest$outboundSchema.parse(
      getApiCompetitionsLeaderboardRequest,
    ),
  );
}

export function getApiCompetitionsLeaderboardRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsLeaderboardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsLeaderboardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsLeaderboardRequest' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsLeaderboardStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsLeaderboardStatus
> = z.nativeEnum(GetApiCompetitionsLeaderboardStatus);

/** @internal */
export const GetApiCompetitionsLeaderboardStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsLeaderboardStatus
> = GetApiCompetitionsLeaderboardStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsLeaderboardStatus$ {
  /** @deprecated use `GetApiCompetitionsLeaderboardStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsLeaderboardStatus$inboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsLeaderboardStatus$outboundSchema;
}

/** @internal */
export const GetApiCompetitionsLeaderboardCompetition$inboundSchema: z.ZodType<
  GetApiCompetitionsLeaderboardCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  startDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  endDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  status: GetApiCompetitionsLeaderboardStatus$inboundSchema.optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiCompetitionsLeaderboardCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  externalLink?: string | null | undefined;
  imageUrl?: string | null | undefined;
  startDate?: string | undefined;
  endDate?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiCompetitionsLeaderboardCompetition$outboundSchema: z.ZodType<
  GetApiCompetitionsLeaderboardCompetition$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsLeaderboardCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  startDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  endDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
  status: GetApiCompetitionsLeaderboardStatus$outboundSchema.optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsLeaderboardCompetition$ {
  /** @deprecated use `GetApiCompetitionsLeaderboardCompetition$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsLeaderboardCompetition$inboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardCompetition$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsLeaderboardCompetition$outboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardCompetition$Outbound` instead. */
  export type Outbound = GetApiCompetitionsLeaderboardCompetition$Outbound;
}

export function getApiCompetitionsLeaderboardCompetitionToJSON(
  getApiCompetitionsLeaderboardCompetition: GetApiCompetitionsLeaderboardCompetition,
): string {
  return JSON.stringify(
    GetApiCompetitionsLeaderboardCompetition$outboundSchema.parse(
      getApiCompetitionsLeaderboardCompetition,
    ),
  );
}

export function getApiCompetitionsLeaderboardCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsLeaderboardCompetition,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsLeaderboardCompetition$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsLeaderboardCompetition' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsLeaderboardLeaderboard$inboundSchema: z.ZodType<
  GetApiCompetitionsLeaderboardLeaderboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  rank: z.number().int().optional(),
  teamId: z.string().optional(),
  teamName: z.string().optional(),
  portfolioValue: z.number().optional(),
  active: z.boolean().optional(),
  deactivationReason: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetApiCompetitionsLeaderboardLeaderboard$Outbound = {
  rank?: number | undefined;
  teamId?: string | undefined;
  teamName?: string | undefined;
  portfolioValue?: number | undefined;
  active?: boolean | undefined;
  deactivationReason?: string | null | undefined;
};

/** @internal */
export const GetApiCompetitionsLeaderboardLeaderboard$outboundSchema: z.ZodType<
  GetApiCompetitionsLeaderboardLeaderboard$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsLeaderboardLeaderboard
> = z.object({
  rank: z.number().int().optional(),
  teamId: z.string().optional(),
  teamName: z.string().optional(),
  portfolioValue: z.number().optional(),
  active: z.boolean().optional(),
  deactivationReason: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsLeaderboardLeaderboard$ {
  /** @deprecated use `GetApiCompetitionsLeaderboardLeaderboard$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsLeaderboardLeaderboard$inboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardLeaderboard$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsLeaderboardLeaderboard$outboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardLeaderboard$Outbound` instead. */
  export type Outbound = GetApiCompetitionsLeaderboardLeaderboard$Outbound;
}

export function getApiCompetitionsLeaderboardLeaderboardToJSON(
  getApiCompetitionsLeaderboardLeaderboard: GetApiCompetitionsLeaderboardLeaderboard,
): string {
  return JSON.stringify(
    GetApiCompetitionsLeaderboardLeaderboard$outboundSchema.parse(
      getApiCompetitionsLeaderboardLeaderboard,
    ),
  );
}

export function getApiCompetitionsLeaderboardLeaderboardFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsLeaderboardLeaderboard,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsLeaderboardLeaderboard$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsLeaderboardLeaderboard' from JSON`,
  );
}

/** @internal */
export const InactiveTeam$inboundSchema: z.ZodType<
  InactiveTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  teamName: z.string().optional(),
  portfolioValue: z.number().optional(),
  active: z.boolean().optional(),
  deactivationReason: z.string().optional(),
});

/** @internal */
export type InactiveTeam$Outbound = {
  teamId?: string | undefined;
  teamName?: string | undefined;
  portfolioValue?: number | undefined;
  active?: boolean | undefined;
  deactivationReason?: string | undefined;
};

/** @internal */
export const InactiveTeam$outboundSchema: z.ZodType<
  InactiveTeam$Outbound,
  z.ZodTypeDef,
  InactiveTeam
> = z.object({
  teamId: z.string().optional(),
  teamName: z.string().optional(),
  portfolioValue: z.number().optional(),
  active: z.boolean().optional(),
  deactivationReason: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InactiveTeam$ {
  /** @deprecated use `InactiveTeam$inboundSchema` instead. */
  export const inboundSchema = InactiveTeam$inboundSchema;
  /** @deprecated use `InactiveTeam$outboundSchema` instead. */
  export const outboundSchema = InactiveTeam$outboundSchema;
  /** @deprecated use `InactiveTeam$Outbound` instead. */
  export type Outbound = InactiveTeam$Outbound;
}

export function inactiveTeamToJSON(inactiveTeam: InactiveTeam): string {
  return JSON.stringify(InactiveTeam$outboundSchema.parse(inactiveTeam));
}

export function inactiveTeamFromJSON(
  jsonString: string,
): SafeParseResult<InactiveTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InactiveTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InactiveTeam' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsLeaderboardResponse$inboundSchema: z.ZodType<
  GetApiCompetitionsLeaderboardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => GetApiCompetitionsLeaderboardCompetition$inboundSchema)
    .optional(),
  leaderboard: z
    .array(z.lazy(() => GetApiCompetitionsLeaderboardLeaderboard$inboundSchema))
    .optional(),
  inactiveTeams: z.array(z.lazy(() => InactiveTeam$inboundSchema)).optional(),
  hasInactiveTeams: z.boolean().optional(),
});

/** @internal */
export type GetApiCompetitionsLeaderboardResponse$Outbound = {
  success?: boolean | undefined;
  competition?: GetApiCompetitionsLeaderboardCompetition$Outbound | undefined;
  leaderboard?:
    | Array<GetApiCompetitionsLeaderboardLeaderboard$Outbound>
    | undefined;
  inactiveTeams?: Array<InactiveTeam$Outbound> | undefined;
  hasInactiveTeams?: boolean | undefined;
};

/** @internal */
export const GetApiCompetitionsLeaderboardResponse$outboundSchema: z.ZodType<
  GetApiCompetitionsLeaderboardResponse$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsLeaderboardResponse
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => GetApiCompetitionsLeaderboardCompetition$outboundSchema)
    .optional(),
  leaderboard: z
    .array(
      z.lazy(() => GetApiCompetitionsLeaderboardLeaderboard$outboundSchema),
    )
    .optional(),
  inactiveTeams: z.array(z.lazy(() => InactiveTeam$outboundSchema)).optional(),
  hasInactiveTeams: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsLeaderboardResponse$ {
  /** @deprecated use `GetApiCompetitionsLeaderboardResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsLeaderboardResponse$inboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsLeaderboardResponse$outboundSchema;
  /** @deprecated use `GetApiCompetitionsLeaderboardResponse$Outbound` instead. */
  export type Outbound = GetApiCompetitionsLeaderboardResponse$Outbound;
}

export function getApiCompetitionsLeaderboardResponseToJSON(
  getApiCompetitionsLeaderboardResponse: GetApiCompetitionsLeaderboardResponse,
): string {
  return JSON.stringify(
    GetApiCompetitionsLeaderboardResponse$outboundSchema.parse(
      getApiCompetitionsLeaderboardResponse,
    ),
  );
}

export function getApiCompetitionsLeaderboardResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsLeaderboardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsLeaderboardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsLeaderboardResponse' from JSON`,
  );
}
