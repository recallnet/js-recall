/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Blockchain type of the token
 */
export const GetApiPriceTokenInfoQueryParamChain = {
  Evm: "evm",
  Svm: "svm",
} as const;
/**
 * Blockchain type of the token
 */
export type GetApiPriceTokenInfoQueryParamChain = ClosedEnum<
  typeof GetApiPriceTokenInfoQueryParamChain
>;

/**
 * Specific chain for EVM tokens
 */
export const GetApiPriceTokenInfoSpecificChain = {
  Eth: "eth",
  Polygon: "polygon",
  Bsc: "bsc",
  Arbitrum: "arbitrum",
  Optimism: "optimism",
  Avalanche: "avalanche",
  Base: "base",
  Linea: "linea",
  Zksync: "zksync",
  Scroll: "scroll",
  Mantle: "mantle",
  Svm: "svm",
} as const;
/**
 * Specific chain for EVM tokens
 */
export type GetApiPriceTokenInfoSpecificChain = ClosedEnum<
  typeof GetApiPriceTokenInfoSpecificChain
>;

export type GetApiPriceTokenInfoRequest = {
  /**
   * Token address
   */
  token: string;
  /**
   * Blockchain type of the token
   */
  chain?: GetApiPriceTokenInfoQueryParamChain | undefined;
  /**
   * Specific chain for EVM tokens
   */
  specificChain?: GetApiPriceTokenInfoSpecificChain | undefined;
};

/**
 * Blockchain type of the token
 */
export const GetApiPriceTokenInfoChainResponse = {
  Evm: "evm",
  Svm: "svm",
} as const;
/**
 * Blockchain type of the token
 */
export type GetApiPriceTokenInfoChainResponse = ClosedEnum<
  typeof GetApiPriceTokenInfoChainResponse
>;

/**
 * Token information
 */
export type GetApiPriceTokenInfoResponse = {
  /**
   * Whether the token information was successfully retrieved
   */
  success?: boolean | undefined;
  /**
   * Current price of the token in USD
   */
  price?: number | null | undefined;
  /**
   * Token address
   */
  token?: string | undefined;
  /**
   * Blockchain type of the token
   */
  chain?: GetApiPriceTokenInfoChainResponse | undefined;
  /**
   * Specific chain for EVM tokens
   */
  specificChain?: string | null | undefined;
  /**
   * Token symbol
   */
  symbol?: string | undefined;
};

/** @internal */
export const GetApiPriceTokenInfoQueryParamChain$inboundSchema: z.ZodNativeEnum<
  typeof GetApiPriceTokenInfoQueryParamChain
> = z.nativeEnum(GetApiPriceTokenInfoQueryParamChain);

/** @internal */
export const GetApiPriceTokenInfoQueryParamChain$outboundSchema: z.ZodNativeEnum<
  typeof GetApiPriceTokenInfoQueryParamChain
> = GetApiPriceTokenInfoQueryParamChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiPriceTokenInfoQueryParamChain$ {
  /** @deprecated use `GetApiPriceTokenInfoQueryParamChain$inboundSchema` instead. */
  export const inboundSchema =
    GetApiPriceTokenInfoQueryParamChain$inboundSchema;
  /** @deprecated use `GetApiPriceTokenInfoQueryParamChain$outboundSchema` instead. */
  export const outboundSchema =
    GetApiPriceTokenInfoQueryParamChain$outboundSchema;
}

/** @internal */
export const GetApiPriceTokenInfoSpecificChain$inboundSchema: z.ZodNativeEnum<
  typeof GetApiPriceTokenInfoSpecificChain
> = z.nativeEnum(GetApiPriceTokenInfoSpecificChain);

/** @internal */
export const GetApiPriceTokenInfoSpecificChain$outboundSchema: z.ZodNativeEnum<
  typeof GetApiPriceTokenInfoSpecificChain
> = GetApiPriceTokenInfoSpecificChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiPriceTokenInfoSpecificChain$ {
  /** @deprecated use `GetApiPriceTokenInfoSpecificChain$inboundSchema` instead. */
  export const inboundSchema = GetApiPriceTokenInfoSpecificChain$inboundSchema;
  /** @deprecated use `GetApiPriceTokenInfoSpecificChain$outboundSchema` instead. */
  export const outboundSchema =
    GetApiPriceTokenInfoSpecificChain$outboundSchema;
}

/** @internal */
export const GetApiPriceTokenInfoRequest$inboundSchema: z.ZodType<
  GetApiPriceTokenInfoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  chain: GetApiPriceTokenInfoQueryParamChain$inboundSchema.optional(),
  specificChain: GetApiPriceTokenInfoSpecificChain$inboundSchema.optional(),
});

/** @internal */
export type GetApiPriceTokenInfoRequest$Outbound = {
  token: string;
  chain?: string | undefined;
  specificChain?: string | undefined;
};

/** @internal */
export const GetApiPriceTokenInfoRequest$outboundSchema: z.ZodType<
  GetApiPriceTokenInfoRequest$Outbound,
  z.ZodTypeDef,
  GetApiPriceTokenInfoRequest
> = z.object({
  token: z.string(),
  chain: GetApiPriceTokenInfoQueryParamChain$outboundSchema.optional(),
  specificChain: GetApiPriceTokenInfoSpecificChain$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiPriceTokenInfoRequest$ {
  /** @deprecated use `GetApiPriceTokenInfoRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiPriceTokenInfoRequest$inboundSchema;
  /** @deprecated use `GetApiPriceTokenInfoRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiPriceTokenInfoRequest$outboundSchema;
  /** @deprecated use `GetApiPriceTokenInfoRequest$Outbound` instead. */
  export type Outbound = GetApiPriceTokenInfoRequest$Outbound;
}

export function getApiPriceTokenInfoRequestToJSON(
  getApiPriceTokenInfoRequest: GetApiPriceTokenInfoRequest,
): string {
  return JSON.stringify(
    GetApiPriceTokenInfoRequest$outboundSchema.parse(
      getApiPriceTokenInfoRequest,
    ),
  );
}

export function getApiPriceTokenInfoRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiPriceTokenInfoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiPriceTokenInfoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiPriceTokenInfoRequest' from JSON`,
  );
}

/** @internal */
export const GetApiPriceTokenInfoChainResponse$inboundSchema: z.ZodNativeEnum<
  typeof GetApiPriceTokenInfoChainResponse
> = z.nativeEnum(GetApiPriceTokenInfoChainResponse);

/** @internal */
export const GetApiPriceTokenInfoChainResponse$outboundSchema: z.ZodNativeEnum<
  typeof GetApiPriceTokenInfoChainResponse
> = GetApiPriceTokenInfoChainResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiPriceTokenInfoChainResponse$ {
  /** @deprecated use `GetApiPriceTokenInfoChainResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiPriceTokenInfoChainResponse$inboundSchema;
  /** @deprecated use `GetApiPriceTokenInfoChainResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiPriceTokenInfoChainResponse$outboundSchema;
}

/** @internal */
export const GetApiPriceTokenInfoResponse$inboundSchema: z.ZodType<
  GetApiPriceTokenInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  price: z.nullable(z.number()).optional(),
  token: z.string().optional(),
  chain: GetApiPriceTokenInfoChainResponse$inboundSchema.optional(),
  specificChain: z.nullable(z.string()).optional(),
  symbol: z.string().optional(),
});

/** @internal */
export type GetApiPriceTokenInfoResponse$Outbound = {
  success?: boolean | undefined;
  price?: number | null | undefined;
  token?: string | undefined;
  chain?: string | undefined;
  specificChain?: string | null | undefined;
  symbol?: string | undefined;
};

/** @internal */
export const GetApiPriceTokenInfoResponse$outboundSchema: z.ZodType<
  GetApiPriceTokenInfoResponse$Outbound,
  z.ZodTypeDef,
  GetApiPriceTokenInfoResponse
> = z.object({
  success: z.boolean().optional(),
  price: z.nullable(z.number()).optional(),
  token: z.string().optional(),
  chain: GetApiPriceTokenInfoChainResponse$outboundSchema.optional(),
  specificChain: z.nullable(z.string()).optional(),
  symbol: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiPriceTokenInfoResponse$ {
  /** @deprecated use `GetApiPriceTokenInfoResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiPriceTokenInfoResponse$inboundSchema;
  /** @deprecated use `GetApiPriceTokenInfoResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiPriceTokenInfoResponse$outboundSchema;
  /** @deprecated use `GetApiPriceTokenInfoResponse$Outbound` instead. */
  export type Outbound = GetApiPriceTokenInfoResponse$Outbound;
}

export function getApiPriceTokenInfoResponseToJSON(
  getApiPriceTokenInfoResponse: GetApiPriceTokenInfoResponse,
): string {
  return JSON.stringify(
    GetApiPriceTokenInfoResponse$outboundSchema.parse(
      getApiPriceTokenInfoResponse,
    ),
  );
}

export function getApiPriceTokenInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiPriceTokenInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiPriceTokenInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiPriceTokenInfoResponse' from JSON`,
  );
}
