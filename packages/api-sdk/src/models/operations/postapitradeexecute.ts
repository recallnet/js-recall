/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostApiTradeExecuteRequest = {
  /**
   * Token address to sell
   */
  fromToken: string;
  /**
   * Token address to buy
   */
  toToken: string;
  /**
   * Amount of fromToken to trade
   */
  amount: string;
  /**
   * Reason for executing this trade
   */
  reason: string;
  /**
   * Optional slippage tolerance in percentage
   */
  slippageTolerance?: string | undefined;
  /**
   * Optional - Blockchain type for fromToken
   */
  fromChain?: string | undefined;
  /**
   * Optional - Specific chain for fromToken
   */
  fromSpecificChain?: string | undefined;
  /**
   * Optional - Blockchain type for toToken
   */
  toChain?: string | undefined;
  /**
   * Optional - Specific chain for toToken
   */
  toSpecificChain?: string | undefined;
};

export type Transaction = {
  /**
   * Unique trade ID
   */
  id?: string | undefined;
  /**
   * Agent ID that executed the trade
   */
  agentId?: string | undefined;
  /**
   * ID of the competition this trade is part of
   */
  competitionId?: string | undefined;
  /**
   * Token address that was sold
   */
  fromToken?: string | undefined;
  /**
   * Token address that was bought
   */
  toToken?: string | undefined;
  /**
   * Amount of fromToken that was sold
   */
  fromAmount?: number | undefined;
  /**
   * Amount of toToken that was received
   */
  toAmount?: number | undefined;
  /**
   * Price at which the trade was executed
   */
  price?: number | undefined;
  /**
   * Whether the trade was successfully completed
   */
  success?: boolean | undefined;
  /**
   * Error message if the trade failed
   */
  error?: string | null | undefined;
  /**
   * Reason provided for executing the trade
   */
  reason?: string | undefined;
  /**
   * The USD value of the trade at execution time
   */
  tradeAmountUsd?: number | undefined;
  /**
   * Timestamp of when the trade was executed
   */
  timestamp?: Date | undefined;
  /**
   * Blockchain type of the source token
   */
  fromChain?: string | undefined;
  /**
   * Blockchain type of the destination token
   */
  toChain?: string | undefined;
  /**
   * Specific chain for the source token
   */
  fromSpecificChain?: string | undefined;
  /**
   * Specific chain for the destination token
   */
  toSpecificChain?: string | undefined;
  /**
   * Symbol of the destination token
   */
  toTokenSymbol?: string | undefined;
  /**
   * Symbol of the source token
   */
  fromTokenSymbol?: string | undefined;
};

/**
 * Trade executed successfully
 */
export type PostApiTradeExecuteResponse = {
  /**
   * Whether the trade was successfully executed
   */
  success?: boolean | undefined;
  transaction?: Transaction | undefined;
};

/** @internal */
export const PostApiTradeExecuteRequest$inboundSchema: z.ZodType<
  PostApiTradeExecuteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromToken: z.string(),
  toToken: z.string(),
  amount: z.string(),
  reason: z.string(),
  slippageTolerance: z.string().optional(),
  fromChain: z.string().optional(),
  fromSpecificChain: z.string().optional(),
  toChain: z.string().optional(),
  toSpecificChain: z.string().optional(),
});

/** @internal */
export type PostApiTradeExecuteRequest$Outbound = {
  fromToken: string;
  toToken: string;
  amount: string;
  reason: string;
  slippageTolerance?: string | undefined;
  fromChain?: string | undefined;
  fromSpecificChain?: string | undefined;
  toChain?: string | undefined;
  toSpecificChain?: string | undefined;
};

/** @internal */
export const PostApiTradeExecuteRequest$outboundSchema: z.ZodType<
  PostApiTradeExecuteRequest$Outbound,
  z.ZodTypeDef,
  PostApiTradeExecuteRequest
> = z.object({
  fromToken: z.string(),
  toToken: z.string(),
  amount: z.string(),
  reason: z.string(),
  slippageTolerance: z.string().optional(),
  fromChain: z.string().optional(),
  fromSpecificChain: z.string().optional(),
  toChain: z.string().optional(),
  toSpecificChain: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiTradeExecuteRequest$ {
  /** @deprecated use `PostApiTradeExecuteRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiTradeExecuteRequest$inboundSchema;
  /** @deprecated use `PostApiTradeExecuteRequest$outboundSchema` instead. */
  export const outboundSchema = PostApiTradeExecuteRequest$outboundSchema;
  /** @deprecated use `PostApiTradeExecuteRequest$Outbound` instead. */
  export type Outbound = PostApiTradeExecuteRequest$Outbound;
}

export function postApiTradeExecuteRequestToJSON(
  postApiTradeExecuteRequest: PostApiTradeExecuteRequest,
): string {
  return JSON.stringify(
    PostApiTradeExecuteRequest$outboundSchema.parse(postApiTradeExecuteRequest),
  );
}

export function postApiTradeExecuteRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiTradeExecuteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiTradeExecuteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiTradeExecuteRequest' from JSON`,
  );
}

/** @internal */
export const Transaction$inboundSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  agentId: z.string().optional(),
  competitionId: z.string().optional(),
  fromToken: z.string().optional(),
  toToken: z.string().optional(),
  fromAmount: z.number().optional(),
  toAmount: z.number().optional(),
  price: z.number().optional(),
  success: z.boolean().optional(),
  error: z.nullable(z.string()).optional(),
  reason: z.string().optional(),
  tradeAmountUsd: z.number().optional(),
  timestamp: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  fromChain: z.string().optional(),
  toChain: z.string().optional(),
  fromSpecificChain: z.string().optional(),
  toSpecificChain: z.string().optional(),
  toTokenSymbol: z.string().optional(),
  fromTokenSymbol: z.string().optional(),
});

/** @internal */
export type Transaction$Outbound = {
  id?: string | undefined;
  agentId?: string | undefined;
  competitionId?: string | undefined;
  fromToken?: string | undefined;
  toToken?: string | undefined;
  fromAmount?: number | undefined;
  toAmount?: number | undefined;
  price?: number | undefined;
  success?: boolean | undefined;
  error?: string | null | undefined;
  reason?: string | undefined;
  tradeAmountUsd?: number | undefined;
  timestamp?: string | undefined;
  fromChain?: string | undefined;
  toChain?: string | undefined;
  fromSpecificChain?: string | undefined;
  toSpecificChain?: string | undefined;
  toTokenSymbol?: string | undefined;
  fromTokenSymbol?: string | undefined;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
  Transaction$Outbound,
  z.ZodTypeDef,
  Transaction
> = z.object({
  id: z.string().optional(),
  agentId: z.string().optional(),
  competitionId: z.string().optional(),
  fromToken: z.string().optional(),
  toToken: z.string().optional(),
  fromAmount: z.number().optional(),
  toAmount: z.number().optional(),
  price: z.number().optional(),
  success: z.boolean().optional(),
  error: z.nullable(z.string()).optional(),
  reason: z.string().optional(),
  tradeAmountUsd: z.number().optional(),
  timestamp: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  fromChain: z.string().optional(),
  toChain: z.string().optional(),
  fromSpecificChain: z.string().optional(),
  toSpecificChain: z.string().optional(),
  toTokenSymbol: z.string().optional(),
  fromTokenSymbol: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
  /** @deprecated use `Transaction$inboundSchema` instead. */
  export const inboundSchema = Transaction$inboundSchema;
  /** @deprecated use `Transaction$outboundSchema` instead. */
  export const outboundSchema = Transaction$outboundSchema;
  /** @deprecated use `Transaction$Outbound` instead. */
  export type Outbound = Transaction$Outbound;
}

export function transactionToJSON(transaction: Transaction): string {
  return JSON.stringify(Transaction$outboundSchema.parse(transaction));
}

export function transactionFromJSON(
  jsonString: string,
): SafeParseResult<Transaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transaction' from JSON`,
  );
}

/** @internal */
export const PostApiTradeExecuteResponse$inboundSchema: z.ZodType<
  PostApiTradeExecuteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  transaction: z.lazy(() => Transaction$inboundSchema).optional(),
});

/** @internal */
export type PostApiTradeExecuteResponse$Outbound = {
  success?: boolean | undefined;
  transaction?: Transaction$Outbound | undefined;
};

/** @internal */
export const PostApiTradeExecuteResponse$outboundSchema: z.ZodType<
  PostApiTradeExecuteResponse$Outbound,
  z.ZodTypeDef,
  PostApiTradeExecuteResponse
> = z.object({
  success: z.boolean().optional(),
  transaction: z.lazy(() => Transaction$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiTradeExecuteResponse$ {
  /** @deprecated use `PostApiTradeExecuteResponse$inboundSchema` instead. */
  export const inboundSchema = PostApiTradeExecuteResponse$inboundSchema;
  /** @deprecated use `PostApiTradeExecuteResponse$outboundSchema` instead. */
  export const outboundSchema = PostApiTradeExecuteResponse$outboundSchema;
  /** @deprecated use `PostApiTradeExecuteResponse$Outbound` instead. */
  export type Outbound = PostApiTradeExecuteResponse$Outbound;
}

export function postApiTradeExecuteResponseToJSON(
  postApiTradeExecuteResponse: PostApiTradeExecuteResponse,
): string {
  return JSON.stringify(
    PostApiTradeExecuteResponse$outboundSchema.parse(
      postApiTradeExecuteResponse,
    ),
  );
}

export function postApiTradeExecuteResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiTradeExecuteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiTradeExecuteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiTradeExecuteResponse' from JSON`,
  );
}
