/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AvailableChains = {
  /**
   * Whether Solana (SVM) is available
   */
  svm?: boolean | undefined;
  /**
   * List of available EVM chains
   */
  evm?: Array<string> | undefined;
};

export type PortfolioSnapshots = {
  /**
   * Interval between portfolio snapshots
   */
  interval?: string | undefined;
};

export type Rules = {
  /**
   * List of trading rules for the competition
   */
  tradingRules?: Array<string> | undefined;
  /**
   * Rate limits for API endpoints
   */
  rateLimits?: Array<string> | undefined;
  availableChains?: AvailableChains | undefined;
  /**
   * Formula used for calculating slippage
   */
  slippageFormula?: string | undefined;
  portfolioSnapshots?: PortfolioSnapshots | undefined;
};

/**
 * Competition rules retrieved successfully
 */
export type GetApiCompetitionRulesResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  rules?: Rules | undefined;
};

/** @internal */
export const AvailableChains$inboundSchema: z.ZodType<
  AvailableChains,
  z.ZodTypeDef,
  unknown
> = z.object({
  svm: z.boolean().optional(),
  evm: z.array(z.string()).optional(),
});

/** @internal */
export type AvailableChains$Outbound = {
  svm?: boolean | undefined;
  evm?: Array<string> | undefined;
};

/** @internal */
export const AvailableChains$outboundSchema: z.ZodType<
  AvailableChains$Outbound,
  z.ZodTypeDef,
  AvailableChains
> = z.object({
  svm: z.boolean().optional(),
  evm: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableChains$ {
  /** @deprecated use `AvailableChains$inboundSchema` instead. */
  export const inboundSchema = AvailableChains$inboundSchema;
  /** @deprecated use `AvailableChains$outboundSchema` instead. */
  export const outboundSchema = AvailableChains$outboundSchema;
  /** @deprecated use `AvailableChains$Outbound` instead. */
  export type Outbound = AvailableChains$Outbound;
}

export function availableChainsToJSON(
  availableChains: AvailableChains,
): string {
  return JSON.stringify(AvailableChains$outboundSchema.parse(availableChains));
}

export function availableChainsFromJSON(
  jsonString: string,
): SafeParseResult<AvailableChains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableChains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableChains' from JSON`,
  );
}

/** @internal */
export const PortfolioSnapshots$inboundSchema: z.ZodType<
  PortfolioSnapshots,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: z.string().optional(),
});

/** @internal */
export type PortfolioSnapshots$Outbound = {
  interval?: string | undefined;
};

/** @internal */
export const PortfolioSnapshots$outboundSchema: z.ZodType<
  PortfolioSnapshots$Outbound,
  z.ZodTypeDef,
  PortfolioSnapshots
> = z.object({
  interval: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortfolioSnapshots$ {
  /** @deprecated use `PortfolioSnapshots$inboundSchema` instead. */
  export const inboundSchema = PortfolioSnapshots$inboundSchema;
  /** @deprecated use `PortfolioSnapshots$outboundSchema` instead. */
  export const outboundSchema = PortfolioSnapshots$outboundSchema;
  /** @deprecated use `PortfolioSnapshots$Outbound` instead. */
  export type Outbound = PortfolioSnapshots$Outbound;
}

export function portfolioSnapshotsToJSON(
  portfolioSnapshots: PortfolioSnapshots,
): string {
  return JSON.stringify(
    PortfolioSnapshots$outboundSchema.parse(portfolioSnapshots),
  );
}

export function portfolioSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<PortfolioSnapshots, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortfolioSnapshots$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortfolioSnapshots' from JSON`,
  );
}

/** @internal */
export const Rules$inboundSchema: z.ZodType<Rules, z.ZodTypeDef, unknown> =
  z.object({
    tradingRules: z.array(z.string()).optional(),
    rateLimits: z.array(z.string()).optional(),
    availableChains: z.lazy(() => AvailableChains$inboundSchema).optional(),
    slippageFormula: z.string().optional(),
    portfolioSnapshots: z
      .lazy(() => PortfolioSnapshots$inboundSchema)
      .optional(),
  });

/** @internal */
export type Rules$Outbound = {
  tradingRules?: Array<string> | undefined;
  rateLimits?: Array<string> | undefined;
  availableChains?: AvailableChains$Outbound | undefined;
  slippageFormula?: string | undefined;
  portfolioSnapshots?: PortfolioSnapshots$Outbound | undefined;
};

/** @internal */
export const Rules$outboundSchema: z.ZodType<
  Rules$Outbound,
  z.ZodTypeDef,
  Rules
> = z.object({
  tradingRules: z.array(z.string()).optional(),
  rateLimits: z.array(z.string()).optional(),
  availableChains: z.lazy(() => AvailableChains$outboundSchema).optional(),
  slippageFormula: z.string().optional(),
  portfolioSnapshots: z
    .lazy(() => PortfolioSnapshots$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rules$ {
  /** @deprecated use `Rules$inboundSchema` instead. */
  export const inboundSchema = Rules$inboundSchema;
  /** @deprecated use `Rules$outboundSchema` instead. */
  export const outboundSchema = Rules$outboundSchema;
  /** @deprecated use `Rules$Outbound` instead. */
  export type Outbound = Rules$Outbound;
}

export function rulesToJSON(rules: Rules): string {
  return JSON.stringify(Rules$outboundSchema.parse(rules));
}

export function rulesFromJSON(
  jsonString: string,
): SafeParseResult<Rules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rules' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionRulesResponse$inboundSchema: z.ZodType<
  GetApiCompetitionRulesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  rules: z.lazy(() => Rules$inboundSchema).optional(),
});

/** @internal */
export type GetApiCompetitionRulesResponse$Outbound = {
  success?: boolean | undefined;
  rules?: Rules$Outbound | undefined;
};

/** @internal */
export const GetApiCompetitionRulesResponse$outboundSchema: z.ZodType<
  GetApiCompetitionRulesResponse$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionRulesResponse
> = z.object({
  success: z.boolean().optional(),
  rules: z.lazy(() => Rules$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionRulesResponse$ {
  /** @deprecated use `GetApiCompetitionRulesResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionRulesResponse$inboundSchema;
  /** @deprecated use `GetApiCompetitionRulesResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiCompetitionRulesResponse$outboundSchema;
  /** @deprecated use `GetApiCompetitionRulesResponse$Outbound` instead. */
  export type Outbound = GetApiCompetitionRulesResponse$Outbound;
}

export function getApiCompetitionRulesResponseToJSON(
  getApiCompetitionRulesResponse: GetApiCompetitionRulesResponse,
): string {
  return JSON.stringify(
    GetApiCompetitionRulesResponse$outboundSchema.parse(
      getApiCompetitionRulesResponse,
    ),
  );
}

export function getApiCompetitionRulesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionRulesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiCompetitionRulesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionRulesResponse' from JSON`,
  );
}
