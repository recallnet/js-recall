/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RefRequest = {
  /**
   * Agent name
   */
  name?: string | undefined;
  /**
   * Agent version
   */
  version?: string | undefined;
  /**
   * Link to agent documentation or repository
   */
  url?: string | undefined;
};

export type SocialRequest = {
  /**
   * Agent social name
   */
  name?: string | undefined;
  /**
   * Contact email for the agent
   */
  email?: string | undefined;
  /**
   * Twitter handle
   */
  twitter?: string | undefined;
};

/**
 * Optional agent metadata
 */
export type PutApiAccountProfileMetadataRequest = {
  ref?: RefRequest | undefined;
  /**
   * Brief description of the agent
   */
  description?: string | undefined;
  social?: SocialRequest | undefined;
};

export type PutApiAccountProfileRequest = {
  /**
   * New contact person name
   */
  contactPerson?: string | undefined;
  /**
   * Optional agent metadata
   */
  metadata?: PutApiAccountProfileMetadataRequest | undefined;
  /**
   * URL to the team's image
   */
  imageUrl?: string | undefined;
};

export type PutApiAccountProfileRefResponse = {
  /**
   * Agent name
   */
  name?: string | undefined;
  /**
   * Agent version
   */
  version?: string | undefined;
  /**
   * Link to agent documentation or repository
   */
  url?: string | undefined;
};

export type PutApiAccountProfileSocialResponse = {
  /**
   * Agent social name
   */
  name?: string | undefined;
  /**
   * Contact email for the agent
   */
  email?: string | undefined;
  /**
   * Twitter handle
   */
  twitter?: string | undefined;
};

/**
 * Optional agent metadata
 */
export type PutApiAccountProfileMetadataResponse = {
  ref?: PutApiAccountProfileRefResponse | undefined;
  /**
   * Brief description of the agent
   */
  description?: string | undefined;
  social?: PutApiAccountProfileSocialResponse | undefined;
};

export type PutApiAccountProfileTeam = {
  /**
   * Team ID
   */
  id?: string | undefined;
  /**
   * Team name
   */
  name?: string | undefined;
  /**
   * Team email
   */
  email?: string | undefined;
  /**
   * Updated contact person name
   */
  contactPerson?: string | undefined;
  /**
   * Optional agent metadata
   */
  metadata?: PutApiAccountProfileMetadataResponse | null | undefined;
  /**
   * URL to the team's image
   */
  imageUrl?: string | undefined;
  /**
   * Team creation timestamp
   */
  createdAt?: Date | undefined;
  /**
   * Team update timestamp
   */
  updatedAt?: Date | undefined;
};

/**
 * Updated team profile
 */
export type PutApiAccountProfileResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  team?: PutApiAccountProfileTeam | undefined;
};

/** @internal */
export const RefRequest$inboundSchema: z.ZodType<
  RefRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  version: z.string().optional(),
  url: z.string().optional(),
});

/** @internal */
export type RefRequest$Outbound = {
  name?: string | undefined;
  version?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const RefRequest$outboundSchema: z.ZodType<
  RefRequest$Outbound,
  z.ZodTypeDef,
  RefRequest
> = z.object({
  name: z.string().optional(),
  version: z.string().optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefRequest$ {
  /** @deprecated use `RefRequest$inboundSchema` instead. */
  export const inboundSchema = RefRequest$inboundSchema;
  /** @deprecated use `RefRequest$outboundSchema` instead. */
  export const outboundSchema = RefRequest$outboundSchema;
  /** @deprecated use `RefRequest$Outbound` instead. */
  export type Outbound = RefRequest$Outbound;
}

export function refRequestToJSON(refRequest: RefRequest): string {
  return JSON.stringify(RefRequest$outboundSchema.parse(refRequest));
}

export function refRequestFromJSON(
  jsonString: string,
): SafeParseResult<RefRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefRequest' from JSON`,
  );
}

/** @internal */
export const SocialRequest$inboundSchema: z.ZodType<
  SocialRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  twitter: z.string().optional(),
});

/** @internal */
export type SocialRequest$Outbound = {
  name?: string | undefined;
  email?: string | undefined;
  twitter?: string | undefined;
};

/** @internal */
export const SocialRequest$outboundSchema: z.ZodType<
  SocialRequest$Outbound,
  z.ZodTypeDef,
  SocialRequest
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  twitter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SocialRequest$ {
  /** @deprecated use `SocialRequest$inboundSchema` instead. */
  export const inboundSchema = SocialRequest$inboundSchema;
  /** @deprecated use `SocialRequest$outboundSchema` instead. */
  export const outboundSchema = SocialRequest$outboundSchema;
  /** @deprecated use `SocialRequest$Outbound` instead. */
  export type Outbound = SocialRequest$Outbound;
}

export function socialRequestToJSON(socialRequest: SocialRequest): string {
  return JSON.stringify(SocialRequest$outboundSchema.parse(socialRequest));
}

export function socialRequestFromJSON(
  jsonString: string,
): SafeParseResult<SocialRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SocialRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SocialRequest' from JSON`,
  );
}

/** @internal */
export const PutApiAccountProfileMetadataRequest$inboundSchema: z.ZodType<
  PutApiAccountProfileMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.lazy(() => RefRequest$inboundSchema).optional(),
  description: z.string().optional(),
  social: z.lazy(() => SocialRequest$inboundSchema).optional(),
});

/** @internal */
export type PutApiAccountProfileMetadataRequest$Outbound = {
  ref?: RefRequest$Outbound | undefined;
  description?: string | undefined;
  social?: SocialRequest$Outbound | undefined;
};

/** @internal */
export const PutApiAccountProfileMetadataRequest$outboundSchema: z.ZodType<
  PutApiAccountProfileMetadataRequest$Outbound,
  z.ZodTypeDef,
  PutApiAccountProfileMetadataRequest
> = z.object({
  ref: z.lazy(() => RefRequest$outboundSchema).optional(),
  description: z.string().optional(),
  social: z.lazy(() => SocialRequest$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAccountProfileMetadataRequest$ {
  /** @deprecated use `PutApiAccountProfileMetadataRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAccountProfileMetadataRequest$inboundSchema;
  /** @deprecated use `PutApiAccountProfileMetadataRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAccountProfileMetadataRequest$outboundSchema;
  /** @deprecated use `PutApiAccountProfileMetadataRequest$Outbound` instead. */
  export type Outbound = PutApiAccountProfileMetadataRequest$Outbound;
}

export function putApiAccountProfileMetadataRequestToJSON(
  putApiAccountProfileMetadataRequest: PutApiAccountProfileMetadataRequest,
): string {
  return JSON.stringify(
    PutApiAccountProfileMetadataRequest$outboundSchema.parse(
      putApiAccountProfileMetadataRequest,
    ),
  );
}

export function putApiAccountProfileMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutApiAccountProfileMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiAccountProfileMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiAccountProfileMetadataRequest' from JSON`,
  );
}

/** @internal */
export const PutApiAccountProfileRequest$inboundSchema: z.ZodType<
  PutApiAccountProfileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  contactPerson: z.string().optional(),
  metadata: z
    .lazy(() => PutApiAccountProfileMetadataRequest$inboundSchema)
    .optional(),
  imageUrl: z.string().optional(),
});

/** @internal */
export type PutApiAccountProfileRequest$Outbound = {
  contactPerson?: string | undefined;
  metadata?: PutApiAccountProfileMetadataRequest$Outbound | undefined;
  imageUrl?: string | undefined;
};

/** @internal */
export const PutApiAccountProfileRequest$outboundSchema: z.ZodType<
  PutApiAccountProfileRequest$Outbound,
  z.ZodTypeDef,
  PutApiAccountProfileRequest
> = z.object({
  contactPerson: z.string().optional(),
  metadata: z
    .lazy(() => PutApiAccountProfileMetadataRequest$outboundSchema)
    .optional(),
  imageUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAccountProfileRequest$ {
  /** @deprecated use `PutApiAccountProfileRequest$inboundSchema` instead. */
  export const inboundSchema = PutApiAccountProfileRequest$inboundSchema;
  /** @deprecated use `PutApiAccountProfileRequest$outboundSchema` instead. */
  export const outboundSchema = PutApiAccountProfileRequest$outboundSchema;
  /** @deprecated use `PutApiAccountProfileRequest$Outbound` instead. */
  export type Outbound = PutApiAccountProfileRequest$Outbound;
}

export function putApiAccountProfileRequestToJSON(
  putApiAccountProfileRequest: PutApiAccountProfileRequest,
): string {
  return JSON.stringify(
    PutApiAccountProfileRequest$outboundSchema.parse(
      putApiAccountProfileRequest,
    ),
  );
}

export function putApiAccountProfileRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutApiAccountProfileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutApiAccountProfileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiAccountProfileRequest' from JSON`,
  );
}

/** @internal */
export const PutApiAccountProfileRefResponse$inboundSchema: z.ZodType<
  PutApiAccountProfileRefResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  version: z.string().optional(),
  url: z.string().optional(),
});

/** @internal */
export type PutApiAccountProfileRefResponse$Outbound = {
  name?: string | undefined;
  version?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const PutApiAccountProfileRefResponse$outboundSchema: z.ZodType<
  PutApiAccountProfileRefResponse$Outbound,
  z.ZodTypeDef,
  PutApiAccountProfileRefResponse
> = z.object({
  name: z.string().optional(),
  version: z.string().optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAccountProfileRefResponse$ {
  /** @deprecated use `PutApiAccountProfileRefResponse$inboundSchema` instead. */
  export const inboundSchema = PutApiAccountProfileRefResponse$inboundSchema;
  /** @deprecated use `PutApiAccountProfileRefResponse$outboundSchema` instead. */
  export const outboundSchema = PutApiAccountProfileRefResponse$outboundSchema;
  /** @deprecated use `PutApiAccountProfileRefResponse$Outbound` instead. */
  export type Outbound = PutApiAccountProfileRefResponse$Outbound;
}

export function putApiAccountProfileRefResponseToJSON(
  putApiAccountProfileRefResponse: PutApiAccountProfileRefResponse,
): string {
  return JSON.stringify(
    PutApiAccountProfileRefResponse$outboundSchema.parse(
      putApiAccountProfileRefResponse,
    ),
  );
}

export function putApiAccountProfileRefResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutApiAccountProfileRefResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutApiAccountProfileRefResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiAccountProfileRefResponse' from JSON`,
  );
}

/** @internal */
export const PutApiAccountProfileSocialResponse$inboundSchema: z.ZodType<
  PutApiAccountProfileSocialResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  twitter: z.string().optional(),
});

/** @internal */
export type PutApiAccountProfileSocialResponse$Outbound = {
  name?: string | undefined;
  email?: string | undefined;
  twitter?: string | undefined;
};

/** @internal */
export const PutApiAccountProfileSocialResponse$outboundSchema: z.ZodType<
  PutApiAccountProfileSocialResponse$Outbound,
  z.ZodTypeDef,
  PutApiAccountProfileSocialResponse
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  twitter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAccountProfileSocialResponse$ {
  /** @deprecated use `PutApiAccountProfileSocialResponse$inboundSchema` instead. */
  export const inboundSchema = PutApiAccountProfileSocialResponse$inboundSchema;
  /** @deprecated use `PutApiAccountProfileSocialResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAccountProfileSocialResponse$outboundSchema;
  /** @deprecated use `PutApiAccountProfileSocialResponse$Outbound` instead. */
  export type Outbound = PutApiAccountProfileSocialResponse$Outbound;
}

export function putApiAccountProfileSocialResponseToJSON(
  putApiAccountProfileSocialResponse: PutApiAccountProfileSocialResponse,
): string {
  return JSON.stringify(
    PutApiAccountProfileSocialResponse$outboundSchema.parse(
      putApiAccountProfileSocialResponse,
    ),
  );
}

export function putApiAccountProfileSocialResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutApiAccountProfileSocialResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiAccountProfileSocialResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiAccountProfileSocialResponse' from JSON`,
  );
}

/** @internal */
export const PutApiAccountProfileMetadataResponse$inboundSchema: z.ZodType<
  PutApiAccountProfileMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.lazy(() => PutApiAccountProfileRefResponse$inboundSchema).optional(),
  description: z.string().optional(),
  social: z
    .lazy(() => PutApiAccountProfileSocialResponse$inboundSchema)
    .optional(),
});

/** @internal */
export type PutApiAccountProfileMetadataResponse$Outbound = {
  ref?: PutApiAccountProfileRefResponse$Outbound | undefined;
  description?: string | undefined;
  social?: PutApiAccountProfileSocialResponse$Outbound | undefined;
};

/** @internal */
export const PutApiAccountProfileMetadataResponse$outboundSchema: z.ZodType<
  PutApiAccountProfileMetadataResponse$Outbound,
  z.ZodTypeDef,
  PutApiAccountProfileMetadataResponse
> = z.object({
  ref: z.lazy(() => PutApiAccountProfileRefResponse$outboundSchema).optional(),
  description: z.string().optional(),
  social: z
    .lazy(() => PutApiAccountProfileSocialResponse$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAccountProfileMetadataResponse$ {
  /** @deprecated use `PutApiAccountProfileMetadataResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAccountProfileMetadataResponse$inboundSchema;
  /** @deprecated use `PutApiAccountProfileMetadataResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAccountProfileMetadataResponse$outboundSchema;
  /** @deprecated use `PutApiAccountProfileMetadataResponse$Outbound` instead. */
  export type Outbound = PutApiAccountProfileMetadataResponse$Outbound;
}

export function putApiAccountProfileMetadataResponseToJSON(
  putApiAccountProfileMetadataResponse: PutApiAccountProfileMetadataResponse,
): string {
  return JSON.stringify(
    PutApiAccountProfileMetadataResponse$outboundSchema.parse(
      putApiAccountProfileMetadataResponse,
    ),
  );
}

export function putApiAccountProfileMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutApiAccountProfileMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiAccountProfileMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiAccountProfileMetadataResponse' from JSON`,
  );
}

/** @internal */
export const PutApiAccountProfileTeam$inboundSchema: z.ZodType<
  PutApiAccountProfileTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  metadata: z
    .nullable(z.lazy(() => PutApiAccountProfileMetadataResponse$inboundSchema))
    .optional(),
  imageUrl: z.string().optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiAccountProfileTeam$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  contactPerson?: string | undefined;
  metadata?: PutApiAccountProfileMetadataResponse$Outbound | null | undefined;
  imageUrl?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiAccountProfileTeam$outboundSchema: z.ZodType<
  PutApiAccountProfileTeam$Outbound,
  z.ZodTypeDef,
  PutApiAccountProfileTeam
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  metadata: z
    .nullable(z.lazy(() => PutApiAccountProfileMetadataResponse$outboundSchema))
    .optional(),
  imageUrl: z.string().optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAccountProfileTeam$ {
  /** @deprecated use `PutApiAccountProfileTeam$inboundSchema` instead. */
  export const inboundSchema = PutApiAccountProfileTeam$inboundSchema;
  /** @deprecated use `PutApiAccountProfileTeam$outboundSchema` instead. */
  export const outboundSchema = PutApiAccountProfileTeam$outboundSchema;
  /** @deprecated use `PutApiAccountProfileTeam$Outbound` instead. */
  export type Outbound = PutApiAccountProfileTeam$Outbound;
}

export function putApiAccountProfileTeamToJSON(
  putApiAccountProfileTeam: PutApiAccountProfileTeam,
): string {
  return JSON.stringify(
    PutApiAccountProfileTeam$outboundSchema.parse(putApiAccountProfileTeam),
  );
}

export function putApiAccountProfileTeamFromJSON(
  jsonString: string,
): SafeParseResult<PutApiAccountProfileTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutApiAccountProfileTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiAccountProfileTeam' from JSON`,
  );
}

/** @internal */
export const PutApiAccountProfileResponse$inboundSchema: z.ZodType<
  PutApiAccountProfileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  team: z.lazy(() => PutApiAccountProfileTeam$inboundSchema).optional(),
});

/** @internal */
export type PutApiAccountProfileResponse$Outbound = {
  success?: boolean | undefined;
  team?: PutApiAccountProfileTeam$Outbound | undefined;
};

/** @internal */
export const PutApiAccountProfileResponse$outboundSchema: z.ZodType<
  PutApiAccountProfileResponse$Outbound,
  z.ZodTypeDef,
  PutApiAccountProfileResponse
> = z.object({
  success: z.boolean().optional(),
  team: z.lazy(() => PutApiAccountProfileTeam$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAccountProfileResponse$ {
  /** @deprecated use `PutApiAccountProfileResponse$inboundSchema` instead. */
  export const inboundSchema = PutApiAccountProfileResponse$inboundSchema;
  /** @deprecated use `PutApiAccountProfileResponse$outboundSchema` instead. */
  export const outboundSchema = PutApiAccountProfileResponse$outboundSchema;
  /** @deprecated use `PutApiAccountProfileResponse$Outbound` instead. */
  export type Outbound = PutApiAccountProfileResponse$Outbound;
}

export function putApiAccountProfileResponseToJSON(
  putApiAccountProfileResponse: PutApiAccountProfileResponse,
): string {
  return JSON.stringify(
    PutApiAccountProfileResponse$outboundSchema.parse(
      putApiAccountProfileResponse,
    ),
  );
}

export function putApiAccountProfileResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutApiAccountProfileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutApiAccountProfileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiAccountProfileResponse' from JSON`,
  );
}
