/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAdminReportsPerformanceRequest = {
  /**
   * ID of the competition
   */
  competitionId: string;
};

/**
 * Competition status
 */
export const GetApiAdminReportsPerformanceStatus = {
  Pending: "PENDING",
  Active: "ACTIVE",
  Completed: "COMPLETED",
} as const;
/**
 * Competition status
 */
export type GetApiAdminReportsPerformanceStatus = ClosedEnum<
  typeof GetApiAdminReportsPerformanceStatus
>;

/**
 * Type of cross-chain trading allowed in this competition
 */
export const GetApiAdminReportsPerformanceCrossChainTradingType = {
  DisallowAll: "disallowAll",
  DisallowXParent: "disallowXParent",
  Allow: "allow",
} as const;
/**
 * Type of cross-chain trading allowed in this competition
 */
export type GetApiAdminReportsPerformanceCrossChainTradingType = ClosedEnum<
  typeof GetApiAdminReportsPerformanceCrossChainTradingType
>;

export type GetApiAdminReportsPerformanceCompetition = {
  /**
   * Competition ID
   */
  id?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | undefined;
  /**
   * Competition start date
   */
  startDate?: Date | undefined;
  /**
   * Competition end date
   */
  endDate?: Date | null | undefined;
  /**
   * External URL for competition details
   */
  externalLink?: string | null | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | null | undefined;
  /**
   * Competition status
   */
  status?: GetApiAdminReportsPerformanceStatus | undefined;
  /**
   * Type of cross-chain trading allowed in this competition
   */
  crossChainTradingType?:
    | GetApiAdminReportsPerformanceCrossChainTradingType
    | undefined;
};

export type GetApiAdminReportsPerformanceLeaderboard = {
  /**
   * Team rank on the leaderboard
   */
  rank?: number | undefined;
  /**
   * Team ID
   */
  teamId?: string | undefined;
  /**
   * Team name
   */
  teamName?: string | undefined;
  /**
   * Portfolio value
   */
  portfolioValue?: number | undefined;
};

/**
 * Performance reports
 */
export type GetApiAdminReportsPerformanceResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  competition?: GetApiAdminReportsPerformanceCompetition | undefined;
  leaderboard?: Array<GetApiAdminReportsPerformanceLeaderboard> | undefined;
};

/** @internal */
export const GetApiAdminReportsPerformanceRequest$inboundSchema: z.ZodType<
  GetApiAdminReportsPerformanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string(),
});

/** @internal */
export type GetApiAdminReportsPerformanceRequest$Outbound = {
  competitionId: string;
};

/** @internal */
export const GetApiAdminReportsPerformanceRequest$outboundSchema: z.ZodType<
  GetApiAdminReportsPerformanceRequest$Outbound,
  z.ZodTypeDef,
  GetApiAdminReportsPerformanceRequest
> = z.object({
  competitionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminReportsPerformanceRequest$ {
  /** @deprecated use `GetApiAdminReportsPerformanceRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAdminReportsPerformanceRequest$inboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAdminReportsPerformanceRequest$outboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceRequest$Outbound` instead. */
  export type Outbound = GetApiAdminReportsPerformanceRequest$Outbound;
}

export function getApiAdminReportsPerformanceRequestToJSON(
  getApiAdminReportsPerformanceRequest: GetApiAdminReportsPerformanceRequest,
): string {
  return JSON.stringify(
    GetApiAdminReportsPerformanceRequest$outboundSchema.parse(
      getApiAdminReportsPerformanceRequest,
    ),
  );
}

export function getApiAdminReportsPerformanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminReportsPerformanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAdminReportsPerformanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminReportsPerformanceRequest' from JSON`,
  );
}

/** @internal */
export const GetApiAdminReportsPerformanceStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiAdminReportsPerformanceStatus
> = z.nativeEnum(GetApiAdminReportsPerformanceStatus);

/** @internal */
export const GetApiAdminReportsPerformanceStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiAdminReportsPerformanceStatus
> = GetApiAdminReportsPerformanceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminReportsPerformanceStatus$ {
  /** @deprecated use `GetApiAdminReportsPerformanceStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAdminReportsPerformanceStatus$inboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAdminReportsPerformanceStatus$outboundSchema;
}

/** @internal */
export const GetApiAdminReportsPerformanceCrossChainTradingType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiAdminReportsPerformanceCrossChainTradingType
> = z.nativeEnum(GetApiAdminReportsPerformanceCrossChainTradingType);

/** @internal */
export const GetApiAdminReportsPerformanceCrossChainTradingType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiAdminReportsPerformanceCrossChainTradingType
> = GetApiAdminReportsPerformanceCrossChainTradingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminReportsPerformanceCrossChainTradingType$ {
  /** @deprecated use `GetApiAdminReportsPerformanceCrossChainTradingType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAdminReportsPerformanceCrossChainTradingType$inboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceCrossChainTradingType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAdminReportsPerformanceCrossChainTradingType$outboundSchema;
}

/** @internal */
export const GetApiAdminReportsPerformanceCompetition$inboundSchema: z.ZodType<
  GetApiAdminReportsPerformanceCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  startDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  endDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiAdminReportsPerformanceStatus$inboundSchema.optional(),
  crossChainTradingType:
    GetApiAdminReportsPerformanceCrossChainTradingType$inboundSchema.optional(),
});

/** @internal */
export type GetApiAdminReportsPerformanceCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | null | undefined;
  externalLink?: string | null | undefined;
  imageUrl?: string | null | undefined;
  status?: string | undefined;
  crossChainTradingType?: string | undefined;
};

/** @internal */
export const GetApiAdminReportsPerformanceCompetition$outboundSchema: z.ZodType<
  GetApiAdminReportsPerformanceCompetition$Outbound,
  z.ZodTypeDef,
  GetApiAdminReportsPerformanceCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  startDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  endDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiAdminReportsPerformanceStatus$outboundSchema.optional(),
  crossChainTradingType:
    GetApiAdminReportsPerformanceCrossChainTradingType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminReportsPerformanceCompetition$ {
  /** @deprecated use `GetApiAdminReportsPerformanceCompetition$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAdminReportsPerformanceCompetition$inboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceCompetition$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAdminReportsPerformanceCompetition$outboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceCompetition$Outbound` instead. */
  export type Outbound = GetApiAdminReportsPerformanceCompetition$Outbound;
}

export function getApiAdminReportsPerformanceCompetitionToJSON(
  getApiAdminReportsPerformanceCompetition: GetApiAdminReportsPerformanceCompetition,
): string {
  return JSON.stringify(
    GetApiAdminReportsPerformanceCompetition$outboundSchema.parse(
      getApiAdminReportsPerformanceCompetition,
    ),
  );
}

export function getApiAdminReportsPerformanceCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiAdminReportsPerformanceCompetition,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAdminReportsPerformanceCompetition$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiAdminReportsPerformanceCompetition' from JSON`,
  );
}

/** @internal */
export const GetApiAdminReportsPerformanceLeaderboard$inboundSchema: z.ZodType<
  GetApiAdminReportsPerformanceLeaderboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  rank: z.number().int().optional(),
  teamId: z.string().optional(),
  teamName: z.string().optional(),
  portfolioValue: z.number().optional(),
});

/** @internal */
export type GetApiAdminReportsPerformanceLeaderboard$Outbound = {
  rank?: number | undefined;
  teamId?: string | undefined;
  teamName?: string | undefined;
  portfolioValue?: number | undefined;
};

/** @internal */
export const GetApiAdminReportsPerformanceLeaderboard$outboundSchema: z.ZodType<
  GetApiAdminReportsPerformanceLeaderboard$Outbound,
  z.ZodTypeDef,
  GetApiAdminReportsPerformanceLeaderboard
> = z.object({
  rank: z.number().int().optional(),
  teamId: z.string().optional(),
  teamName: z.string().optional(),
  portfolioValue: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminReportsPerformanceLeaderboard$ {
  /** @deprecated use `GetApiAdminReportsPerformanceLeaderboard$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAdminReportsPerformanceLeaderboard$inboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceLeaderboard$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAdminReportsPerformanceLeaderboard$outboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceLeaderboard$Outbound` instead. */
  export type Outbound = GetApiAdminReportsPerformanceLeaderboard$Outbound;
}

export function getApiAdminReportsPerformanceLeaderboardToJSON(
  getApiAdminReportsPerformanceLeaderboard: GetApiAdminReportsPerformanceLeaderboard,
): string {
  return JSON.stringify(
    GetApiAdminReportsPerformanceLeaderboard$outboundSchema.parse(
      getApiAdminReportsPerformanceLeaderboard,
    ),
  );
}

export function getApiAdminReportsPerformanceLeaderboardFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiAdminReportsPerformanceLeaderboard,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAdminReportsPerformanceLeaderboard$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiAdminReportsPerformanceLeaderboard' from JSON`,
  );
}

/** @internal */
export const GetApiAdminReportsPerformanceResponse$inboundSchema: z.ZodType<
  GetApiAdminReportsPerformanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => GetApiAdminReportsPerformanceCompetition$inboundSchema)
    .optional(),
  leaderboard: z
    .array(z.lazy(() => GetApiAdminReportsPerformanceLeaderboard$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiAdminReportsPerformanceResponse$Outbound = {
  success?: boolean | undefined;
  competition?: GetApiAdminReportsPerformanceCompetition$Outbound | undefined;
  leaderboard?:
    | Array<GetApiAdminReportsPerformanceLeaderboard$Outbound>
    | undefined;
};

/** @internal */
export const GetApiAdminReportsPerformanceResponse$outboundSchema: z.ZodType<
  GetApiAdminReportsPerformanceResponse$Outbound,
  z.ZodTypeDef,
  GetApiAdminReportsPerformanceResponse
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => GetApiAdminReportsPerformanceCompetition$outboundSchema)
    .optional(),
  leaderboard: z
    .array(
      z.lazy(() => GetApiAdminReportsPerformanceLeaderboard$outboundSchema),
    )
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminReportsPerformanceResponse$ {
  /** @deprecated use `GetApiAdminReportsPerformanceResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAdminReportsPerformanceResponse$inboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAdminReportsPerformanceResponse$outboundSchema;
  /** @deprecated use `GetApiAdminReportsPerformanceResponse$Outbound` instead. */
  export type Outbound = GetApiAdminReportsPerformanceResponse$Outbound;
}

export function getApiAdminReportsPerformanceResponseToJSON(
  getApiAdminReportsPerformanceResponse: GetApiAdminReportsPerformanceResponse,
): string {
  return JSON.stringify(
    GetApiAdminReportsPerformanceResponse$outboundSchema.parse(
      getApiAdminReportsPerformanceResponse,
    ),
  );
}

export function getApiAdminReportsPerformanceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminReportsPerformanceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAdminReportsPerformanceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminReportsPerformanceResponse' from JSON`,
  );
}
