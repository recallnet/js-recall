/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Trade = {
  id?: string | undefined;
  agentId?: string | undefined;
  competitionId?: string | undefined;
  /**
   * Source token address
   */
  fromToken?: string | undefined;
  /**
   * Destination token address
   */
  toToken?: string | undefined;
  /**
   * Amount traded from source token
   */
  fromAmount?: number | undefined;
  /**
   * Amount received in destination token
   */
  toAmount?: number | undefined;
  /**
   * Price at which the trade was executed
   */
  price?: number | undefined;
  /**
   * USD value of the trade at execution time
   */
  tradeAmountUsd?: number | undefined;
  /**
   * Symbol of the destination token
   */
  toTokenSymbol?: string | undefined;
  /**
   * Symbol of the source token
   */
  fromTokenSymbol?: string | undefined;
  /**
   * Whether the trade was successfully completed
   */
  success?: boolean | undefined;
  /**
   * Error message if the trade failed
   */
  error?: string | null | undefined;
  /**
   * Reason for the trade
   */
  reason?: string | undefined;
  /**
   * When the trade was executed
   */
  timestamp?: Date | undefined;
  /**
   * Blockchain type of the source token
   */
  fromChain?: string | undefined;
  /**
   * Blockchain type of the destination token
   */
  toChain?: string | undefined;
  /**
   * Specific chain for the source token
   */
  fromSpecificChain?: string | null | undefined;
  /**
   * Specific chain for the destination token
   */
  toSpecificChain?: string | null | undefined;
};

/**
 * Trade history retrieved successfully
 */
export type GetApiAgentTradesResponse = {
  success?: boolean | undefined;
  agentId?: string | undefined;
  trades?: Array<Trade> | undefined;
};

/** @internal */
export const Trade$inboundSchema: z.ZodType<Trade, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    agentId: z.string().optional(),
    competitionId: z.string().optional(),
    fromToken: z.string().optional(),
    toToken: z.string().optional(),
    fromAmount: z.number().optional(),
    toAmount: z.number().optional(),
    price: z.number().optional(),
    tradeAmountUsd: z.number().optional(),
    toTokenSymbol: z.string().optional(),
    fromTokenSymbol: z.string().optional(),
    success: z.boolean().optional(),
    error: z.nullable(z.string()).optional(),
    reason: z.string().optional(),
    timestamp: z
      .string()
      .datetime({ offset: true })
      .transform((v) => new Date(v))
      .optional(),
    fromChain: z.string().optional(),
    toChain: z.string().optional(),
    fromSpecificChain: z.nullable(z.string()).optional(),
    toSpecificChain: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Trade$Outbound = {
  id?: string | undefined;
  agentId?: string | undefined;
  competitionId?: string | undefined;
  fromToken?: string | undefined;
  toToken?: string | undefined;
  fromAmount?: number | undefined;
  toAmount?: number | undefined;
  price?: number | undefined;
  tradeAmountUsd?: number | undefined;
  toTokenSymbol?: string | undefined;
  fromTokenSymbol?: string | undefined;
  success?: boolean | undefined;
  error?: string | null | undefined;
  reason?: string | undefined;
  timestamp?: string | undefined;
  fromChain?: string | undefined;
  toChain?: string | undefined;
  fromSpecificChain?: string | null | undefined;
  toSpecificChain?: string | null | undefined;
};

/** @internal */
export const Trade$outboundSchema: z.ZodType<
  Trade$Outbound,
  z.ZodTypeDef,
  Trade
> = z.object({
  id: z.string().optional(),
  agentId: z.string().optional(),
  competitionId: z.string().optional(),
  fromToken: z.string().optional(),
  toToken: z.string().optional(),
  fromAmount: z.number().optional(),
  toAmount: z.number().optional(),
  price: z.number().optional(),
  tradeAmountUsd: z.number().optional(),
  toTokenSymbol: z.string().optional(),
  fromTokenSymbol: z.string().optional(),
  success: z.boolean().optional(),
  error: z.nullable(z.string()).optional(),
  reason: z.string().optional(),
  timestamp: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  fromChain: z.string().optional(),
  toChain: z.string().optional(),
  fromSpecificChain: z.nullable(z.string()).optional(),
  toSpecificChain: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Trade$ {
  /** @deprecated use `Trade$inboundSchema` instead. */
  export const inboundSchema = Trade$inboundSchema;
  /** @deprecated use `Trade$outboundSchema` instead. */
  export const outboundSchema = Trade$outboundSchema;
  /** @deprecated use `Trade$Outbound` instead. */
  export type Outbound = Trade$Outbound;
}

export function tradeToJSON(trade: Trade): string {
  return JSON.stringify(Trade$outboundSchema.parse(trade));
}

export function tradeFromJSON(
  jsonString: string,
): SafeParseResult<Trade, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Trade$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Trade' from JSON`,
  );
}

/** @internal */
export const GetApiAgentTradesResponse$inboundSchema: z.ZodType<
  GetApiAgentTradesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  agentId: z.string().optional(),
  trades: z.array(z.lazy(() => Trade$inboundSchema)).optional(),
});

/** @internal */
export type GetApiAgentTradesResponse$Outbound = {
  success?: boolean | undefined;
  agentId?: string | undefined;
  trades?: Array<Trade$Outbound> | undefined;
};

/** @internal */
export const GetApiAgentTradesResponse$outboundSchema: z.ZodType<
  GetApiAgentTradesResponse$Outbound,
  z.ZodTypeDef,
  GetApiAgentTradesResponse
> = z.object({
  success: z.boolean().optional(),
  agentId: z.string().optional(),
  trades: z.array(z.lazy(() => Trade$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentTradesResponse$ {
  /** @deprecated use `GetApiAgentTradesResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentTradesResponse$inboundSchema;
  /** @deprecated use `GetApiAgentTradesResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentTradesResponse$outboundSchema;
  /** @deprecated use `GetApiAgentTradesResponse$Outbound` instead. */
  export type Outbound = GetApiAgentTradesResponse$Outbound;
}

export function getApiAgentTradesResponseToJSON(
  getApiAgentTradesResponse: GetApiAgentTradesResponse,
): string {
  return JSON.stringify(
    GetApiAgentTradesResponse$outboundSchema.parse(getApiAgentTradesResponse),
  );
}

export function getApiAgentTradesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentTradesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentTradesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentTradesResponse' from JSON`,
  );
}
