/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAdminUsersUser = {
  /**
   * User ID
   */
  id?: string | undefined;
  /**
   * User wallet address
   */
  walletAddress?: string | undefined;
  /**
   * User name
   */
  name?: string | undefined;
  /**
   * User email
   */
  email?: string | undefined;
  /**
   * User status
   */
  status?: string | undefined;
  /**
   * URL to the user's image
   */
  imageUrl?: string | null | undefined;
  /**
   * Account creation timestamp
   */
  createdAt?: Date | undefined;
  /**
   * Account update timestamp
   */
  updatedAt?: Date | undefined;
};

/**
 * List of users
 */
export type GetApiAdminUsersResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  users?: Array<GetApiAdminUsersUser> | undefined;
};

/** @internal */
export const GetApiAdminUsersUser$inboundSchema: z.ZodType<
  GetApiAdminUsersUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  walletAddress: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  status: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiAdminUsersUser$Outbound = {
  id?: string | undefined;
  walletAddress?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  status?: string | undefined;
  imageUrl?: string | null | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiAdminUsersUser$outboundSchema: z.ZodType<
  GetApiAdminUsersUser$Outbound,
  z.ZodTypeDef,
  GetApiAdminUsersUser
> = z.object({
  id: z.string().optional(),
  walletAddress: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  status: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminUsersUser$ {
  /** @deprecated use `GetApiAdminUsersUser$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminUsersUser$inboundSchema;
  /** @deprecated use `GetApiAdminUsersUser$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminUsersUser$outboundSchema;
  /** @deprecated use `GetApiAdminUsersUser$Outbound` instead. */
  export type Outbound = GetApiAdminUsersUser$Outbound;
}

export function getApiAdminUsersUserToJSON(
  getApiAdminUsersUser: GetApiAdminUsersUser,
): string {
  return JSON.stringify(
    GetApiAdminUsersUser$outboundSchema.parse(getApiAdminUsersUser),
  );
}

export function getApiAdminUsersUserFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminUsersUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminUsersUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminUsersUser' from JSON`,
  );
}

/** @internal */
export const GetApiAdminUsersResponse$inboundSchema: z.ZodType<
  GetApiAdminUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  users: z.array(z.lazy(() => GetApiAdminUsersUser$inboundSchema)).optional(),
});

/** @internal */
export type GetApiAdminUsersResponse$Outbound = {
  success?: boolean | undefined;
  users?: Array<GetApiAdminUsersUser$Outbound> | undefined;
};

/** @internal */
export const GetApiAdminUsersResponse$outboundSchema: z.ZodType<
  GetApiAdminUsersResponse$Outbound,
  z.ZodTypeDef,
  GetApiAdminUsersResponse
> = z.object({
  success: z.boolean().optional(),
  users: z.array(z.lazy(() => GetApiAdminUsersUser$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminUsersResponse$ {
  /** @deprecated use `GetApiAdminUsersResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminUsersResponse$inboundSchema;
  /** @deprecated use `GetApiAdminUsersResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminUsersResponse$outboundSchema;
  /** @deprecated use `GetApiAdminUsersResponse$Outbound` instead. */
  export type Outbound = GetApiAdminUsersResponse$Outbound;
}

export function getApiAdminUsersResponseToJSON(
  getApiAdminUsersResponse: GetApiAdminUsersResponse,
): string {
  return JSON.stringify(
    GetApiAdminUsersResponse$outboundSchema.parse(getApiAdminUsersResponse),
  );
}

export function getApiAdminUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminUsersResponse' from JSON`,
  );
}
