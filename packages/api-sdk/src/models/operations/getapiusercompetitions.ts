/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiUserCompetitionsSecurity = {
  siweSession: string;
};

export type GetApiUserCompetitionsRequest = {
  /**
   * Number of competitions to return
   */
  limit?: number | undefined;
  /**
   * Number of competitions to skip
   */
  offset?: number | undefined;
  /**
   * Optional field(s) to sort by. Supports single or multiple fields separated by commas.
   *
   * @remarks
   * Prefix with '-' for descending order (e.g., '-startDate' or 'name,-createdAt').
   * Available fields: name, startDate, endDate, createdAt, status, agentName, rank.
   */
  sort?: string | undefined;
  /**
   * Optional filter for the competition status. Possible values ("ended", "active", "pending")
   */
  status?: string | undefined;
  /**
   * Optional filter for agents with claimed (claimed=true) or unclaimed rewards (claimed=false). Note, because rewards are not implemented, THIS IS NOT IMPLEMENTED YET.
   */
  claimed?: boolean | undefined;
};

export const GetApiUserCompetitionsStatus = {
  Upcoming: "upcoming",
  Active: "active",
  Ended: "ended",
} as const;
export type GetApiUserCompetitionsStatus = ClosedEnum<
  typeof GetApiUserCompetitionsStatus
>;

export const GetApiUserCompetitionsCrossChainTradingType = {
  SingleChain: "single_chain",
  CrossChain: "cross_chain",
} as const;
export type GetApiUserCompetitionsCrossChainTradingType = ClosedEnum<
  typeof GetApiUserCompetitionsCrossChainTradingType
>;

/**
 * Optional metadata for the agent
 */
export type GetApiUserCompetitionsMetadata = {};

export type GetApiUserCompetitionsAgent = {
  id?: string | undefined;
  ownerId?: string | undefined;
  name?: string | undefined;
  walletAddress?: string | undefined;
  email?: string | undefined;
  description?: string | undefined;
  imageUrl?: string | undefined;
  /**
   * Optional metadata for the agent
   */
  metadata?: GetApiUserCompetitionsMetadata | null | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiUserCompetitionsCompetition = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  externalUrl?: string | null | undefined;
  imageUrl?: string | null | undefined;
  status?: GetApiUserCompetitionsStatus | undefined;
  startDate?: Date | undefined;
  endDate?: Date | undefined;
  crossChainTradingType?:
    | GetApiUserCompetitionsCrossChainTradingType
    | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  agents?: Array<GetApiUserCompetitionsAgent> | undefined;
};

export type GetApiUserCompetitionsPagination = {
  limit?: number | undefined;
  offset?: number | undefined;
  total?: number | undefined;
};

/**
 * User agent competitions retrieved successfully
 */
export type GetApiUserCompetitionsResponse = {
  success?: boolean | undefined;
  competitions?: Array<GetApiUserCompetitionsCompetition> | undefined;
  /**
   * Total number of competitions
   */
  total?: number | undefined;
  pagination?: GetApiUserCompetitionsPagination | undefined;
};

/** @internal */
export const GetApiUserCompetitionsSecurity$inboundSchema: z.ZodType<
  GetApiUserCompetitionsSecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    SIWESession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      SIWESession: "siweSession",
    });
  });

/** @internal */
export type GetApiUserCompetitionsSecurity$Outbound = {
  SIWESession: string;
};

/** @internal */
export const GetApiUserCompetitionsSecurity$outboundSchema: z.ZodType<
  GetApiUserCompetitionsSecurity$Outbound,
  z.ZodTypeDef,
  GetApiUserCompetitionsSecurity
> = z
  .object({
    siweSession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      siweSession: "SIWESession",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsSecurity$ {
  /** @deprecated use `GetApiUserCompetitionsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetApiUserCompetitionsSecurity$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetApiUserCompetitionsSecurity$outboundSchema;
  /** @deprecated use `GetApiUserCompetitionsSecurity$Outbound` instead. */
  export type Outbound = GetApiUserCompetitionsSecurity$Outbound;
}

export function getApiUserCompetitionsSecurityToJSON(
  getApiUserCompetitionsSecurity: GetApiUserCompetitionsSecurity,
): string {
  return JSON.stringify(
    GetApiUserCompetitionsSecurity$outboundSchema.parse(
      getApiUserCompetitionsSecurity,
    ),
  );
}

export function getApiUserCompetitionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserCompetitionsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserCompetitionsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserCompetitionsSecurity' from JSON`,
  );
}

/** @internal */
export const GetApiUserCompetitionsRequest$inboundSchema: z.ZodType<
  GetApiUserCompetitionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  status: z.string().optional(),
  claimed: z.boolean().optional(),
});

/** @internal */
export type GetApiUserCompetitionsRequest$Outbound = {
  limit: number;
  offset: number;
  sort?: string | undefined;
  status?: string | undefined;
  claimed?: boolean | undefined;
};

/** @internal */
export const GetApiUserCompetitionsRequest$outboundSchema: z.ZodType<
  GetApiUserCompetitionsRequest$Outbound,
  z.ZodTypeDef,
  GetApiUserCompetitionsRequest
> = z.object({
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  status: z.string().optional(),
  claimed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsRequest$ {
  /** @deprecated use `GetApiUserCompetitionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiUserCompetitionsRequest$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiUserCompetitionsRequest$outboundSchema;
  /** @deprecated use `GetApiUserCompetitionsRequest$Outbound` instead. */
  export type Outbound = GetApiUserCompetitionsRequest$Outbound;
}

export function getApiUserCompetitionsRequestToJSON(
  getApiUserCompetitionsRequest: GetApiUserCompetitionsRequest,
): string {
  return JSON.stringify(
    GetApiUserCompetitionsRequest$outboundSchema.parse(
      getApiUserCompetitionsRequest,
    ),
  );
}

export function getApiUserCompetitionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserCompetitionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserCompetitionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserCompetitionsRequest' from JSON`,
  );
}

/** @internal */
export const GetApiUserCompetitionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiUserCompetitionsStatus
> = z.nativeEnum(GetApiUserCompetitionsStatus);

/** @internal */
export const GetApiUserCompetitionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiUserCompetitionsStatus
> = GetApiUserCompetitionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsStatus$ {
  /** @deprecated use `GetApiUserCompetitionsStatus$inboundSchema` instead. */
  export const inboundSchema = GetApiUserCompetitionsStatus$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsStatus$outboundSchema` instead. */
  export const outboundSchema = GetApiUserCompetitionsStatus$outboundSchema;
}

/** @internal */
export const GetApiUserCompetitionsCrossChainTradingType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiUserCompetitionsCrossChainTradingType
> = z.nativeEnum(GetApiUserCompetitionsCrossChainTradingType);

/** @internal */
export const GetApiUserCompetitionsCrossChainTradingType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiUserCompetitionsCrossChainTradingType
> = GetApiUserCompetitionsCrossChainTradingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsCrossChainTradingType$ {
  /** @deprecated use `GetApiUserCompetitionsCrossChainTradingType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserCompetitionsCrossChainTradingType$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsCrossChainTradingType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserCompetitionsCrossChainTradingType$outboundSchema;
}

/** @internal */
export const GetApiUserCompetitionsMetadata$inboundSchema: z.ZodType<
  GetApiUserCompetitionsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiUserCompetitionsMetadata$Outbound = {};

/** @internal */
export const GetApiUserCompetitionsMetadata$outboundSchema: z.ZodType<
  GetApiUserCompetitionsMetadata$Outbound,
  z.ZodTypeDef,
  GetApiUserCompetitionsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsMetadata$ {
  /** @deprecated use `GetApiUserCompetitionsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiUserCompetitionsMetadata$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiUserCompetitionsMetadata$outboundSchema;
  /** @deprecated use `GetApiUserCompetitionsMetadata$Outbound` instead. */
  export type Outbound = GetApiUserCompetitionsMetadata$Outbound;
}

export function getApiUserCompetitionsMetadataToJSON(
  getApiUserCompetitionsMetadata: GetApiUserCompetitionsMetadata,
): string {
  return JSON.stringify(
    GetApiUserCompetitionsMetadata$outboundSchema.parse(
      getApiUserCompetitionsMetadata,
    ),
  );
}

export function getApiUserCompetitionsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserCompetitionsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserCompetitionsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserCompetitionsMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiUserCompetitionsAgent$inboundSchema: z.ZodType<
  GetApiUserCompetitionsAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.string().optional(),
  walletAddress: z.string().optional(),
  email: z.string().optional(),
  description: z.string().optional(),
  imageUrl: z.string().optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiUserCompetitionsMetadata$inboundSchema))
    .optional(),
  status: z.string().optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiUserCompetitionsAgent$Outbound = {
  id?: string | undefined;
  ownerId?: string | undefined;
  name?: string | undefined;
  walletAddress?: string | undefined;
  email?: string | undefined;
  description?: string | undefined;
  imageUrl?: string | undefined;
  metadata?: GetApiUserCompetitionsMetadata$Outbound | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiUserCompetitionsAgent$outboundSchema: z.ZodType<
  GetApiUserCompetitionsAgent$Outbound,
  z.ZodTypeDef,
  GetApiUserCompetitionsAgent
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.string().optional(),
  walletAddress: z.string().optional(),
  email: z.string().optional(),
  description: z.string().optional(),
  imageUrl: z.string().optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiUserCompetitionsMetadata$outboundSchema))
    .optional(),
  status: z.string().optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsAgent$ {
  /** @deprecated use `GetApiUserCompetitionsAgent$inboundSchema` instead. */
  export const inboundSchema = GetApiUserCompetitionsAgent$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsAgent$outboundSchema` instead. */
  export const outboundSchema = GetApiUserCompetitionsAgent$outboundSchema;
  /** @deprecated use `GetApiUserCompetitionsAgent$Outbound` instead. */
  export type Outbound = GetApiUserCompetitionsAgent$Outbound;
}

export function getApiUserCompetitionsAgentToJSON(
  getApiUserCompetitionsAgent: GetApiUserCompetitionsAgent,
): string {
  return JSON.stringify(
    GetApiUserCompetitionsAgent$outboundSchema.parse(
      getApiUserCompetitionsAgent,
    ),
  );
}

export function getApiUserCompetitionsAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserCompetitionsAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserCompetitionsAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserCompetitionsAgent' from JSON`,
  );
}

/** @internal */
export const GetApiUserCompetitionsCompetition$inboundSchema: z.ZodType<
  GetApiUserCompetitionsCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  externalUrl: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiUserCompetitionsStatus$inboundSchema.optional(),
  startDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  endDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  crossChainTradingType:
    GetApiUserCompetitionsCrossChainTradingType$inboundSchema.optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  agents: z
    .array(z.lazy(() => GetApiUserCompetitionsAgent$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiUserCompetitionsCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  externalUrl?: string | null | undefined;
  imageUrl?: string | null | undefined;
  status?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  crossChainTradingType?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  agents?: Array<GetApiUserCompetitionsAgent$Outbound> | undefined;
};

/** @internal */
export const GetApiUserCompetitionsCompetition$outboundSchema: z.ZodType<
  GetApiUserCompetitionsCompetition$Outbound,
  z.ZodTypeDef,
  GetApiUserCompetitionsCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  externalUrl: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiUserCompetitionsStatus$outboundSchema.optional(),
  startDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  endDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  crossChainTradingType:
    GetApiUserCompetitionsCrossChainTradingType$outboundSchema.optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  agents: z
    .array(z.lazy(() => GetApiUserCompetitionsAgent$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsCompetition$ {
  /** @deprecated use `GetApiUserCompetitionsCompetition$inboundSchema` instead. */
  export const inboundSchema = GetApiUserCompetitionsCompetition$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsCompetition$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserCompetitionsCompetition$outboundSchema;
  /** @deprecated use `GetApiUserCompetitionsCompetition$Outbound` instead. */
  export type Outbound = GetApiUserCompetitionsCompetition$Outbound;
}

export function getApiUserCompetitionsCompetitionToJSON(
  getApiUserCompetitionsCompetition: GetApiUserCompetitionsCompetition,
): string {
  return JSON.stringify(
    GetApiUserCompetitionsCompetition$outboundSchema.parse(
      getApiUserCompetitionsCompetition,
    ),
  );
}

export function getApiUserCompetitionsCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserCompetitionsCompetition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserCompetitionsCompetition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserCompetitionsCompetition' from JSON`,
  );
}

/** @internal */
export const GetApiUserCompetitionsPagination$inboundSchema: z.ZodType<
  GetApiUserCompetitionsPagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  total: z.number().int().optional(),
});

/** @internal */
export type GetApiUserCompetitionsPagination$Outbound = {
  limit?: number | undefined;
  offset?: number | undefined;
  total?: number | undefined;
};

/** @internal */
export const GetApiUserCompetitionsPagination$outboundSchema: z.ZodType<
  GetApiUserCompetitionsPagination$Outbound,
  z.ZodTypeDef,
  GetApiUserCompetitionsPagination
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  total: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsPagination$ {
  /** @deprecated use `GetApiUserCompetitionsPagination$inboundSchema` instead. */
  export const inboundSchema = GetApiUserCompetitionsPagination$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsPagination$outboundSchema` instead. */
  export const outboundSchema = GetApiUserCompetitionsPagination$outboundSchema;
  /** @deprecated use `GetApiUserCompetitionsPagination$Outbound` instead. */
  export type Outbound = GetApiUserCompetitionsPagination$Outbound;
}

export function getApiUserCompetitionsPaginationToJSON(
  getApiUserCompetitionsPagination: GetApiUserCompetitionsPagination,
): string {
  return JSON.stringify(
    GetApiUserCompetitionsPagination$outboundSchema.parse(
      getApiUserCompetitionsPagination,
    ),
  );
}

export function getApiUserCompetitionsPaginationFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserCompetitionsPagination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserCompetitionsPagination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserCompetitionsPagination' from JSON`,
  );
}

/** @internal */
export const GetApiUserCompetitionsResponse$inboundSchema: z.ZodType<
  GetApiUserCompetitionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competitions: z
    .array(z.lazy(() => GetApiUserCompetitionsCompetition$inboundSchema))
    .optional(),
  total: z.number().int().optional(),
  pagination: z
    .lazy(() => GetApiUserCompetitionsPagination$inboundSchema)
    .optional(),
});

/** @internal */
export type GetApiUserCompetitionsResponse$Outbound = {
  success?: boolean | undefined;
  competitions?: Array<GetApiUserCompetitionsCompetition$Outbound> | undefined;
  total?: number | undefined;
  pagination?: GetApiUserCompetitionsPagination$Outbound | undefined;
};

/** @internal */
export const GetApiUserCompetitionsResponse$outboundSchema: z.ZodType<
  GetApiUserCompetitionsResponse$Outbound,
  z.ZodTypeDef,
  GetApiUserCompetitionsResponse
> = z.object({
  success: z.boolean().optional(),
  competitions: z
    .array(z.lazy(() => GetApiUserCompetitionsCompetition$outboundSchema))
    .optional(),
  total: z.number().int().optional(),
  pagination: z
    .lazy(() => GetApiUserCompetitionsPagination$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserCompetitionsResponse$ {
  /** @deprecated use `GetApiUserCompetitionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiUserCompetitionsResponse$inboundSchema;
  /** @deprecated use `GetApiUserCompetitionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiUserCompetitionsResponse$outboundSchema;
  /** @deprecated use `GetApiUserCompetitionsResponse$Outbound` instead. */
  export type Outbound = GetApiUserCompetitionsResponse$Outbound;
}

export function getApiUserCompetitionsResponseToJSON(
  getApiUserCompetitionsResponse: GetApiUserCompetitionsResponse,
): string {
  return JSON.stringify(
    GetApiUserCompetitionsResponse$outboundSchema.parse(
      getApiUserCompetitionsResponse,
    ),
  );
}

export function getApiUserCompetitionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserCompetitionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserCompetitionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserCompetitionsResponse' from JSON`,
  );
}
