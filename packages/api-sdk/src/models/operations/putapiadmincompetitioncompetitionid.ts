/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of competition
 */
export const PutApiAdminCompetitionCompetitionIdTypeRequest = {
  Trading: "trading",
} as const;
/**
 * The type of competition
 */
export type PutApiAdminCompetitionCompetitionIdTypeRequest = ClosedEnum<
  typeof PutApiAdminCompetitionCompetitionIdTypeRequest
>;

export type PutApiAdminCompetitionCompetitionIdRequestBody = {
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | undefined;
  /**
   * The type of competition
   */
  type?: PutApiAdminCompetitionCompetitionIdTypeRequest | undefined;
  /**
   * External URL for competition details
   */
  externalUrl?: string | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | undefined;
  /**
   * Voting start date
   */
  votingStartDate?: Date | undefined;
  /**
   * Voting end date
   */
  votingEndDate?: Date | undefined;
  /**
   * Rewards for competition placements
   */
  rewards?: { [k: string]: number } | null | undefined;
};

export type PutApiAdminCompetitionCompetitionIdRequest = {
  /**
   * ID of the competition to update
   */
  competitionId: string;
  requestBody: PutApiAdminCompetitionCompetitionIdRequestBody;
};

/**
 * The type of competition
 */
export const PutApiAdminCompetitionCompetitionIdTypeResponse = {
  Trading: "trading",
} as const;
/**
 * The type of competition
 */
export type PutApiAdminCompetitionCompetitionIdTypeResponse = ClosedEnum<
  typeof PutApiAdminCompetitionCompetitionIdTypeResponse
>;

/**
 * Competition status
 */
export const PutApiAdminCompetitionCompetitionIdStatus = {
  Pending: "pending",
  Active: "active",
  Ended: "ended",
} as const;
/**
 * Competition status
 */
export type PutApiAdminCompetitionCompetitionIdStatus = ClosedEnum<
  typeof PutApiAdminCompetitionCompetitionIdStatus
>;

export type PutApiAdminCompetitionCompetitionIdReward = {
  /**
   * Rank of the reward
   */
  rank?: number | undefined;
  /**
   * Reward amount for the given rank
   */
  reward?: number | undefined;
};

export type PutApiAdminCompetitionCompetitionIdCompetition = {
  /**
   * Competition ID
   */
  id?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | undefined;
  /**
   * The type of competition
   */
  type?: PutApiAdminCompetitionCompetitionIdTypeResponse | undefined;
  /**
   * External URL for competition details
   */
  externalUrl?: string | null | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | null | undefined;
  /**
   * Competition start date
   */
  startDate?: Date | null | undefined;
  /**
   * Competition end date
   */
  endDate?: Date | null | undefined;
  /**
   * Voting start date
   */
  votingStartDate?: Date | null | undefined;
  /**
   * Voting end date
   */
  votingEndDate?: Date | null | undefined;
  /**
   * Competition status
   */
  status?: PutApiAdminCompetitionCompetitionIdStatus | undefined;
  /**
   * Rewards for competition placements
   */
  rewards?: Array<PutApiAdminCompetitionCompetitionIdReward> | undefined;
  /**
   * Competition creation date
   */
  createdAt?: Date | undefined;
  /**
   * Competition last update date
   */
  updatedAt?: Date | undefined;
};

/**
 * Competition updated successfully
 */
export type PutApiAdminCompetitionCompetitionIdResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  competition?: PutApiAdminCompetitionCompetitionIdCompetition | undefined;
};

/** @internal */
export const PutApiAdminCompetitionCompetitionIdTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof PutApiAdminCompetitionCompetitionIdTypeRequest
> = z.nativeEnum(PutApiAdminCompetitionCompetitionIdTypeRequest);

/** @internal */
export const PutApiAdminCompetitionCompetitionIdTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof PutApiAdminCompetitionCompetitionIdTypeRequest
> = PutApiAdminCompetitionCompetitionIdTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAdminCompetitionCompetitionIdTypeRequest$ {
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAdminCompetitionCompetitionIdTypeRequest$inboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAdminCompetitionCompetitionIdTypeRequest$outboundSchema;
}

/** @internal */
export const PutApiAdminCompetitionCompetitionIdRequestBody$inboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  type: PutApiAdminCompetitionCompetitionIdTypeRequest$inboundSchema.optional(),
  externalUrl: z.string().optional(),
  imageUrl: z.string().optional(),
  votingStartDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  votingEndDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  rewards: z.nullable(z.record(z.number())).optional(),
});

/** @internal */
export type PutApiAdminCompetitionCompetitionIdRequestBody$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  type?: string | undefined;
  externalUrl?: string | undefined;
  imageUrl?: string | undefined;
  votingStartDate?: string | undefined;
  votingEndDate?: string | undefined;
  rewards?: { [k: string]: number } | null | undefined;
};

/** @internal */
export const PutApiAdminCompetitionCompetitionIdRequestBody$outboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdRequestBody$Outbound,
  z.ZodTypeDef,
  PutApiAdminCompetitionCompetitionIdRequestBody
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  type: PutApiAdminCompetitionCompetitionIdTypeRequest$outboundSchema.optional(),
  externalUrl: z.string().optional(),
  imageUrl: z.string().optional(),
  votingStartDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  votingEndDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  rewards: z.nullable(z.record(z.number())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAdminCompetitionCompetitionIdRequestBody$ {
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAdminCompetitionCompetitionIdRequestBody$inboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAdminCompetitionCompetitionIdRequestBody$outboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdRequestBody$Outbound` instead. */
  export type Outbound =
    PutApiAdminCompetitionCompetitionIdRequestBody$Outbound;
}

export function putApiAdminCompetitionCompetitionIdRequestBodyToJSON(
  putApiAdminCompetitionCompetitionIdRequestBody: PutApiAdminCompetitionCompetitionIdRequestBody,
): string {
  return JSON.stringify(
    PutApiAdminCompetitionCompetitionIdRequestBody$outboundSchema.parse(
      putApiAdminCompetitionCompetitionIdRequestBody,
    ),
  );
}

export function putApiAdminCompetitionCompetitionIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiAdminCompetitionCompetitionIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiAdminCompetitionCompetitionIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiAdminCompetitionCompetitionIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PutApiAdminCompetitionCompetitionIdRequest$inboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    competitionId: z.string(),
    RequestBody: z.lazy(
      () => PutApiAdminCompetitionCompetitionIdRequestBody$inboundSchema,
    ),
  })
  .transform((v) => {
    return remap$(v, {
      RequestBody: "requestBody",
    });
  });

/** @internal */
export type PutApiAdminCompetitionCompetitionIdRequest$Outbound = {
  competitionId: string;
  RequestBody: PutApiAdminCompetitionCompetitionIdRequestBody$Outbound;
};

/** @internal */
export const PutApiAdminCompetitionCompetitionIdRequest$outboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdRequest$Outbound,
  z.ZodTypeDef,
  PutApiAdminCompetitionCompetitionIdRequest
> = z
  .object({
    competitionId: z.string(),
    requestBody: z.lazy(
      () => PutApiAdminCompetitionCompetitionIdRequestBody$outboundSchema,
    ),
  })
  .transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAdminCompetitionCompetitionIdRequest$ {
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAdminCompetitionCompetitionIdRequest$inboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAdminCompetitionCompetitionIdRequest$outboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdRequest$Outbound` instead. */
  export type Outbound = PutApiAdminCompetitionCompetitionIdRequest$Outbound;
}

export function putApiAdminCompetitionCompetitionIdRequestToJSON(
  putApiAdminCompetitionCompetitionIdRequest: PutApiAdminCompetitionCompetitionIdRequest,
): string {
  return JSON.stringify(
    PutApiAdminCompetitionCompetitionIdRequest$outboundSchema.parse(
      putApiAdminCompetitionCompetitionIdRequest,
    ),
  );
}

export function putApiAdminCompetitionCompetitionIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiAdminCompetitionCompetitionIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiAdminCompetitionCompetitionIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiAdminCompetitionCompetitionIdRequest' from JSON`,
  );
}

/** @internal */
export const PutApiAdminCompetitionCompetitionIdTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof PutApiAdminCompetitionCompetitionIdTypeResponse
> = z.nativeEnum(PutApiAdminCompetitionCompetitionIdTypeResponse);

/** @internal */
export const PutApiAdminCompetitionCompetitionIdTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof PutApiAdminCompetitionCompetitionIdTypeResponse
> = PutApiAdminCompetitionCompetitionIdTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAdminCompetitionCompetitionIdTypeResponse$ {
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAdminCompetitionCompetitionIdTypeResponse$inboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAdminCompetitionCompetitionIdTypeResponse$outboundSchema;
}

/** @internal */
export const PutApiAdminCompetitionCompetitionIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PutApiAdminCompetitionCompetitionIdStatus
> = z.nativeEnum(PutApiAdminCompetitionCompetitionIdStatus);

/** @internal */
export const PutApiAdminCompetitionCompetitionIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof PutApiAdminCompetitionCompetitionIdStatus
> = PutApiAdminCompetitionCompetitionIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAdminCompetitionCompetitionIdStatus$ {
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAdminCompetitionCompetitionIdStatus$inboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAdminCompetitionCompetitionIdStatus$outboundSchema;
}

/** @internal */
export const PutApiAdminCompetitionCompetitionIdReward$inboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdReward,
  z.ZodTypeDef,
  unknown
> = z.object({
  rank: z.number().optional(),
  reward: z.number().optional(),
});

/** @internal */
export type PutApiAdminCompetitionCompetitionIdReward$Outbound = {
  rank?: number | undefined;
  reward?: number | undefined;
};

/** @internal */
export const PutApiAdminCompetitionCompetitionIdReward$outboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdReward$Outbound,
  z.ZodTypeDef,
  PutApiAdminCompetitionCompetitionIdReward
> = z.object({
  rank: z.number().optional(),
  reward: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAdminCompetitionCompetitionIdReward$ {
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdReward$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAdminCompetitionCompetitionIdReward$inboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdReward$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAdminCompetitionCompetitionIdReward$outboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdReward$Outbound` instead. */
  export type Outbound = PutApiAdminCompetitionCompetitionIdReward$Outbound;
}

export function putApiAdminCompetitionCompetitionIdRewardToJSON(
  putApiAdminCompetitionCompetitionIdReward: PutApiAdminCompetitionCompetitionIdReward,
): string {
  return JSON.stringify(
    PutApiAdminCompetitionCompetitionIdReward$outboundSchema.parse(
      putApiAdminCompetitionCompetitionIdReward,
    ),
  );
}

export function putApiAdminCompetitionCompetitionIdRewardFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiAdminCompetitionCompetitionIdReward,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiAdminCompetitionCompetitionIdReward$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiAdminCompetitionCompetitionIdReward' from JSON`,
  );
}

/** @internal */
export const PutApiAdminCompetitionCompetitionIdCompetition$inboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  type: PutApiAdminCompetitionCompetitionIdTypeResponse$inboundSchema.optional(),
  externalUrl: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  startDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  endDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  votingStartDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  votingEndDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  status: PutApiAdminCompetitionCompetitionIdStatus$inboundSchema.optional(),
  rewards: z
    .array(
      z.lazy(() => PutApiAdminCompetitionCompetitionIdReward$inboundSchema),
    )
    .optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiAdminCompetitionCompetitionIdCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  type?: string | undefined;
  externalUrl?: string | null | undefined;
  imageUrl?: string | null | undefined;
  startDate?: string | null | undefined;
  endDate?: string | null | undefined;
  votingStartDate?: string | null | undefined;
  votingEndDate?: string | null | undefined;
  status?: string | undefined;
  rewards?:
    | Array<PutApiAdminCompetitionCompetitionIdReward$Outbound>
    | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiAdminCompetitionCompetitionIdCompetition$outboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdCompetition$Outbound,
  z.ZodTypeDef,
  PutApiAdminCompetitionCompetitionIdCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  type: PutApiAdminCompetitionCompetitionIdTypeResponse$outboundSchema.optional(),
  externalUrl: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
  endDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
  votingStartDate: z
    .nullable(z.date().transform((v) => v.toISOString()))
    .optional(),
  votingEndDate: z
    .nullable(z.date().transform((v) => v.toISOString()))
    .optional(),
  status: PutApiAdminCompetitionCompetitionIdStatus$outboundSchema.optional(),
  rewards: z
    .array(
      z.lazy(() => PutApiAdminCompetitionCompetitionIdReward$outboundSchema),
    )
    .optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAdminCompetitionCompetitionIdCompetition$ {
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdCompetition$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAdminCompetitionCompetitionIdCompetition$inboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdCompetition$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAdminCompetitionCompetitionIdCompetition$outboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdCompetition$Outbound` instead. */
  export type Outbound =
    PutApiAdminCompetitionCompetitionIdCompetition$Outbound;
}

export function putApiAdminCompetitionCompetitionIdCompetitionToJSON(
  putApiAdminCompetitionCompetitionIdCompetition: PutApiAdminCompetitionCompetitionIdCompetition,
): string {
  return JSON.stringify(
    PutApiAdminCompetitionCompetitionIdCompetition$outboundSchema.parse(
      putApiAdminCompetitionCompetitionIdCompetition,
    ),
  );
}

export function putApiAdminCompetitionCompetitionIdCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiAdminCompetitionCompetitionIdCompetition,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiAdminCompetitionCompetitionIdCompetition$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiAdminCompetitionCompetitionIdCompetition' from JSON`,
  );
}

/** @internal */
export const PutApiAdminCompetitionCompetitionIdResponse$inboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => PutApiAdminCompetitionCompetitionIdCompetition$inboundSchema)
    .optional(),
});

/** @internal */
export type PutApiAdminCompetitionCompetitionIdResponse$Outbound = {
  success?: boolean | undefined;
  competition?:
    | PutApiAdminCompetitionCompetitionIdCompetition$Outbound
    | undefined;
};

/** @internal */
export const PutApiAdminCompetitionCompetitionIdResponse$outboundSchema: z.ZodType<
  PutApiAdminCompetitionCompetitionIdResponse$Outbound,
  z.ZodTypeDef,
  PutApiAdminCompetitionCompetitionIdResponse
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => PutApiAdminCompetitionCompetitionIdCompetition$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiAdminCompetitionCompetitionIdResponse$ {
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutApiAdminCompetitionCompetitionIdResponse$inboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutApiAdminCompetitionCompetitionIdResponse$outboundSchema;
  /** @deprecated use `PutApiAdminCompetitionCompetitionIdResponse$Outbound` instead. */
  export type Outbound = PutApiAdminCompetitionCompetitionIdResponse$Outbound;
}

export function putApiAdminCompetitionCompetitionIdResponseToJSON(
  putApiAdminCompetitionCompetitionIdResponse: PutApiAdminCompetitionCompetitionIdResponse,
): string {
  return JSON.stringify(
    PutApiAdminCompetitionCompetitionIdResponse$outboundSchema.parse(
      putApiAdminCompetitionCompetitionIdResponse,
    ),
  );
}

export function putApiAdminCompetitionCompetitionIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiAdminCompetitionCompetitionIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiAdminCompetitionCompetitionIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiAdminCompetitionCompetitionIdResponse' from JSON`,
  );
}
