/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAdminTeamsSearchRequest = {
  /**
   * Partial match for team email
   */
  email?: string | undefined;
  /**
   * Partial match for team name
   */
  name?: string | undefined;
  /**
   * Partial match for wallet address
   */
  walletAddress?: string | undefined;
  /**
   * Partial match for contact person name
   */
  contactPerson?: string | undefined;
  /**
   * Filter by active status (true/false)
   */
  active?: boolean | undefined;
  /**
   * Whether to include admin accounts in results (default is false)
   */
  includeAdmins?: boolean | undefined;
};

/**
 * Optional agent metadata
 */
export type GetApiAdminTeamsSearchMetadata = {};

export type GetApiAdminTeamsSearchTeam = {
  /**
   * Team ID
   */
  id?: string | undefined;
  /**
   * Team name
   */
  name?: string | undefined;
  /**
   * Team email
   */
  email?: string | undefined;
  /**
   * Contact person name
   */
  contactPerson?: string | undefined;
  /**
   * Ethereum wallet address
   */
  walletAddress?: string | undefined;
  /**
   * Whether the team is active
   */
  active?: boolean | undefined;
  /**
   * Reason for deactivation if inactive
   */
  deactivationReason?: string | null | undefined;
  /**
   * Date of deactivation if inactive
   */
  deactivationDate?: Date | null | undefined;
  /**
   * URL to the team's image
   */
  imageUrl?: string | null | undefined;
  /**
   * Whether the team has admin privileges
   */
  isAdmin?: boolean | undefined;
  /**
   * Optional agent metadata
   */
  metadata?: GetApiAdminTeamsSearchMetadata | null | undefined;
  /**
   * Account creation timestamp
   */
  createdAt?: Date | undefined;
  /**
   * Account update timestamp
   */
  updatedAt?: Date | undefined;
};

/**
 * List of teams matching search criteria
 */
export type GetApiAdminTeamsSearchResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  teams?: Array<GetApiAdminTeamsSearchTeam> | undefined;
};

/** @internal */
export const GetApiAdminTeamsSearchRequest$inboundSchema: z.ZodType<
  GetApiAdminTeamsSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  name: z.string().optional(),
  walletAddress: z.string().optional(),
  contactPerson: z.string().optional(),
  active: z.boolean().optional(),
  includeAdmins: z.boolean().optional(),
});

/** @internal */
export type GetApiAdminTeamsSearchRequest$Outbound = {
  email?: string | undefined;
  name?: string | undefined;
  walletAddress?: string | undefined;
  contactPerson?: string | undefined;
  active?: boolean | undefined;
  includeAdmins?: boolean | undefined;
};

/** @internal */
export const GetApiAdminTeamsSearchRequest$outboundSchema: z.ZodType<
  GetApiAdminTeamsSearchRequest$Outbound,
  z.ZodTypeDef,
  GetApiAdminTeamsSearchRequest
> = z.object({
  email: z.string().optional(),
  name: z.string().optional(),
  walletAddress: z.string().optional(),
  contactPerson: z.string().optional(),
  active: z.boolean().optional(),
  includeAdmins: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminTeamsSearchRequest$ {
  /** @deprecated use `GetApiAdminTeamsSearchRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminTeamsSearchRequest$inboundSchema;
  /** @deprecated use `GetApiAdminTeamsSearchRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminTeamsSearchRequest$outboundSchema;
  /** @deprecated use `GetApiAdminTeamsSearchRequest$Outbound` instead. */
  export type Outbound = GetApiAdminTeamsSearchRequest$Outbound;
}

export function getApiAdminTeamsSearchRequestToJSON(
  getApiAdminTeamsSearchRequest: GetApiAdminTeamsSearchRequest,
): string {
  return JSON.stringify(
    GetApiAdminTeamsSearchRequest$outboundSchema.parse(
      getApiAdminTeamsSearchRequest,
    ),
  );
}

export function getApiAdminTeamsSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminTeamsSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminTeamsSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminTeamsSearchRequest' from JSON`,
  );
}

/** @internal */
export const GetApiAdminTeamsSearchMetadata$inboundSchema: z.ZodType<
  GetApiAdminTeamsSearchMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiAdminTeamsSearchMetadata$Outbound = {};

/** @internal */
export const GetApiAdminTeamsSearchMetadata$outboundSchema: z.ZodType<
  GetApiAdminTeamsSearchMetadata$Outbound,
  z.ZodTypeDef,
  GetApiAdminTeamsSearchMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminTeamsSearchMetadata$ {
  /** @deprecated use `GetApiAdminTeamsSearchMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminTeamsSearchMetadata$inboundSchema;
  /** @deprecated use `GetApiAdminTeamsSearchMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminTeamsSearchMetadata$outboundSchema;
  /** @deprecated use `GetApiAdminTeamsSearchMetadata$Outbound` instead. */
  export type Outbound = GetApiAdminTeamsSearchMetadata$Outbound;
}

export function getApiAdminTeamsSearchMetadataToJSON(
  getApiAdminTeamsSearchMetadata: GetApiAdminTeamsSearchMetadata,
): string {
  return JSON.stringify(
    GetApiAdminTeamsSearchMetadata$outboundSchema.parse(
      getApiAdminTeamsSearchMetadata,
    ),
  );
}

export function getApiAdminTeamsSearchMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminTeamsSearchMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminTeamsSearchMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminTeamsSearchMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiAdminTeamsSearchTeam$inboundSchema: z.ZodType<
  GetApiAdminTeamsSearchTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  walletAddress: z.string().optional(),
  active: z.boolean().optional(),
  deactivationReason: z.nullable(z.string()).optional(),
  deactivationDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  imageUrl: z.nullable(z.string()).optional(),
  isAdmin: z.boolean().optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAdminTeamsSearchMetadata$inboundSchema))
    .optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiAdminTeamsSearchTeam$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  contactPerson?: string | undefined;
  walletAddress?: string | undefined;
  active?: boolean | undefined;
  deactivationReason?: string | null | undefined;
  deactivationDate?: string | null | undefined;
  imageUrl?: string | null | undefined;
  isAdmin?: boolean | undefined;
  metadata?: GetApiAdminTeamsSearchMetadata$Outbound | null | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiAdminTeamsSearchTeam$outboundSchema: z.ZodType<
  GetApiAdminTeamsSearchTeam$Outbound,
  z.ZodTypeDef,
  GetApiAdminTeamsSearchTeam
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  walletAddress: z.string().optional(),
  active: z.boolean().optional(),
  deactivationReason: z.nullable(z.string()).optional(),
  deactivationDate: z
    .nullable(z.date().transform((v) => v.toISOString()))
    .optional(),
  imageUrl: z.nullable(z.string()).optional(),
  isAdmin: z.boolean().optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAdminTeamsSearchMetadata$outboundSchema))
    .optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminTeamsSearchTeam$ {
  /** @deprecated use `GetApiAdminTeamsSearchTeam$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminTeamsSearchTeam$inboundSchema;
  /** @deprecated use `GetApiAdminTeamsSearchTeam$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminTeamsSearchTeam$outboundSchema;
  /** @deprecated use `GetApiAdminTeamsSearchTeam$Outbound` instead. */
  export type Outbound = GetApiAdminTeamsSearchTeam$Outbound;
}

export function getApiAdminTeamsSearchTeamToJSON(
  getApiAdminTeamsSearchTeam: GetApiAdminTeamsSearchTeam,
): string {
  return JSON.stringify(
    GetApiAdminTeamsSearchTeam$outboundSchema.parse(getApiAdminTeamsSearchTeam),
  );
}

export function getApiAdminTeamsSearchTeamFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminTeamsSearchTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminTeamsSearchTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminTeamsSearchTeam' from JSON`,
  );
}

/** @internal */
export const GetApiAdminTeamsSearchResponse$inboundSchema: z.ZodType<
  GetApiAdminTeamsSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  teams: z
    .array(z.lazy(() => GetApiAdminTeamsSearchTeam$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiAdminTeamsSearchResponse$Outbound = {
  success?: boolean | undefined;
  teams?: Array<GetApiAdminTeamsSearchTeam$Outbound> | undefined;
};

/** @internal */
export const GetApiAdminTeamsSearchResponse$outboundSchema: z.ZodType<
  GetApiAdminTeamsSearchResponse$Outbound,
  z.ZodTypeDef,
  GetApiAdminTeamsSearchResponse
> = z.object({
  success: z.boolean().optional(),
  teams: z
    .array(z.lazy(() => GetApiAdminTeamsSearchTeam$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminTeamsSearchResponse$ {
  /** @deprecated use `GetApiAdminTeamsSearchResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminTeamsSearchResponse$inboundSchema;
  /** @deprecated use `GetApiAdminTeamsSearchResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminTeamsSearchResponse$outboundSchema;
  /** @deprecated use `GetApiAdminTeamsSearchResponse$Outbound` instead. */
  export type Outbound = GetApiAdminTeamsSearchResponse$Outbound;
}

export function getApiAdminTeamsSearchResponseToJSON(
  getApiAdminTeamsSearchResponse: GetApiAdminTeamsSearchResponse,
): string {
  return JSON.stringify(
    GetApiAdminTeamsSearchResponse$outboundSchema.parse(
      getApiAdminTeamsSearchResponse,
    ),
  );
}

export function getApiAdminTeamsSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminTeamsSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminTeamsSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminTeamsSearchResponse' from JSON`,
  );
}
