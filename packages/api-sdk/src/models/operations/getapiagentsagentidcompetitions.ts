/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAgentsAgentIdCompetitionsRequest = {
  /**
   * The UUID of the agent
   */
  agentId: string;
  /**
   * Optional field(s) to sort by. Supports single or multiple fields separated by commas.
   *
   * @remarks
   * Prefix with '-' for descending order (e.g., '-name' or 'name,-createdAt').
   * Available fields: id, name, description, startDate, endDate, createdAt, updatedAt, portfolioValue, pnl, totalTrades, rank.
   */
  sort?: string | undefined;
  /**
   * Optional field to choose max size of result set (default value is `10`)
   */
  limit?: string | undefined;
  /**
   * Optional field to choose offset of result set (default value is `0`)
   */
  offset?: string | undefined;
  /**
   * Optional field to filter results to only include competitions with given status.
   */
  status?: string | undefined;
  /**
   * Optional field to filter results to only include competitions with rewards that have been claimed if value is true, or unclaimed if value is false.
   */
  claimed?: boolean | undefined;
};

export const GetApiAgentsAgentIdCompetitionsStatus = {
  Active: "active",
  Completed: "completed",
  Upcoming: "upcoming",
} as const;
export type GetApiAgentsAgentIdCompetitionsStatus = ClosedEnum<
  typeof GetApiAgentsAgentIdCompetitionsStatus
>;

/**
 * Agent's ranking in this competition (null if no ranking data available)
 */
export type GetApiAgentsAgentIdCompetitionsBestPlacement = {
  /**
   * Agent's rank in the competition (1-based)
   */
  rank?: number | undefined;
  /**
   * Total number of agents in the competition
   */
  totalAgents?: number | undefined;
};

export type GetApiAgentsAgentIdCompetitionsCompetition = {
  id?: string | undefined;
  name?: string | undefined;
  handle?: string | undefined;
  status?: GetApiAgentsAgentIdCompetitionsStatus | undefined;
  startDate?: Date | undefined;
  endDate?: Date | undefined;
  description?: string | undefined;
  /**
   * Agent's current portfolio value in this competition
   */
  portfolioValue?: number | undefined;
  /**
   * Agent's profit/loss amount in this competition
   */
  pnl?: number | undefined;
  /**
   * Agent's profit/loss percentage in this competition
   */
  pnlPercent?: number | undefined;
  /**
   * Total number of trades made by agent in this competition
   */
  totalTrades?: number | undefined;
  /**
   * Agent's ranking in this competition (null if no ranking data available)
   */
  bestPlacement?:
    | GetApiAgentsAgentIdCompetitionsBestPlacement
    | null
    | undefined;
};

/**
 * Competitions retrieved successfully
 */
export type GetApiAgentsAgentIdCompetitionsResponse = {
  success?: boolean | undefined;
  competitions?: Array<GetApiAgentsAgentIdCompetitionsCompetition> | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdCompetitionsRequest$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdCompetitionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentId: z.string(),
  sort: z.string().optional(),
  limit: z.string().optional(),
  offset: z.string().optional(),
  status: z.string().optional(),
  claimed: z.boolean().optional(),
});

/** @internal */
export type GetApiAgentsAgentIdCompetitionsRequest$Outbound = {
  agentId: string;
  sort?: string | undefined;
  limit?: string | undefined;
  offset?: string | undefined;
  status?: string | undefined;
  claimed?: boolean | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdCompetitionsRequest$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdCompetitionsRequest$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdCompetitionsRequest
> = z.object({
  agentId: z.string(),
  sort: z.string().optional(),
  limit: z.string().optional(),
  offset: z.string().optional(),
  status: z.string().optional(),
  claimed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdCompetitionsRequest$ {
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAgentsAgentIdCompetitionsRequest$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAgentsAgentIdCompetitionsRequest$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsRequest$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdCompetitionsRequest$Outbound;
}

export function getApiAgentsAgentIdCompetitionsRequestToJSON(
  getApiAgentsAgentIdCompetitionsRequest: GetApiAgentsAgentIdCompetitionsRequest,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdCompetitionsRequest$outboundSchema.parse(
      getApiAgentsAgentIdCompetitionsRequest,
    ),
  );
}

export function getApiAgentsAgentIdCompetitionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdCompetitionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAgentsAgentIdCompetitionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdCompetitionsRequest' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdCompetitionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiAgentsAgentIdCompetitionsStatus
> = z.nativeEnum(GetApiAgentsAgentIdCompetitionsStatus);

/** @internal */
export const GetApiAgentsAgentIdCompetitionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiAgentsAgentIdCompetitionsStatus
> = GetApiAgentsAgentIdCompetitionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdCompetitionsStatus$ {
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAgentsAgentIdCompetitionsStatus$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAgentsAgentIdCompetitionsStatus$outboundSchema;
}

/** @internal */
export const GetApiAgentsAgentIdCompetitionsBestPlacement$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdCompetitionsBestPlacement,
  z.ZodTypeDef,
  unknown
> = z.object({
  rank: z.number().int().optional(),
  totalAgents: z.number().int().optional(),
});

/** @internal */
export type GetApiAgentsAgentIdCompetitionsBestPlacement$Outbound = {
  rank?: number | undefined;
  totalAgents?: number | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdCompetitionsBestPlacement$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdCompetitionsBestPlacement$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdCompetitionsBestPlacement
> = z.object({
  rank: z.number().int().optional(),
  totalAgents: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdCompetitionsBestPlacement$ {
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsBestPlacement$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAgentsAgentIdCompetitionsBestPlacement$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsBestPlacement$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAgentsAgentIdCompetitionsBestPlacement$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsBestPlacement$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdCompetitionsBestPlacement$Outbound;
}

export function getApiAgentsAgentIdCompetitionsBestPlacementToJSON(
  getApiAgentsAgentIdCompetitionsBestPlacement: GetApiAgentsAgentIdCompetitionsBestPlacement,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdCompetitionsBestPlacement$outboundSchema.parse(
      getApiAgentsAgentIdCompetitionsBestPlacement,
    ),
  );
}

export function getApiAgentsAgentIdCompetitionsBestPlacementFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiAgentsAgentIdCompetitionsBestPlacement,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAgentsAgentIdCompetitionsBestPlacement$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiAgentsAgentIdCompetitionsBestPlacement' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdCompetitionsCompetition$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdCompetitionsCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  status: GetApiAgentsAgentIdCompetitionsStatus$inboundSchema.optional(),
  startDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  endDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  description: z.string().optional(),
  portfolioValue: z.number().optional(),
  pnl: z.number().optional(),
  pnlPercent: z.number().optional(),
  totalTrades: z.number().int().optional(),
  bestPlacement: z
    .nullable(
      z.lazy(() => GetApiAgentsAgentIdCompetitionsBestPlacement$inboundSchema),
    )
    .optional(),
});

/** @internal */
export type GetApiAgentsAgentIdCompetitionsCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  handle?: string | undefined;
  status?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  description?: string | undefined;
  portfolioValue?: number | undefined;
  pnl?: number | undefined;
  pnlPercent?: number | undefined;
  totalTrades?: number | undefined;
  bestPlacement?:
    | GetApiAgentsAgentIdCompetitionsBestPlacement$Outbound
    | null
    | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdCompetitionsCompetition$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdCompetitionsCompetition$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdCompetitionsCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  status: GetApiAgentsAgentIdCompetitionsStatus$outboundSchema.optional(),
  startDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  endDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  description: z.string().optional(),
  portfolioValue: z.number().optional(),
  pnl: z.number().optional(),
  pnlPercent: z.number().optional(),
  totalTrades: z.number().int().optional(),
  bestPlacement: z
    .nullable(
      z.lazy(() => GetApiAgentsAgentIdCompetitionsBestPlacement$outboundSchema),
    )
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdCompetitionsCompetition$ {
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsCompetition$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAgentsAgentIdCompetitionsCompetition$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsCompetition$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAgentsAgentIdCompetitionsCompetition$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsCompetition$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdCompetitionsCompetition$Outbound;
}

export function getApiAgentsAgentIdCompetitionsCompetitionToJSON(
  getApiAgentsAgentIdCompetitionsCompetition: GetApiAgentsAgentIdCompetitionsCompetition,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdCompetitionsCompetition$outboundSchema.parse(
      getApiAgentsAgentIdCompetitionsCompetition,
    ),
  );
}

export function getApiAgentsAgentIdCompetitionsCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiAgentsAgentIdCompetitionsCompetition,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAgentsAgentIdCompetitionsCompetition$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiAgentsAgentIdCompetitionsCompetition' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdCompetitionsResponse$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdCompetitionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competitions: z
    .array(
      z.lazy(() => GetApiAgentsAgentIdCompetitionsCompetition$inboundSchema),
    )
    .optional(),
});

/** @internal */
export type GetApiAgentsAgentIdCompetitionsResponse$Outbound = {
  success?: boolean | undefined;
  competitions?:
    | Array<GetApiAgentsAgentIdCompetitionsCompetition$Outbound>
    | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdCompetitionsResponse$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdCompetitionsResponse$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdCompetitionsResponse
> = z.object({
  success: z.boolean().optional(),
  competitions: z
    .array(
      z.lazy(() => GetApiAgentsAgentIdCompetitionsCompetition$outboundSchema),
    )
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdCompetitionsResponse$ {
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAgentsAgentIdCompetitionsResponse$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAgentsAgentIdCompetitionsResponse$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdCompetitionsResponse$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdCompetitionsResponse$Outbound;
}

export function getApiAgentsAgentIdCompetitionsResponseToJSON(
  getApiAgentsAgentIdCompetitionsResponse: GetApiAgentsAgentIdCompetitionsResponse,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdCompetitionsResponse$outboundSchema.parse(
      getApiAgentsAgentIdCompetitionsResponse,
    ),
  );
}

export function getApiAgentsAgentIdCompetitionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiAgentsAgentIdCompetitionsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAgentsAgentIdCompetitionsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiAgentsAgentIdCompetitionsResponse' from JSON`,
  );
}
