/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetApiLeaderboardType = {
  Trading: "trading",
} as const;
export type GetApiLeaderboardType = ClosedEnum<typeof GetApiLeaderboardType>;

export type GetApiLeaderboardRequest = {
  type?: GetApiLeaderboardType | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

export type GetApiLeaderboardStats = {
  /**
   * Total number of active agents
   */
  activeAgents?: number | undefined;
  /**
   * Total number of trades
   */
  totalTrades?: number | undefined;
  /**
   * Total volume of trades
   */
  totalVolume?: number | undefined;
  /**
   * Total number of competitions
   */
  totalCompetitions?: number | undefined;
  /**
   * Total number of votes
   */
  totalVotes?: number | undefined;
};

/**
 * Agent metadata
 */
export type GetApiLeaderboardMetadata = {};

export type GetApiLeaderboardAgent = {
  /**
   * Agent ID
   */
  id?: string | undefined;
  /**
   * Agent name
   */
  name?: string | undefined;
  /**
   * URL of agent's image
   */
  imageUrl?: string | null | undefined;
  /**
   * Agent metadata
   */
  metadata?: GetApiLeaderboardMetadata | undefined;
  /**
   * Agent rank
   */
  rank?: number | undefined;
  /**
   * Agent score
   */
  score?: number | undefined;
  /**
   * Number of competitions the agent has participated in
   */
  numCompetitions?: number | undefined;
  /**
   * Number of votes the agent has received
   */
  voteCount?: number | undefined;
};

export type GetApiLeaderboardPagination = {
  /**
   * Total number of agents across all active and ended competitions
   */
  total?: number | undefined;
  /**
   * Number of agents per page
   */
  limit?: number | undefined;
  /**
   * Number of agents to skip
   */
  offset?: number | undefined;
  /**
   * Whether there are more agents to fetch
   */
  hasMore?: boolean | undefined;
};

/**
 * Global leaderboard data
 */
export type GetApiLeaderboardResponse = {
  /**
   * Whether the request was successful
   */
  success?: boolean | undefined;
  stats?: GetApiLeaderboardStats | undefined;
  agents?: Array<GetApiLeaderboardAgent> | undefined;
  pagination?: GetApiLeaderboardPagination | undefined;
};

/** @internal */
export const GetApiLeaderboardType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiLeaderboardType
> = z.nativeEnum(GetApiLeaderboardType);

/** @internal */
export const GetApiLeaderboardType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiLeaderboardType
> = GetApiLeaderboardType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeaderboardType$ {
  /** @deprecated use `GetApiLeaderboardType$inboundSchema` instead. */
  export const inboundSchema = GetApiLeaderboardType$inboundSchema;
  /** @deprecated use `GetApiLeaderboardType$outboundSchema` instead. */
  export const outboundSchema = GetApiLeaderboardType$outboundSchema;
}

/** @internal */
export const GetApiLeaderboardRequest$inboundSchema: z.ZodType<
  GetApiLeaderboardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetApiLeaderboardType$inboundSchema.optional(),
  limit: z.number().default(50),
  offset: z.number().default(0),
});

/** @internal */
export type GetApiLeaderboardRequest$Outbound = {
  type?: string | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const GetApiLeaderboardRequest$outboundSchema: z.ZodType<
  GetApiLeaderboardRequest$Outbound,
  z.ZodTypeDef,
  GetApiLeaderboardRequest
> = z.object({
  type: GetApiLeaderboardType$outboundSchema.optional(),
  limit: z.number().default(50),
  offset: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeaderboardRequest$ {
  /** @deprecated use `GetApiLeaderboardRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiLeaderboardRequest$inboundSchema;
  /** @deprecated use `GetApiLeaderboardRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiLeaderboardRequest$outboundSchema;
  /** @deprecated use `GetApiLeaderboardRequest$Outbound` instead. */
  export type Outbound = GetApiLeaderboardRequest$Outbound;
}

export function getApiLeaderboardRequestToJSON(
  getApiLeaderboardRequest: GetApiLeaderboardRequest,
): string {
  return JSON.stringify(
    GetApiLeaderboardRequest$outboundSchema.parse(getApiLeaderboardRequest),
  );
}

export function getApiLeaderboardRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiLeaderboardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiLeaderboardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeaderboardRequest' from JSON`,
  );
}

/** @internal */
export const GetApiLeaderboardStats$inboundSchema: z.ZodType<
  GetApiLeaderboardStats,
  z.ZodTypeDef,
  unknown
> = z.object({
  activeAgents: z.number().optional(),
  totalTrades: z.number().optional(),
  totalVolume: z.number().optional(),
  totalCompetitions: z.number().optional(),
  totalVotes: z.number().optional(),
});

/** @internal */
export type GetApiLeaderboardStats$Outbound = {
  activeAgents?: number | undefined;
  totalTrades?: number | undefined;
  totalVolume?: number | undefined;
  totalCompetitions?: number | undefined;
  totalVotes?: number | undefined;
};

/** @internal */
export const GetApiLeaderboardStats$outboundSchema: z.ZodType<
  GetApiLeaderboardStats$Outbound,
  z.ZodTypeDef,
  GetApiLeaderboardStats
> = z.object({
  activeAgents: z.number().optional(),
  totalTrades: z.number().optional(),
  totalVolume: z.number().optional(),
  totalCompetitions: z.number().optional(),
  totalVotes: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeaderboardStats$ {
  /** @deprecated use `GetApiLeaderboardStats$inboundSchema` instead. */
  export const inboundSchema = GetApiLeaderboardStats$inboundSchema;
  /** @deprecated use `GetApiLeaderboardStats$outboundSchema` instead. */
  export const outboundSchema = GetApiLeaderboardStats$outboundSchema;
  /** @deprecated use `GetApiLeaderboardStats$Outbound` instead. */
  export type Outbound = GetApiLeaderboardStats$Outbound;
}

export function getApiLeaderboardStatsToJSON(
  getApiLeaderboardStats: GetApiLeaderboardStats,
): string {
  return JSON.stringify(
    GetApiLeaderboardStats$outboundSchema.parse(getApiLeaderboardStats),
  );
}

export function getApiLeaderboardStatsFromJSON(
  jsonString: string,
): SafeParseResult<GetApiLeaderboardStats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiLeaderboardStats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeaderboardStats' from JSON`,
  );
}

/** @internal */
export const GetApiLeaderboardMetadata$inboundSchema: z.ZodType<
  GetApiLeaderboardMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiLeaderboardMetadata$Outbound = {};

/** @internal */
export const GetApiLeaderboardMetadata$outboundSchema: z.ZodType<
  GetApiLeaderboardMetadata$Outbound,
  z.ZodTypeDef,
  GetApiLeaderboardMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeaderboardMetadata$ {
  /** @deprecated use `GetApiLeaderboardMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiLeaderboardMetadata$inboundSchema;
  /** @deprecated use `GetApiLeaderboardMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiLeaderboardMetadata$outboundSchema;
  /** @deprecated use `GetApiLeaderboardMetadata$Outbound` instead. */
  export type Outbound = GetApiLeaderboardMetadata$Outbound;
}

export function getApiLeaderboardMetadataToJSON(
  getApiLeaderboardMetadata: GetApiLeaderboardMetadata,
): string {
  return JSON.stringify(
    GetApiLeaderboardMetadata$outboundSchema.parse(getApiLeaderboardMetadata),
  );
}

export function getApiLeaderboardMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiLeaderboardMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiLeaderboardMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeaderboardMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiLeaderboardAgent$inboundSchema: z.ZodType<
  GetApiLeaderboardAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z.lazy(() => GetApiLeaderboardMetadata$inboundSchema).optional(),
  rank: z.number().optional(),
  score: z.number().optional(),
  numCompetitions: z.number().optional(),
  voteCount: z.number().optional(),
});

/** @internal */
export type GetApiLeaderboardAgent$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  imageUrl?: string | null | undefined;
  metadata?: GetApiLeaderboardMetadata$Outbound | undefined;
  rank?: number | undefined;
  score?: number | undefined;
  numCompetitions?: number | undefined;
  voteCount?: number | undefined;
};

/** @internal */
export const GetApiLeaderboardAgent$outboundSchema: z.ZodType<
  GetApiLeaderboardAgent$Outbound,
  z.ZodTypeDef,
  GetApiLeaderboardAgent
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z.lazy(() => GetApiLeaderboardMetadata$outboundSchema).optional(),
  rank: z.number().optional(),
  score: z.number().optional(),
  numCompetitions: z.number().optional(),
  voteCount: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeaderboardAgent$ {
  /** @deprecated use `GetApiLeaderboardAgent$inboundSchema` instead. */
  export const inboundSchema = GetApiLeaderboardAgent$inboundSchema;
  /** @deprecated use `GetApiLeaderboardAgent$outboundSchema` instead. */
  export const outboundSchema = GetApiLeaderboardAgent$outboundSchema;
  /** @deprecated use `GetApiLeaderboardAgent$Outbound` instead. */
  export type Outbound = GetApiLeaderboardAgent$Outbound;
}

export function getApiLeaderboardAgentToJSON(
  getApiLeaderboardAgent: GetApiLeaderboardAgent,
): string {
  return JSON.stringify(
    GetApiLeaderboardAgent$outboundSchema.parse(getApiLeaderboardAgent),
  );
}

export function getApiLeaderboardAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetApiLeaderboardAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiLeaderboardAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeaderboardAgent' from JSON`,
  );
}

/** @internal */
export const GetApiLeaderboardPagination$inboundSchema: z.ZodType<
  GetApiLeaderboardPagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  hasMore: z.boolean().optional(),
});

/** @internal */
export type GetApiLeaderboardPagination$Outbound = {
  total?: number | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  hasMore?: boolean | undefined;
};

/** @internal */
export const GetApiLeaderboardPagination$outboundSchema: z.ZodType<
  GetApiLeaderboardPagination$Outbound,
  z.ZodTypeDef,
  GetApiLeaderboardPagination
> = z.object({
  total: z.number().optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  hasMore: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeaderboardPagination$ {
  /** @deprecated use `GetApiLeaderboardPagination$inboundSchema` instead. */
  export const inboundSchema = GetApiLeaderboardPagination$inboundSchema;
  /** @deprecated use `GetApiLeaderboardPagination$outboundSchema` instead. */
  export const outboundSchema = GetApiLeaderboardPagination$outboundSchema;
  /** @deprecated use `GetApiLeaderboardPagination$Outbound` instead. */
  export type Outbound = GetApiLeaderboardPagination$Outbound;
}

export function getApiLeaderboardPaginationToJSON(
  getApiLeaderboardPagination: GetApiLeaderboardPagination,
): string {
  return JSON.stringify(
    GetApiLeaderboardPagination$outboundSchema.parse(
      getApiLeaderboardPagination,
    ),
  );
}

export function getApiLeaderboardPaginationFromJSON(
  jsonString: string,
): SafeParseResult<GetApiLeaderboardPagination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiLeaderboardPagination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeaderboardPagination' from JSON`,
  );
}

/** @internal */
export const GetApiLeaderboardResponse$inboundSchema: z.ZodType<
  GetApiLeaderboardResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  stats: z.lazy(() => GetApiLeaderboardStats$inboundSchema).optional(),
  agents: z
    .array(z.lazy(() => GetApiLeaderboardAgent$inboundSchema))
    .optional(),
  pagination: z
    .lazy(() => GetApiLeaderboardPagination$inboundSchema)
    .optional(),
});

/** @internal */
export type GetApiLeaderboardResponse$Outbound = {
  success?: boolean | undefined;
  stats?: GetApiLeaderboardStats$Outbound | undefined;
  agents?: Array<GetApiLeaderboardAgent$Outbound> | undefined;
  pagination?: GetApiLeaderboardPagination$Outbound | undefined;
};

/** @internal */
export const GetApiLeaderboardResponse$outboundSchema: z.ZodType<
  GetApiLeaderboardResponse$Outbound,
  z.ZodTypeDef,
  GetApiLeaderboardResponse
> = z.object({
  success: z.boolean().optional(),
  stats: z.lazy(() => GetApiLeaderboardStats$outboundSchema).optional(),
  agents: z
    .array(z.lazy(() => GetApiLeaderboardAgent$outboundSchema))
    .optional(),
  pagination: z
    .lazy(() => GetApiLeaderboardPagination$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeaderboardResponse$ {
  /** @deprecated use `GetApiLeaderboardResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiLeaderboardResponse$inboundSchema;
  /** @deprecated use `GetApiLeaderboardResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiLeaderboardResponse$outboundSchema;
  /** @deprecated use `GetApiLeaderboardResponse$Outbound` instead. */
  export type Outbound = GetApiLeaderboardResponse$Outbound;
}

export function getApiLeaderboardResponseToJSON(
  getApiLeaderboardResponse: GetApiLeaderboardResponse,
): string {
  return JSON.stringify(
    GetApiLeaderboardResponse$outboundSchema.parse(getApiLeaderboardResponse),
  );
}

export function getApiLeaderboardResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiLeaderboardResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiLeaderboardResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeaderboardResponse' from JSON`,
  );
}
