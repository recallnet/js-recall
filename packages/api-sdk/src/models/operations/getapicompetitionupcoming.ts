/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Competition status (always PENDING)
 */
export const GetApiCompetitionUpcomingStatus = {
  Pending: "PENDING",
} as const;
/**
 * Competition status (always PENDING)
 */
export type GetApiCompetitionUpcomingStatus = ClosedEnum<
  typeof GetApiCompetitionUpcomingStatus
>;

/**
 * The type of cross-chain trading allowed in this competition
 */
export const GetApiCompetitionUpcomingCrossChainTradingType = {
  DisallowAll: "disallowAll",
  DisallowXParent: "disallowXParent",
  Allow: "allow",
} as const;
/**
 * The type of cross-chain trading allowed in this competition
 */
export type GetApiCompetitionUpcomingCrossChainTradingType = ClosedEnum<
  typeof GetApiCompetitionUpcomingCrossChainTradingType
>;

export type GetApiCompetitionUpcomingCompetition = {
  /**
   * Competition ID
   */
  id?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | null | undefined;
  /**
   * External URL for competition details
   */
  externalLink?: string | null | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | null | undefined;
  /**
   * Competition status (always PENDING)
   */
  status?: GetApiCompetitionUpcomingStatus | undefined;
  /**
   * The type of cross-chain trading allowed in this competition
   */
  crossChainTradingType?:
    | GetApiCompetitionUpcomingCrossChainTradingType
    | undefined;
  /**
   * When the competition was created
   */
  createdAt?: Date | undefined;
  /**
   * When the competition was last updated
   */
  updatedAt?: Date | undefined;
};

/**
 * Upcoming competitions retrieved successfully
 */
export type GetApiCompetitionUpcomingResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  competitions?: Array<GetApiCompetitionUpcomingCompetition> | undefined;
};

/** @internal */
export const GetApiCompetitionUpcomingStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionUpcomingStatus
> = z.nativeEnum(GetApiCompetitionUpcomingStatus);

/** @internal */
export const GetApiCompetitionUpcomingStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionUpcomingStatus
> = GetApiCompetitionUpcomingStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionUpcomingStatus$ {
  /** @deprecated use `GetApiCompetitionUpcomingStatus$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionUpcomingStatus$inboundSchema;
  /** @deprecated use `GetApiCompetitionUpcomingStatus$outboundSchema` instead. */
  export const outboundSchema = GetApiCompetitionUpcomingStatus$outboundSchema;
}

/** @internal */
export const GetApiCompetitionUpcomingCrossChainTradingType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionUpcomingCrossChainTradingType
> = z.nativeEnum(GetApiCompetitionUpcomingCrossChainTradingType);

/** @internal */
export const GetApiCompetitionUpcomingCrossChainTradingType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionUpcomingCrossChainTradingType
> = GetApiCompetitionUpcomingCrossChainTradingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionUpcomingCrossChainTradingType$ {
  /** @deprecated use `GetApiCompetitionUpcomingCrossChainTradingType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionUpcomingCrossChainTradingType$inboundSchema;
  /** @deprecated use `GetApiCompetitionUpcomingCrossChainTradingType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionUpcomingCrossChainTradingType$outboundSchema;
}

/** @internal */
export const GetApiCompetitionUpcomingCompetition$inboundSchema: z.ZodType<
  GetApiCompetitionUpcomingCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiCompetitionUpcomingStatus$inboundSchema.optional(),
  crossChainTradingType:
    GetApiCompetitionUpcomingCrossChainTradingType$inboundSchema.optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiCompetitionUpcomingCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  externalLink?: string | null | undefined;
  imageUrl?: string | null | undefined;
  status?: string | undefined;
  crossChainTradingType?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiCompetitionUpcomingCompetition$outboundSchema: z.ZodType<
  GetApiCompetitionUpcomingCompetition$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionUpcomingCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiCompetitionUpcomingStatus$outboundSchema.optional(),
  crossChainTradingType:
    GetApiCompetitionUpcomingCrossChainTradingType$outboundSchema.optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionUpcomingCompetition$ {
  /** @deprecated use `GetApiCompetitionUpcomingCompetition$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionUpcomingCompetition$inboundSchema;
  /** @deprecated use `GetApiCompetitionUpcomingCompetition$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionUpcomingCompetition$outboundSchema;
  /** @deprecated use `GetApiCompetitionUpcomingCompetition$Outbound` instead. */
  export type Outbound = GetApiCompetitionUpcomingCompetition$Outbound;
}

export function getApiCompetitionUpcomingCompetitionToJSON(
  getApiCompetitionUpcomingCompetition: GetApiCompetitionUpcomingCompetition,
): string {
  return JSON.stringify(
    GetApiCompetitionUpcomingCompetition$outboundSchema.parse(
      getApiCompetitionUpcomingCompetition,
    ),
  );
}

export function getApiCompetitionUpcomingCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionUpcomingCompetition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionUpcomingCompetition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionUpcomingCompetition' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionUpcomingResponse$inboundSchema: z.ZodType<
  GetApiCompetitionUpcomingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competitions: z
    .array(z.lazy(() => GetApiCompetitionUpcomingCompetition$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiCompetitionUpcomingResponse$Outbound = {
  success?: boolean | undefined;
  competitions?:
    | Array<GetApiCompetitionUpcomingCompetition$Outbound>
    | undefined;
};

/** @internal */
export const GetApiCompetitionUpcomingResponse$outboundSchema: z.ZodType<
  GetApiCompetitionUpcomingResponse$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionUpcomingResponse
> = z.object({
  success: z.boolean().optional(),
  competitions: z
    .array(z.lazy(() => GetApiCompetitionUpcomingCompetition$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionUpcomingResponse$ {
  /** @deprecated use `GetApiCompetitionUpcomingResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionUpcomingResponse$inboundSchema;
  /** @deprecated use `GetApiCompetitionUpcomingResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionUpcomingResponse$outboundSchema;
  /** @deprecated use `GetApiCompetitionUpcomingResponse$Outbound` instead. */
  export type Outbound = GetApiCompetitionUpcomingResponse$Outbound;
}

export function getApiCompetitionUpcomingResponseToJSON(
  getApiCompetitionUpcomingResponse: GetApiCompetitionUpcomingResponse,
): string {
  return JSON.stringify(
    GetApiCompetitionUpcomingResponse$outboundSchema.parse(
      getApiCompetitionUpcomingResponse,
    ),
  );
}

export function getApiCompetitionUpcomingResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionUpcomingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiCompetitionUpcomingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionUpcomingResponse' from JSON`,
  );
}
