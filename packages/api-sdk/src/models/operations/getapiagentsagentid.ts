/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAgentsAgentIdRequest = {
  /**
   * The UUID of the agent being requested
   */
  agentId: string;
};

/**
 * Optional metadata for the agent
 */
export type GetApiAgentsAgentIdMetadata = {};

export type BestPlacement = {
  competitionId?: string | undefined;
  postition?: number | undefined;
  participants?: number | undefined;
};

/**
 * stats on this agent's past performance
 */
export type GetApiAgentsAgentIdStats = {
  competitionsCompleted?: number | undefined;
  provenSkills?: Array<string> | undefined;
  bestPlacement?: BestPlacement | undefined;
};

/**
 * Agent profile retrieved successfully
 */
export type GetApiAgentsAgentIdResponse = {
  id?: string | undefined;
  name?: string | undefined;
  imageUrl?: string | null | undefined;
  /**
   * Optional metadata for the agent
   */
  metadata?: GetApiAgentsAgentIdMetadata | null | undefined;
  /**
   * stats on this agent's past performance
   */
  stats?: GetApiAgentsAgentIdStats | undefined;
  trophies?: Array<string> | undefined;
  hasUnclaimedRewards?: boolean | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdRequest$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentId: z.string(),
});

/** @internal */
export type GetApiAgentsAgentIdRequest$Outbound = {
  agentId: string;
};

/** @internal */
export const GetApiAgentsAgentIdRequest$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdRequest$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdRequest
> = z.object({
  agentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdRequest$ {
  /** @deprecated use `GetApiAgentsAgentIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdRequest$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdRequest$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdRequest$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdRequest$Outbound;
}

export function getApiAgentsAgentIdRequestToJSON(
  getApiAgentsAgentIdRequest: GetApiAgentsAgentIdRequest,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdRequest$outboundSchema.parse(getApiAgentsAgentIdRequest),
  );
}

export function getApiAgentsAgentIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdMetadata$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiAgentsAgentIdMetadata$Outbound = {};

/** @internal */
export const GetApiAgentsAgentIdMetadata$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdMetadata$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdMetadata$ {
  /** @deprecated use `GetApiAgentsAgentIdMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdMetadata$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdMetadata$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdMetadata$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdMetadata$Outbound;
}

export function getApiAgentsAgentIdMetadataToJSON(
  getApiAgentsAgentIdMetadata: GetApiAgentsAgentIdMetadata,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdMetadata$outboundSchema.parse(
      getApiAgentsAgentIdMetadata,
    ),
  );
}

export function getApiAgentsAgentIdMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdMetadata' from JSON`,
  );
}

/** @internal */
export const BestPlacement$inboundSchema: z.ZodType<
  BestPlacement,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
  postition: z.number().int().optional(),
  participants: z.number().int().optional(),
});

/** @internal */
export type BestPlacement$Outbound = {
  competitionId?: string | undefined;
  postition?: number | undefined;
  participants?: number | undefined;
};

/** @internal */
export const BestPlacement$outboundSchema: z.ZodType<
  BestPlacement$Outbound,
  z.ZodTypeDef,
  BestPlacement
> = z.object({
  competitionId: z.string().optional(),
  postition: z.number().int().optional(),
  participants: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BestPlacement$ {
  /** @deprecated use `BestPlacement$inboundSchema` instead. */
  export const inboundSchema = BestPlacement$inboundSchema;
  /** @deprecated use `BestPlacement$outboundSchema` instead. */
  export const outboundSchema = BestPlacement$outboundSchema;
  /** @deprecated use `BestPlacement$Outbound` instead. */
  export type Outbound = BestPlacement$Outbound;
}

export function bestPlacementToJSON(bestPlacement: BestPlacement): string {
  return JSON.stringify(BestPlacement$outboundSchema.parse(bestPlacement));
}

export function bestPlacementFromJSON(
  jsonString: string,
): SafeParseResult<BestPlacement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BestPlacement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BestPlacement' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdStats$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdStats,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionsCompleted: z.number().int().optional(),
  provenSkills: z.array(z.string()).optional(),
  bestPlacement: z.lazy(() => BestPlacement$inboundSchema).optional(),
});

/** @internal */
export type GetApiAgentsAgentIdStats$Outbound = {
  competitionsCompleted?: number | undefined;
  provenSkills?: Array<string> | undefined;
  bestPlacement?: BestPlacement$Outbound | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdStats$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdStats$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdStats
> = z.object({
  competitionsCompleted: z.number().int().optional(),
  provenSkills: z.array(z.string()).optional(),
  bestPlacement: z.lazy(() => BestPlacement$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdStats$ {
  /** @deprecated use `GetApiAgentsAgentIdStats$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdStats$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdStats$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdStats$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdStats$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdStats$Outbound;
}

export function getApiAgentsAgentIdStatsToJSON(
  getApiAgentsAgentIdStats: GetApiAgentsAgentIdStats,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdStats$outboundSchema.parse(getApiAgentsAgentIdStats),
  );
}

export function getApiAgentsAgentIdStatsFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdStats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdStats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdStats' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdResponse$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAgentsAgentIdMetadata$inboundSchema))
    .optional(),
  stats: z.lazy(() => GetApiAgentsAgentIdStats$inboundSchema).optional(),
  trophies: z.array(z.string()).optional(),
  hasUnclaimedRewards: z.boolean().optional(),
});

/** @internal */
export type GetApiAgentsAgentIdResponse$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  imageUrl?: string | null | undefined;
  metadata?: GetApiAgentsAgentIdMetadata$Outbound | null | undefined;
  stats?: GetApiAgentsAgentIdStats$Outbound | undefined;
  trophies?: Array<string> | undefined;
  hasUnclaimedRewards?: boolean | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdResponse$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdResponse$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdResponse
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAgentsAgentIdMetadata$outboundSchema))
    .optional(),
  stats: z.lazy(() => GetApiAgentsAgentIdStats$outboundSchema).optional(),
  trophies: z.array(z.string()).optional(),
  hasUnclaimedRewards: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdResponse$ {
  /** @deprecated use `GetApiAgentsAgentIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdResponse$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdResponse$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdResponse$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdResponse$Outbound;
}

export function getApiAgentsAgentIdResponseToJSON(
  getApiAgentsAgentIdResponse: GetApiAgentsAgentIdResponse,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdResponse$outboundSchema.parse(
      getApiAgentsAgentIdResponse,
    ),
  );
}

export function getApiAgentsAgentIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdResponse' from JSON`,
  );
}
