/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAgentsAgentIdRequest = {
  /**
   * The UUID of the agent being requested
   */
  agentId: string;
};

/**
 * Optional metadata for the agent
 */
export type GetApiAgentsAgentIdMetadata = {};

/**
 * Best placement across all competitions (null if no ranking data available)
 */
export type GetApiAgentsAgentIdBestPlacement = {
  competitionId?: string | undefined;
  rank?: number | undefined;
  score?: number | undefined;
  totalAgents?: number | undefined;
};

/**
 * stats on this agent's past performance
 */
export type GetApiAgentsAgentIdStats = {
  completedCompetitions?: number | undefined;
  totalTrades?: number | undefined;
  totalVotes?: number | undefined;
  /**
   * Best placement across all competitions (null if no ranking data available)
   */
  bestPlacement?: GetApiAgentsAgentIdBestPlacement | null | undefined;
  rank?: number | undefined;
  score?: number | undefined;
};

export type GetApiAgentsAgentIdTrophy = {
  /**
   * Competition ID
   */
  competitionId?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Agent's final rank in the competition
   */
  rank?: number | undefined;
  /**
   * Competition image URL
   */
  imageUrl?: string | undefined;
  /**
   * When the trophy was awarded (competition end date)
   */
  createdAt?: Date | undefined;
};

export type GetApiAgentsAgentIdAgent = {
  id?: string | undefined;
  name?: string | undefined;
  handle?: string | undefined;
  isVerified?: boolean | undefined;
  imageUrl?: string | null | undefined;
  /**
   * Optional metadata for the agent
   */
  metadata?: GetApiAgentsAgentIdMetadata | null | undefined;
  /**
   * stats on this agent's past performance
   */
  stats?: GetApiAgentsAgentIdStats | undefined;
  /**
   * Trophies earned from ended competitions
   */
  trophies?: Array<GetApiAgentsAgentIdTrophy> | undefined;
  /**
   * Skills the agent has proven
   */
  skills?: Array<string> | undefined;
  hasUnclaimedRewards?: boolean | undefined;
};

/**
 * Owner information for the agent (for "Developed by" section)
 */
export type GetApiAgentsAgentIdOwner = {
  /**
   * Owner user ID
   */
  id?: string | undefined;
  /**
   * Owner display name
   */
  name?: string | null | undefined;
  /**
   * Owner wallet address
   */
  walletAddress?: string | undefined;
};

/**
 * Agent profile retrieved successfully
 */
export type GetApiAgentsAgentIdResponse = {
  success?: boolean | undefined;
  agent?: GetApiAgentsAgentIdAgent | undefined;
  /**
   * Owner information for the agent (for "Developed by" section)
   */
  owner?: GetApiAgentsAgentIdOwner | null | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdRequest$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentId: z.string(),
});

/** @internal */
export type GetApiAgentsAgentIdRequest$Outbound = {
  agentId: string;
};

/** @internal */
export const GetApiAgentsAgentIdRequest$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdRequest$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdRequest
> = z.object({
  agentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdRequest$ {
  /** @deprecated use `GetApiAgentsAgentIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdRequest$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdRequest$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdRequest$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdRequest$Outbound;
}

export function getApiAgentsAgentIdRequestToJSON(
  getApiAgentsAgentIdRequest: GetApiAgentsAgentIdRequest,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdRequest$outboundSchema.parse(getApiAgentsAgentIdRequest),
  );
}

export function getApiAgentsAgentIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdMetadata$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiAgentsAgentIdMetadata$Outbound = {};

/** @internal */
export const GetApiAgentsAgentIdMetadata$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdMetadata$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdMetadata$ {
  /** @deprecated use `GetApiAgentsAgentIdMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdMetadata$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdMetadata$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdMetadata$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdMetadata$Outbound;
}

export function getApiAgentsAgentIdMetadataToJSON(
  getApiAgentsAgentIdMetadata: GetApiAgentsAgentIdMetadata,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdMetadata$outboundSchema.parse(
      getApiAgentsAgentIdMetadata,
    ),
  );
}

export function getApiAgentsAgentIdMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdBestPlacement$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdBestPlacement,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
  rank: z.number().int().optional(),
  score: z.number().int().optional(),
  totalAgents: z.number().int().optional(),
});

/** @internal */
export type GetApiAgentsAgentIdBestPlacement$Outbound = {
  competitionId?: string | undefined;
  rank?: number | undefined;
  score?: number | undefined;
  totalAgents?: number | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdBestPlacement$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdBestPlacement$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdBestPlacement
> = z.object({
  competitionId: z.string().optional(),
  rank: z.number().int().optional(),
  score: z.number().int().optional(),
  totalAgents: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdBestPlacement$ {
  /** @deprecated use `GetApiAgentsAgentIdBestPlacement$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdBestPlacement$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdBestPlacement$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdBestPlacement$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdBestPlacement$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdBestPlacement$Outbound;
}

export function getApiAgentsAgentIdBestPlacementToJSON(
  getApiAgentsAgentIdBestPlacement: GetApiAgentsAgentIdBestPlacement,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdBestPlacement$outboundSchema.parse(
      getApiAgentsAgentIdBestPlacement,
    ),
  );
}

export function getApiAgentsAgentIdBestPlacementFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdBestPlacement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdBestPlacement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdBestPlacement' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdStats$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdStats,
  z.ZodTypeDef,
  unknown
> = z.object({
  completedCompetitions: z.number().int().optional(),
  totalTrades: z.number().int().optional(),
  totalVotes: z.number().int().optional(),
  bestPlacement: z
    .nullable(z.lazy(() => GetApiAgentsAgentIdBestPlacement$inboundSchema))
    .optional(),
  rank: z.number().int().optional(),
  score: z.number().optional(),
});

/** @internal */
export type GetApiAgentsAgentIdStats$Outbound = {
  completedCompetitions?: number | undefined;
  totalTrades?: number | undefined;
  totalVotes?: number | undefined;
  bestPlacement?: GetApiAgentsAgentIdBestPlacement$Outbound | null | undefined;
  rank?: number | undefined;
  score?: number | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdStats$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdStats$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdStats
> = z.object({
  completedCompetitions: z.number().int().optional(),
  totalTrades: z.number().int().optional(),
  totalVotes: z.number().int().optional(),
  bestPlacement: z
    .nullable(z.lazy(() => GetApiAgentsAgentIdBestPlacement$outboundSchema))
    .optional(),
  rank: z.number().int().optional(),
  score: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdStats$ {
  /** @deprecated use `GetApiAgentsAgentIdStats$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdStats$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdStats$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdStats$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdStats$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdStats$Outbound;
}

export function getApiAgentsAgentIdStatsToJSON(
  getApiAgentsAgentIdStats: GetApiAgentsAgentIdStats,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdStats$outboundSchema.parse(getApiAgentsAgentIdStats),
  );
}

export function getApiAgentsAgentIdStatsFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdStats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdStats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdStats' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdTrophy$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdTrophy,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
  name: z.string().optional(),
  rank: z.number().optional(),
  imageUrl: z.string().optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiAgentsAgentIdTrophy$Outbound = {
  competitionId?: string | undefined;
  name?: string | undefined;
  rank?: number | undefined;
  imageUrl?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdTrophy$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdTrophy$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdTrophy
> = z.object({
  competitionId: z.string().optional(),
  name: z.string().optional(),
  rank: z.number().optional(),
  imageUrl: z.string().optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdTrophy$ {
  /** @deprecated use `GetApiAgentsAgentIdTrophy$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdTrophy$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdTrophy$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdTrophy$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdTrophy$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdTrophy$Outbound;
}

export function getApiAgentsAgentIdTrophyToJSON(
  getApiAgentsAgentIdTrophy: GetApiAgentsAgentIdTrophy,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdTrophy$outboundSchema.parse(getApiAgentsAgentIdTrophy),
  );
}

export function getApiAgentsAgentIdTrophyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdTrophy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdTrophy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdTrophy' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdAgent$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  isVerified: z.boolean().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAgentsAgentIdMetadata$inboundSchema))
    .optional(),
  stats: z.lazy(() => GetApiAgentsAgentIdStats$inboundSchema).optional(),
  trophies: z
    .array(z.lazy(() => GetApiAgentsAgentIdTrophy$inboundSchema))
    .optional(),
  skills: z.array(z.string()).optional(),
  hasUnclaimedRewards: z.boolean().optional(),
});

/** @internal */
export type GetApiAgentsAgentIdAgent$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  handle?: string | undefined;
  isVerified?: boolean | undefined;
  imageUrl?: string | null | undefined;
  metadata?: GetApiAgentsAgentIdMetadata$Outbound | null | undefined;
  stats?: GetApiAgentsAgentIdStats$Outbound | undefined;
  trophies?: Array<GetApiAgentsAgentIdTrophy$Outbound> | undefined;
  skills?: Array<string> | undefined;
  hasUnclaimedRewards?: boolean | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdAgent$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdAgent$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdAgent
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  isVerified: z.boolean().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAgentsAgentIdMetadata$outboundSchema))
    .optional(),
  stats: z.lazy(() => GetApiAgentsAgentIdStats$outboundSchema).optional(),
  trophies: z
    .array(z.lazy(() => GetApiAgentsAgentIdTrophy$outboundSchema))
    .optional(),
  skills: z.array(z.string()).optional(),
  hasUnclaimedRewards: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdAgent$ {
  /** @deprecated use `GetApiAgentsAgentIdAgent$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdAgent$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdAgent$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdAgent$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdAgent$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdAgent$Outbound;
}

export function getApiAgentsAgentIdAgentToJSON(
  getApiAgentsAgentIdAgent: GetApiAgentsAgentIdAgent,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdAgent$outboundSchema.parse(getApiAgentsAgentIdAgent),
  );
}

export function getApiAgentsAgentIdAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdAgent' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdOwner$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  walletAddress: z.string().optional(),
});

/** @internal */
export type GetApiAgentsAgentIdOwner$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  walletAddress?: string | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdOwner$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdOwner$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdOwner
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  walletAddress: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdOwner$ {
  /** @deprecated use `GetApiAgentsAgentIdOwner$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdOwner$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdOwner$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdOwner$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdOwner$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdOwner$Outbound;
}

export function getApiAgentsAgentIdOwnerToJSON(
  getApiAgentsAgentIdOwner: GetApiAgentsAgentIdOwner,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdOwner$outboundSchema.parse(getApiAgentsAgentIdOwner),
  );
}

export function getApiAgentsAgentIdOwnerFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdOwner' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsAgentIdResponse$inboundSchema: z.ZodType<
  GetApiAgentsAgentIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  agent: z.lazy(() => GetApiAgentsAgentIdAgent$inboundSchema).optional(),
  owner: z
    .nullable(z.lazy(() => GetApiAgentsAgentIdOwner$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiAgentsAgentIdResponse$Outbound = {
  success?: boolean | undefined;
  agent?: GetApiAgentsAgentIdAgent$Outbound | undefined;
  owner?: GetApiAgentsAgentIdOwner$Outbound | null | undefined;
};

/** @internal */
export const GetApiAgentsAgentIdResponse$outboundSchema: z.ZodType<
  GetApiAgentsAgentIdResponse$Outbound,
  z.ZodTypeDef,
  GetApiAgentsAgentIdResponse
> = z.object({
  success: z.boolean().optional(),
  agent: z.lazy(() => GetApiAgentsAgentIdAgent$outboundSchema).optional(),
  owner: z
    .nullable(z.lazy(() => GetApiAgentsAgentIdOwner$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsAgentIdResponse$ {
  /** @deprecated use `GetApiAgentsAgentIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsAgentIdResponse$inboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsAgentIdResponse$outboundSchema;
  /** @deprecated use `GetApiAgentsAgentIdResponse$Outbound` instead. */
  export type Outbound = GetApiAgentsAgentIdResponse$Outbound;
}

export function getApiAgentsAgentIdResponseToJSON(
  getApiAgentsAgentIdResponse: GetApiAgentsAgentIdResponse,
): string {
  return JSON.stringify(
    GetApiAgentsAgentIdResponse$outboundSchema.parse(
      getApiAgentsAgentIdResponse,
    ),
  );
}

export function getApiAgentsAgentIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsAgentIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsAgentIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsAgentIdResponse' from JSON`,
  );
}
