/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAdminCompetitionCompetitionIdSnapshotsRequest = {
  /**
   * ID of the competition
   */
  competitionId: string;
  /**
   * Optional agent ID to filter snapshots
   */
  agentId?: string | undefined;
};

export type Snapshot = {
  /**
   * Snapshot ID
   */
  id?: string | undefined;
  /**
   * Competition ID
   */
  competitionId?: string | undefined;
  /**
   * Agent ID
   */
  agentId?: string | undefined;
  /**
   * Total portfolio value at snapshot time
   */
  totalValue?: number | undefined;
  /**
   * Snapshot timestamp
   */
  timestamp?: Date | undefined;
};

/**
 * Competition snapshots
 */
export type GetApiAdminCompetitionCompetitionIdSnapshotsResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  snapshots?: Array<Snapshot> | undefined;
};

/** @internal */
export const GetApiAdminCompetitionCompetitionIdSnapshotsRequest$inboundSchema: z.ZodType<
  GetApiAdminCompetitionCompetitionIdSnapshotsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string(),
  agentId: z.string().optional(),
});

/** @internal */
export type GetApiAdminCompetitionCompetitionIdSnapshotsRequest$Outbound = {
  competitionId: string;
  agentId?: string | undefined;
};

/** @internal */
export const GetApiAdminCompetitionCompetitionIdSnapshotsRequest$outboundSchema: z.ZodType<
  GetApiAdminCompetitionCompetitionIdSnapshotsRequest$Outbound,
  z.ZodTypeDef,
  GetApiAdminCompetitionCompetitionIdSnapshotsRequest
> = z.object({
  competitionId: z.string(),
  agentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminCompetitionCompetitionIdSnapshotsRequest$ {
  /** @deprecated use `GetApiAdminCompetitionCompetitionIdSnapshotsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAdminCompetitionCompetitionIdSnapshotsRequest$inboundSchema;
  /** @deprecated use `GetApiAdminCompetitionCompetitionIdSnapshotsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAdminCompetitionCompetitionIdSnapshotsRequest$outboundSchema;
  /** @deprecated use `GetApiAdminCompetitionCompetitionIdSnapshotsRequest$Outbound` instead. */
  export type Outbound =
    GetApiAdminCompetitionCompetitionIdSnapshotsRequest$Outbound;
}

export function getApiAdminCompetitionCompetitionIdSnapshotsRequestToJSON(
  getApiAdminCompetitionCompetitionIdSnapshotsRequest: GetApiAdminCompetitionCompetitionIdSnapshotsRequest,
): string {
  return JSON.stringify(
    GetApiAdminCompetitionCompetitionIdSnapshotsRequest$outboundSchema.parse(
      getApiAdminCompetitionCompetitionIdSnapshotsRequest,
    ),
  );
}

export function getApiAdminCompetitionCompetitionIdSnapshotsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiAdminCompetitionCompetitionIdSnapshotsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAdminCompetitionCompetitionIdSnapshotsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiAdminCompetitionCompetitionIdSnapshotsRequest' from JSON`,
  );
}

/** @internal */
export const Snapshot$inboundSchema: z.ZodType<
  Snapshot,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  competitionId: z.string().optional(),
  agentId: z.string().optional(),
  totalValue: z.number().optional(),
  timestamp: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type Snapshot$Outbound = {
  id?: string | undefined;
  competitionId?: string | undefined;
  agentId?: string | undefined;
  totalValue?: number | undefined;
  timestamp?: string | undefined;
};

/** @internal */
export const Snapshot$outboundSchema: z.ZodType<
  Snapshot$Outbound,
  z.ZodTypeDef,
  Snapshot
> = z.object({
  id: z.string().optional(),
  competitionId: z.string().optional(),
  agentId: z.string().optional(),
  totalValue: z.number().optional(),
  timestamp: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Snapshot$ {
  /** @deprecated use `Snapshot$inboundSchema` instead. */
  export const inboundSchema = Snapshot$inboundSchema;
  /** @deprecated use `Snapshot$outboundSchema` instead. */
  export const outboundSchema = Snapshot$outboundSchema;
  /** @deprecated use `Snapshot$Outbound` instead. */
  export type Outbound = Snapshot$Outbound;
}

export function snapshotToJSON(snapshot: Snapshot): string {
  return JSON.stringify(Snapshot$outboundSchema.parse(snapshot));
}

export function snapshotFromJSON(
  jsonString: string,
): SafeParseResult<Snapshot, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Snapshot$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Snapshot' from JSON`,
  );
}

/** @internal */
export const GetApiAdminCompetitionCompetitionIdSnapshotsResponse$inboundSchema: z.ZodType<
  GetApiAdminCompetitionCompetitionIdSnapshotsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  snapshots: z.array(z.lazy(() => Snapshot$inboundSchema)).optional(),
});

/** @internal */
export type GetApiAdminCompetitionCompetitionIdSnapshotsResponse$Outbound = {
  success?: boolean | undefined;
  snapshots?: Array<Snapshot$Outbound> | undefined;
};

/** @internal */
export const GetApiAdminCompetitionCompetitionIdSnapshotsResponse$outboundSchema: z.ZodType<
  GetApiAdminCompetitionCompetitionIdSnapshotsResponse$Outbound,
  z.ZodTypeDef,
  GetApiAdminCompetitionCompetitionIdSnapshotsResponse
> = z.object({
  success: z.boolean().optional(),
  snapshots: z.array(z.lazy(() => Snapshot$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminCompetitionCompetitionIdSnapshotsResponse$ {
  /** @deprecated use `GetApiAdminCompetitionCompetitionIdSnapshotsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetApiAdminCompetitionCompetitionIdSnapshotsResponse$inboundSchema;
  /** @deprecated use `GetApiAdminCompetitionCompetitionIdSnapshotsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiAdminCompetitionCompetitionIdSnapshotsResponse$outboundSchema;
  /** @deprecated use `GetApiAdminCompetitionCompetitionIdSnapshotsResponse$Outbound` instead. */
  export type Outbound =
    GetApiAdminCompetitionCompetitionIdSnapshotsResponse$Outbound;
}

export function getApiAdminCompetitionCompetitionIdSnapshotsResponseToJSON(
  getApiAdminCompetitionCompetitionIdSnapshotsResponse: GetApiAdminCompetitionCompetitionIdSnapshotsResponse,
): string {
  return JSON.stringify(
    GetApiAdminCompetitionCompetitionIdSnapshotsResponse$outboundSchema.parse(
      getApiAdminCompetitionCompetitionIdSnapshotsResponse,
    ),
  );
}

export function getApiAdminCompetitionCompetitionIdSnapshotsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiAdminCompetitionCompetitionIdSnapshotsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiAdminCompetitionCompetitionIdSnapshotsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiAdminCompetitionCompetitionIdSnapshotsResponse' from JSON`,
  );
}
