/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetApiAgentBalancesChain = {
  Evm: "evm",
  Svm: "svm",
} as const;
export type GetApiAgentBalancesChain = ClosedEnum<
  typeof GetApiAgentBalancesChain
>;

export type Balance = {
  tokenAddress?: string | undefined;
  amount?: number | undefined;
  symbol?: string | undefined;
  chain?: GetApiAgentBalancesChain | undefined;
  specificChain?: string | undefined;
};

/**
 * Balances retrieved successfully
 */
export type GetApiAgentBalancesResponse = {
  success?: boolean | undefined;
  agentId?: string | undefined;
  balances?: Array<Balance> | undefined;
};

/** @internal */
export const GetApiAgentBalancesChain$inboundSchema: z.ZodNativeEnum<
  typeof GetApiAgentBalancesChain
> = z.nativeEnum(GetApiAgentBalancesChain);

/** @internal */
export const GetApiAgentBalancesChain$outboundSchema: z.ZodNativeEnum<
  typeof GetApiAgentBalancesChain
> = GetApiAgentBalancesChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentBalancesChain$ {
  /** @deprecated use `GetApiAgentBalancesChain$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentBalancesChain$inboundSchema;
  /** @deprecated use `GetApiAgentBalancesChain$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentBalancesChain$outboundSchema;
}

/** @internal */
export const Balance$inboundSchema: z.ZodType<Balance, z.ZodTypeDef, unknown> =
  z.object({
    tokenAddress: z.string().optional(),
    amount: z.number().optional(),
    symbol: z.string().optional(),
    chain: GetApiAgentBalancesChain$inboundSchema.optional(),
    specificChain: z.string().optional(),
  });

/** @internal */
export type Balance$Outbound = {
  tokenAddress?: string | undefined;
  amount?: number | undefined;
  symbol?: string | undefined;
  chain?: string | undefined;
  specificChain?: string | undefined;
};

/** @internal */
export const Balance$outboundSchema: z.ZodType<
  Balance$Outbound,
  z.ZodTypeDef,
  Balance
> = z.object({
  tokenAddress: z.string().optional(),
  amount: z.number().optional(),
  symbol: z.string().optional(),
  chain: GetApiAgentBalancesChain$outboundSchema.optional(),
  specificChain: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Balance$ {
  /** @deprecated use `Balance$inboundSchema` instead. */
  export const inboundSchema = Balance$inboundSchema;
  /** @deprecated use `Balance$outboundSchema` instead. */
  export const outboundSchema = Balance$outboundSchema;
  /** @deprecated use `Balance$Outbound` instead. */
  export type Outbound = Balance$Outbound;
}

export function balanceToJSON(balance: Balance): string {
  return JSON.stringify(Balance$outboundSchema.parse(balance));
}

export function balanceFromJSON(
  jsonString: string,
): SafeParseResult<Balance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Balance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Balance' from JSON`,
  );
}

/** @internal */
export const GetApiAgentBalancesResponse$inboundSchema: z.ZodType<
  GetApiAgentBalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  agentId: z.string().optional(),
  balances: z.array(z.lazy(() => Balance$inboundSchema)).optional(),
});

/** @internal */
export type GetApiAgentBalancesResponse$Outbound = {
  success?: boolean | undefined;
  agentId?: string | undefined;
  balances?: Array<Balance$Outbound> | undefined;
};

/** @internal */
export const GetApiAgentBalancesResponse$outboundSchema: z.ZodType<
  GetApiAgentBalancesResponse$Outbound,
  z.ZodTypeDef,
  GetApiAgentBalancesResponse
> = z.object({
  success: z.boolean().optional(),
  agentId: z.string().optional(),
  balances: z.array(z.lazy(() => Balance$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentBalancesResponse$ {
  /** @deprecated use `GetApiAgentBalancesResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentBalancesResponse$inboundSchema;
  /** @deprecated use `GetApiAgentBalancesResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentBalancesResponse$outboundSchema;
  /** @deprecated use `GetApiAgentBalancesResponse$Outbound` instead. */
  export type Outbound = GetApiAgentBalancesResponse$Outbound;
}

export function getApiAgentBalancesResponseToJSON(
  getApiAgentBalancesResponse: GetApiAgentBalancesResponse,
): string {
  return JSON.stringify(
    GetApiAgentBalancesResponse$outboundSchema.parse(
      getApiAgentBalancesResponse,
    ),
  );
}

export function getApiAgentBalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentBalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentBalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentBalancesResponse' from JSON`,
  );
}
