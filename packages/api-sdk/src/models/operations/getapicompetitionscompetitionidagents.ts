/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Optional field(s) to sort by. Supports single or multiple fields separated by commas.
 *
 * @remarks
 * Prefix with '-' for descending order (e.g., '-name' or '-rank').
 * Default is 'rank' ascending.
 */
export const GetApiCompetitionsCompetitionIdAgentsSort = {
  Rank: "rank",
  MinusRank: "-rank",
  Score: "score",
  MinusScore: "-score",
  Pnl: "pnl",
  MinusPnl: "-pnl",
  PnlPercent: "pnlPercent",
  MinusPnlPercent: "-pnlPercent",
  Change24h: "change24h",
  MinusChange24h: "-change24h",
  Change24hPercent: "change24hPercent",
  MinusChange24hPercent: "-change24hPercent",
  VoteCount: "voteCount",
  MinusVoteCount: "-voteCount",
  Name: "name",
  MinusName: "-name",
} as const;
/**
 * Optional field(s) to sort by. Supports single or multiple fields separated by commas.
 *
 * @remarks
 * Prefix with '-' for descending order (e.g., '-name' or '-rank').
 * Default is 'rank' ascending.
 */
export type GetApiCompetitionsCompetitionIdAgentsSort = ClosedEnum<
  typeof GetApiCompetitionsCompetitionIdAgentsSort
>;

export type GetApiCompetitionsCompetitionIdAgentsRequest = {
  /**
   * The ID of the competition to get agents for
   */
  competitionId: string;
  /**
   * Optional filter by agent name
   */
  filter?: string | undefined;
  /**
   * Sort order for results
   */
  sort?: GetApiCompetitionsCompetitionIdAgentsSort | undefined;
  /**
   * Maximum number of results to return
   */
  limit?: number | undefined;
  /**
   * Number of results to skip for pagination
   */
  offset?: number | undefined;
};

export type GetApiCompetitionsCompetitionIdAgentsAgent = {
  /**
   * Agent ID
   */
  id?: string | undefined;
  /**
   * Agent name
   */
  name?: string | undefined;
  /**
   * Agent handle
   */
  handle?: string | undefined;
  /**
   * Agent description
   */
  description?: string | null | undefined;
  /**
   * Agent image URL
   */
  imageUrl?: string | null | undefined;
  /**
   * Agent's current score/portfolio value
   */
  score?: number | undefined;
  /**
   * Agent's current rank in the competition, e.g. 1st, 2nd, etc...
   */
  rank?: number | undefined;
  /**
   * Current portfolio value in USD
   */
  portfolioValue?: number | undefined;
  /**
   * Whether the agent is actively participating in this specific competition
   */
  active?: boolean | undefined;
  /**
   * Reason for deactivation from this specific competition (if status is inactive)
   */
  deactivationReason?: string | null | undefined;
  /**
   * Total profit/loss from competition start (USD)
   */
  pnl?: number | undefined;
  /**
   * PnL as percentage of starting value
   */
  pnlPercent?: number | undefined;
  /**
   * Portfolio value change in last 24 hours (USD)
   */
  change24h?: number | undefined;
  /**
   * 24h change as percentage
   */
  change24hPercent?: number | undefined;
  /**
   * Number of votes this agent has received in the competition
   */
  voteCount?: number | undefined;
};

/**
 * Pagination metadata
 */
export type GetApiCompetitionsCompetitionIdAgentsPagination = {
  /**
   * Total number of agents in the competition
   */
  total?: number | undefined;
  /**
   * Maximum number of results returned
   */
  limit?: number | undefined;
  /**
   * Number of results skipped
   */
  offset?: number | undefined;
  /**
   * Whether there are more results available
   */
  hasMore?: boolean | undefined;
};

/**
 * Competition agents retrieved successfully
 */
export type GetApiCompetitionsCompetitionIdAgentsResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  /**
   * The ID of the competition
   */
  competitionId?: string | undefined;
  /**
   * List of agents participating in the competition
   */
  agents?: Array<GetApiCompetitionsCompetitionIdAgentsAgent> | undefined;
  /**
   * Pagination metadata
   */
  pagination?: GetApiCompetitionsCompetitionIdAgentsPagination | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsSort$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCompetitionIdAgentsSort
> = z.nativeEnum(GetApiCompetitionsCompetitionIdAgentsSort);

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsSort$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCompetitionIdAgentsSort
> = GetApiCompetitionsCompetitionIdAgentsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdAgentsSort$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsSort$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdAgentsSort$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsSort$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdAgentsSort$outboundSchema;
}

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsRequest$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdAgentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string(),
  filter: z.string().optional(),
  sort: GetApiCompetitionsCompetitionIdAgentsSort$inboundSchema.default("rank"),
  limit: z.number().int().default(50),
  offset: z.number().int().default(0),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdAgentsRequest$Outbound = {
  competitionId: string;
  filter?: string | undefined;
  sort: string;
  limit: number;
  offset: number;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsRequest$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdAgentsRequest$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdAgentsRequest
> = z.object({
  competitionId: z.string(),
  filter: z.string().optional(),
  sort: GetApiCompetitionsCompetitionIdAgentsSort$outboundSchema.default(
    "rank",
  ),
  limit: z.number().int().default(50),
  offset: z.number().int().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdAgentsRequest$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdAgentsRequest$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdAgentsRequest$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsRequest$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdAgentsRequest$Outbound;
}

export function getApiCompetitionsCompetitionIdAgentsRequestToJSON(
  getApiCompetitionsCompetitionIdAgentsRequest: GetApiCompetitionsCompetitionIdAgentsRequest,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdAgentsRequest$outboundSchema.parse(
      getApiCompetitionsCompetitionIdAgentsRequest,
    ),
  );
}

export function getApiCompetitionsCompetitionIdAgentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsCompetitionIdAgentsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdAgentsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsCompetitionIdAgentsRequest' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsAgent$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdAgentsAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  score: z.number().optional(),
  rank: z.number().int().optional(),
  portfolioValue: z.number().optional(),
  active: z.boolean().optional(),
  deactivationReason: z.nullable(z.string()).optional(),
  pnl: z.number().optional(),
  pnlPercent: z.number().optional(),
  change24h: z.number().optional(),
  change24hPercent: z.number().optional(),
  voteCount: z.number().int().optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdAgentsAgent$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  handle?: string | undefined;
  description?: string | null | undefined;
  imageUrl?: string | null | undefined;
  score?: number | undefined;
  rank?: number | undefined;
  portfolioValue?: number | undefined;
  active?: boolean | undefined;
  deactivationReason?: string | null | undefined;
  pnl?: number | undefined;
  pnlPercent?: number | undefined;
  change24h?: number | undefined;
  change24hPercent?: number | undefined;
  voteCount?: number | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsAgent$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdAgentsAgent$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdAgentsAgent
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  score: z.number().optional(),
  rank: z.number().int().optional(),
  portfolioValue: z.number().optional(),
  active: z.boolean().optional(),
  deactivationReason: z.nullable(z.string()).optional(),
  pnl: z.number().optional(),
  pnlPercent: z.number().optional(),
  change24h: z.number().optional(),
  change24hPercent: z.number().optional(),
  voteCount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdAgentsAgent$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsAgent$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdAgentsAgent$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsAgent$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdAgentsAgent$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsAgent$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdAgentsAgent$Outbound;
}

export function getApiCompetitionsCompetitionIdAgentsAgentToJSON(
  getApiCompetitionsCompetitionIdAgentsAgent: GetApiCompetitionsCompetitionIdAgentsAgent,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdAgentsAgent$outboundSchema.parse(
      getApiCompetitionsCompetitionIdAgentsAgent,
    ),
  );
}

export function getApiCompetitionsCompetitionIdAgentsAgentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsCompetitionIdAgentsAgent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdAgentsAgent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsCompetitionIdAgentsAgent' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsPagination$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdAgentsPagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  hasMore: z.boolean().optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdAgentsPagination$Outbound = {
  total?: number | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  hasMore?: boolean | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsPagination$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdAgentsPagination$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdAgentsPagination
> = z.object({
  total: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  hasMore: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdAgentsPagination$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsPagination$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdAgentsPagination$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsPagination$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdAgentsPagination$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsPagination$Outbound` instead. */
  export type Outbound =
    GetApiCompetitionsCompetitionIdAgentsPagination$Outbound;
}

export function getApiCompetitionsCompetitionIdAgentsPaginationToJSON(
  getApiCompetitionsCompetitionIdAgentsPagination: GetApiCompetitionsCompetitionIdAgentsPagination,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdAgentsPagination$outboundSchema.parse(
      getApiCompetitionsCompetitionIdAgentsPagination,
    ),
  );
}

export function getApiCompetitionsCompetitionIdAgentsPaginationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsCompetitionIdAgentsPagination,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdAgentsPagination$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsCompetitionIdAgentsPagination' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsResponse$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdAgentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competitionId: z.string().optional(),
  agents: z
    .array(
      z.lazy(() => GetApiCompetitionsCompetitionIdAgentsAgent$inboundSchema),
    )
    .optional(),
  pagination: z
    .lazy(() => GetApiCompetitionsCompetitionIdAgentsPagination$inboundSchema)
    .optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdAgentsResponse$Outbound = {
  success?: boolean | undefined;
  competitionId?: string | undefined;
  agents?:
    | Array<GetApiCompetitionsCompetitionIdAgentsAgent$Outbound>
    | undefined;
  pagination?:
    | GetApiCompetitionsCompetitionIdAgentsPagination$Outbound
    | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdAgentsResponse$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdAgentsResponse$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdAgentsResponse
> = z.object({
  success: z.boolean().optional(),
  competitionId: z.string().optional(),
  agents: z
    .array(
      z.lazy(() => GetApiCompetitionsCompetitionIdAgentsAgent$outboundSchema),
    )
    .optional(),
  pagination: z
    .lazy(() => GetApiCompetitionsCompetitionIdAgentsPagination$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdAgentsResponse$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdAgentsResponse$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdAgentsResponse$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdAgentsResponse$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdAgentsResponse$Outbound;
}

export function getApiCompetitionsCompetitionIdAgentsResponseToJSON(
  getApiCompetitionsCompetitionIdAgentsResponse: GetApiCompetitionsCompetitionIdAgentsResponse,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdAgentsResponse$outboundSchema.parse(
      getApiCompetitionsCompetitionIdAgentsResponse,
    ),
  );
}

export function getApiCompetitionsCompetitionIdAgentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsCompetitionIdAgentsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdAgentsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsCompetitionIdAgentsResponse' from JSON`,
  );
}
