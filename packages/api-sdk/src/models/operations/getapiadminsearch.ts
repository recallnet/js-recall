/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by user status
 */
export const UserStatus = {
  Active: "active",
  Suspended: "suspended",
  Inactive: "inactive",
  Deleted: "deleted",
} as const;
/**
 * Filter by user status
 */
export type UserStatus = ClosedEnum<typeof UserStatus>;

/**
 * Filter by agent status
 */
export const AgentStatus = {
  Active: "active",
  Suspended: "suspended",
  Inactive: "inactive",
  Deleted: "deleted",
} as const;
/**
 * Filter by agent status
 */
export type AgentStatus = ClosedEnum<typeof AgentStatus>;

export type GetApiAdminSearchRequest = {
  /**
   * Partial match for user email
   */
  userEmail?: string | undefined;
  /**
   * Partial match for user name
   */
  userName?: string | undefined;
  /**
   * Partial match for user wallet address
   */
  userWalletAddress?: string | undefined;
  /**
   * Filter by user status
   */
  userStatus?: UserStatus | undefined;
  /**
   * Partial match for agent name
   */
  agentName?: string | undefined;
  /**
   * Filter by agent owner ID
   */
  agentOwnerId?: string | undefined;
  /**
   * Partial match for agent wallet address
   */
  agentWalletAddress?: string | undefined;
  /**
   * Filter by agent status
   */
  agentStatus?: AgentStatus | undefined;
  /**
   * Whether to "join" the results with a left join on the users table, or return all independent results
   */
  join?: boolean | undefined;
};

export type GetApiAdminSearchUser = {
  type?: string | undefined;
  id?: string | undefined;
  walletAddress?: string | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  status?: string | undefined;
  imageUrl?: string | null | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiAdminSearchMetadata = {};

export type GetApiAdminSearchAgent = {
  type?: string | undefined;
  id?: string | undefined;
  ownerId?: string | undefined;
  name?: string | undefined;
  handle?: string | undefined;
  description?: string | null | undefined;
  email?: string | null | undefined;
  metadata?: GetApiAdminSearchMetadata | null | undefined;
  status?: string | undefined;
  imageUrl?: string | null | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type Results = {
  users?: Array<GetApiAdminSearchUser> | undefined;
  agents?: Array<GetApiAdminSearchAgent> | undefined;
};

/**
 * Search results
 */
export type GetApiAdminSearchResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  /**
   * Whether to "join" the results with a left join on the users table
   */
  join?: boolean | undefined;
  results?: Results | undefined;
};

/** @internal */
export const UserStatus$inboundSchema: z.ZodNativeEnum<typeof UserStatus> =
  z.nativeEnum(UserStatus);

/** @internal */
export const UserStatus$outboundSchema: z.ZodNativeEnum<typeof UserStatus> =
  UserStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserStatus$ {
  /** @deprecated use `UserStatus$inboundSchema` instead. */
  export const inboundSchema = UserStatus$inboundSchema;
  /** @deprecated use `UserStatus$outboundSchema` instead. */
  export const outboundSchema = UserStatus$outboundSchema;
}

/** @internal */
export const AgentStatus$inboundSchema: z.ZodNativeEnum<typeof AgentStatus> =
  z.nativeEnum(AgentStatus);

/** @internal */
export const AgentStatus$outboundSchema: z.ZodNativeEnum<typeof AgentStatus> =
  AgentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentStatus$ {
  /** @deprecated use `AgentStatus$inboundSchema` instead. */
  export const inboundSchema = AgentStatus$inboundSchema;
  /** @deprecated use `AgentStatus$outboundSchema` instead. */
  export const outboundSchema = AgentStatus$outboundSchema;
}

/** @internal */
export const GetApiAdminSearchRequest$inboundSchema: z.ZodType<
  GetApiAdminSearchRequest,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    "user.email": z.string().optional(),
    "user.name": z.string().optional(),
    "user.walletAddress": z.string().optional(),
    "user.status": UserStatus$inboundSchema.optional(),
    "agent.name": z.string().optional(),
    "agent.ownerId": z.string().optional(),
    "agent.walletAddress": z.string().optional(),
    "agent.status": AgentStatus$inboundSchema.optional(),
    join: z.boolean().default(false),
  })
  .transform((v) => {
    return remap$(v, {
      "user.email": "userEmail",
      "user.name": "userName",
      "user.walletAddress": "userWalletAddress",
      "user.status": "userStatus",
      "agent.name": "agentName",
      "agent.ownerId": "agentOwnerId",
      "agent.walletAddress": "agentWalletAddress",
      "agent.status": "agentStatus",
    });
  });

/** @internal */
export type GetApiAdminSearchRequest$Outbound = {
  "user.email"?: string | undefined;
  "user.name"?: string | undefined;
  "user.walletAddress"?: string | undefined;
  "user.status"?: string | undefined;
  "agent.name"?: string | undefined;
  "agent.ownerId"?: string | undefined;
  "agent.walletAddress"?: string | undefined;
  "agent.status"?: string | undefined;
  join: boolean;
};

/** @internal */
export const GetApiAdminSearchRequest$outboundSchema: z.ZodType<
  GetApiAdminSearchRequest$Outbound,
  z.ZodTypeDef,
  GetApiAdminSearchRequest
> = z
  .object({
    userEmail: z.string().optional(),
    userName: z.string().optional(),
    userWalletAddress: z.string().optional(),
    userStatus: UserStatus$outboundSchema.optional(),
    agentName: z.string().optional(),
    agentOwnerId: z.string().optional(),
    agentWalletAddress: z.string().optional(),
    agentStatus: AgentStatus$outboundSchema.optional(),
    join: z.boolean().default(false),
  })
  .transform((v) => {
    return remap$(v, {
      userEmail: "user.email",
      userName: "user.name",
      userWalletAddress: "user.walletAddress",
      userStatus: "user.status",
      agentName: "agent.name",
      agentOwnerId: "agent.ownerId",
      agentWalletAddress: "agent.walletAddress",
      agentStatus: "agent.status",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminSearchRequest$ {
  /** @deprecated use `GetApiAdminSearchRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminSearchRequest$inboundSchema;
  /** @deprecated use `GetApiAdminSearchRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminSearchRequest$outboundSchema;
  /** @deprecated use `GetApiAdminSearchRequest$Outbound` instead. */
  export type Outbound = GetApiAdminSearchRequest$Outbound;
}

export function getApiAdminSearchRequestToJSON(
  getApiAdminSearchRequest: GetApiAdminSearchRequest,
): string {
  return JSON.stringify(
    GetApiAdminSearchRequest$outboundSchema.parse(getApiAdminSearchRequest),
  );
}

export function getApiAdminSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminSearchRequest' from JSON`,
  );
}

/** @internal */
export const GetApiAdminSearchUser$inboundSchema: z.ZodType<
  GetApiAdminSearchUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
  walletAddress: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiAdminSearchUser$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
  walletAddress?: string | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  status?: string | undefined;
  imageUrl?: string | null | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiAdminSearchUser$outboundSchema: z.ZodType<
  GetApiAdminSearchUser$Outbound,
  z.ZodTypeDef,
  GetApiAdminSearchUser
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
  walletAddress: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminSearchUser$ {
  /** @deprecated use `GetApiAdminSearchUser$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminSearchUser$inboundSchema;
  /** @deprecated use `GetApiAdminSearchUser$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminSearchUser$outboundSchema;
  /** @deprecated use `GetApiAdminSearchUser$Outbound` instead. */
  export type Outbound = GetApiAdminSearchUser$Outbound;
}

export function getApiAdminSearchUserToJSON(
  getApiAdminSearchUser: GetApiAdminSearchUser,
): string {
  return JSON.stringify(
    GetApiAdminSearchUser$outboundSchema.parse(getApiAdminSearchUser),
  );
}

export function getApiAdminSearchUserFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminSearchUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminSearchUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminSearchUser' from JSON`,
  );
}

/** @internal */
export const GetApiAdminSearchMetadata$inboundSchema: z.ZodType<
  GetApiAdminSearchMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiAdminSearchMetadata$Outbound = {};

/** @internal */
export const GetApiAdminSearchMetadata$outboundSchema: z.ZodType<
  GetApiAdminSearchMetadata$Outbound,
  z.ZodTypeDef,
  GetApiAdminSearchMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminSearchMetadata$ {
  /** @deprecated use `GetApiAdminSearchMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminSearchMetadata$inboundSchema;
  /** @deprecated use `GetApiAdminSearchMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminSearchMetadata$outboundSchema;
  /** @deprecated use `GetApiAdminSearchMetadata$Outbound` instead. */
  export type Outbound = GetApiAdminSearchMetadata$Outbound;
}

export function getApiAdminSearchMetadataToJSON(
  getApiAdminSearchMetadata: GetApiAdminSearchMetadata,
): string {
  return JSON.stringify(
    GetApiAdminSearchMetadata$outboundSchema.parse(getApiAdminSearchMetadata),
  );
}

export function getApiAdminSearchMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminSearchMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminSearchMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminSearchMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiAdminSearchAgent$inboundSchema: z.ZodType<
  GetApiAdminSearchAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAdminSearchMetadata$inboundSchema))
    .optional(),
  status: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiAdminSearchAgent$Outbound = {
  type?: string | undefined;
  id?: string | undefined;
  ownerId?: string | undefined;
  name?: string | undefined;
  handle?: string | undefined;
  description?: string | null | undefined;
  email?: string | null | undefined;
  metadata?: GetApiAdminSearchMetadata$Outbound | null | undefined;
  status?: string | undefined;
  imageUrl?: string | null | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiAdminSearchAgent$outboundSchema: z.ZodType<
  GetApiAdminSearchAgent$Outbound,
  z.ZodTypeDef,
  GetApiAdminSearchAgent
> = z.object({
  type: z.string().optional(),
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAdminSearchMetadata$outboundSchema))
    .optional(),
  status: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminSearchAgent$ {
  /** @deprecated use `GetApiAdminSearchAgent$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminSearchAgent$inboundSchema;
  /** @deprecated use `GetApiAdminSearchAgent$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminSearchAgent$outboundSchema;
  /** @deprecated use `GetApiAdminSearchAgent$Outbound` instead. */
  export type Outbound = GetApiAdminSearchAgent$Outbound;
}

export function getApiAdminSearchAgentToJSON(
  getApiAdminSearchAgent: GetApiAdminSearchAgent,
): string {
  return JSON.stringify(
    GetApiAdminSearchAgent$outboundSchema.parse(getApiAdminSearchAgent),
  );
}

export function getApiAdminSearchAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminSearchAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminSearchAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminSearchAgent' from JSON`,
  );
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.object({
    users: z
      .array(z.lazy(() => GetApiAdminSearchUser$inboundSchema))
      .optional(),
    agents: z
      .array(z.lazy(() => GetApiAdminSearchAgent$inboundSchema))
      .optional(),
  });

/** @internal */
export type Results$Outbound = {
  users?: Array<GetApiAdminSearchUser$Outbound> | undefined;
  agents?: Array<GetApiAdminSearchAgent$Outbound> | undefined;
};

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.object({
  users: z.array(z.lazy(() => GetApiAdminSearchUser$outboundSchema)).optional(),
  agents: z
    .array(z.lazy(() => GetApiAdminSearchAgent$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

export function resultsToJSON(results: Results): string {
  return JSON.stringify(Results$outboundSchema.parse(results));
}

export function resultsFromJSON(
  jsonString: string,
): SafeParseResult<Results, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Results$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Results' from JSON`,
  );
}

/** @internal */
export const GetApiAdminSearchResponse$inboundSchema: z.ZodType<
  GetApiAdminSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  join: z.boolean().optional(),
  results: z.lazy(() => Results$inboundSchema).optional(),
});

/** @internal */
export type GetApiAdminSearchResponse$Outbound = {
  success?: boolean | undefined;
  join?: boolean | undefined;
  results?: Results$Outbound | undefined;
};

/** @internal */
export const GetApiAdminSearchResponse$outboundSchema: z.ZodType<
  GetApiAdminSearchResponse$Outbound,
  z.ZodTypeDef,
  GetApiAdminSearchResponse
> = z.object({
  success: z.boolean().optional(),
  join: z.boolean().optional(),
  results: z.lazy(() => Results$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminSearchResponse$ {
  /** @deprecated use `GetApiAdminSearchResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminSearchResponse$inboundSchema;
  /** @deprecated use `GetApiAdminSearchResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminSearchResponse$outboundSchema;
  /** @deprecated use `GetApiAdminSearchResponse$Outbound` instead. */
  export type Outbound = GetApiAdminSearchResponse$Outbound;
}

export function getApiAdminSearchResponseToJSON(
  getApiAdminSearchResponse: GetApiAdminSearchResponse,
): string {
  return JSON.stringify(
    GetApiAdminSearchResponse$outboundSchema.parse(getApiAdminSearchResponse),
  );
}

export function getApiAdminSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminSearchResponse' from JSON`,
  );
}
