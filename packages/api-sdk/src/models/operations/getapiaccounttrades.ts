/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Trade = {
  /**
   * Unique trade ID
   */
  id?: string | undefined;
  /**
   * Team ID that executed the trade
   */
  teamId?: string | undefined;
  /**
   * ID of the competition this trade is part of
   */
  competitionId?: string | undefined;
  /**
   * Token address that was sold
   */
  fromToken?: string | undefined;
  /**
   * Token address that was bought
   */
  toToken?: string | undefined;
  /**
   * Amount of fromToken that was sold
   */
  fromAmount?: number | undefined;
  /**
   * Amount of toToken that was received
   */
  toAmount?: number | undefined;
  /**
   * Price at which the trade was executed
   */
  price?: number | undefined;
  /**
   * Whether the trade was successfully completed
   */
  success?: boolean | undefined;
  /**
   * Error message if the trade failed
   */
  error?: string | undefined;
  /**
   * Reason provided for executing the trade
   */
  reason?: string | undefined;
  /**
   * The USD value of the trade at execution time
   */
  tradeAmountUsd?: number | undefined;
  /**
   * Timestamp of when the trade was executed
   */
  timestamp?: Date | undefined;
  /**
   * Blockchain type of the source token
   */
  fromChain?: string | undefined;
  /**
   * Blockchain type of the destination token
   */
  toChain?: string | undefined;
  /**
   * Specific chain for the source token
   */
  fromSpecificChain?: string | undefined;
  /**
   * Specific chain for the destination token
   */
  toSpecificChain?: string | undefined;
};

/**
 * Team trade history
 */
export type GetApiAccountTradesResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  /**
   * Team ID
   */
  teamId?: string | undefined;
  trades?: Array<Trade> | undefined;
};

/** @internal */
export const Trade$inboundSchema: z.ZodType<Trade, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    teamId: z.string().optional(),
    competitionId: z.string().optional(),
    fromToken: z.string().optional(),
    toToken: z.string().optional(),
    fromAmount: z.number().optional(),
    toAmount: z.number().optional(),
    price: z.number().optional(),
    success: z.boolean().optional(),
    error: z.string().optional(),
    reason: z.string().optional(),
    tradeAmountUsd: z.number().optional(),
    timestamp: z
      .string()
      .datetime({ offset: true })
      .transform((v) => new Date(v))
      .optional(),
    fromChain: z.string().optional(),
    toChain: z.string().optional(),
    fromSpecificChain: z.string().optional(),
    toSpecificChain: z.string().optional(),
  });

/** @internal */
export type Trade$Outbound = {
  id?: string | undefined;
  teamId?: string | undefined;
  competitionId?: string | undefined;
  fromToken?: string | undefined;
  toToken?: string | undefined;
  fromAmount?: number | undefined;
  toAmount?: number | undefined;
  price?: number | undefined;
  success?: boolean | undefined;
  error?: string | undefined;
  reason?: string | undefined;
  tradeAmountUsd?: number | undefined;
  timestamp?: string | undefined;
  fromChain?: string | undefined;
  toChain?: string | undefined;
  fromSpecificChain?: string | undefined;
  toSpecificChain?: string | undefined;
};

/** @internal */
export const Trade$outboundSchema: z.ZodType<
  Trade$Outbound,
  z.ZodTypeDef,
  Trade
> = z.object({
  id: z.string().optional(),
  teamId: z.string().optional(),
  competitionId: z.string().optional(),
  fromToken: z.string().optional(),
  toToken: z.string().optional(),
  fromAmount: z.number().optional(),
  toAmount: z.number().optional(),
  price: z.number().optional(),
  success: z.boolean().optional(),
  error: z.string().optional(),
  reason: z.string().optional(),
  tradeAmountUsd: z.number().optional(),
  timestamp: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  fromChain: z.string().optional(),
  toChain: z.string().optional(),
  fromSpecificChain: z.string().optional(),
  toSpecificChain: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Trade$ {
  /** @deprecated use `Trade$inboundSchema` instead. */
  export const inboundSchema = Trade$inboundSchema;
  /** @deprecated use `Trade$outboundSchema` instead. */
  export const outboundSchema = Trade$outboundSchema;
  /** @deprecated use `Trade$Outbound` instead. */
  export type Outbound = Trade$Outbound;
}

export function tradeToJSON(trade: Trade): string {
  return JSON.stringify(Trade$outboundSchema.parse(trade));
}

export function tradeFromJSON(
  jsonString: string,
): SafeParseResult<Trade, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Trade$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Trade' from JSON`,
  );
}

/** @internal */
export const GetApiAccountTradesResponse$inboundSchema: z.ZodType<
  GetApiAccountTradesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  teamId: z.string().optional(),
  trades: z.array(z.lazy(() => Trade$inboundSchema)).optional(),
});

/** @internal */
export type GetApiAccountTradesResponse$Outbound = {
  success?: boolean | undefined;
  teamId?: string | undefined;
  trades?: Array<Trade$Outbound> | undefined;
};

/** @internal */
export const GetApiAccountTradesResponse$outboundSchema: z.ZodType<
  GetApiAccountTradesResponse$Outbound,
  z.ZodTypeDef,
  GetApiAccountTradesResponse
> = z.object({
  success: z.boolean().optional(),
  teamId: z.string().optional(),
  trades: z.array(z.lazy(() => Trade$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAccountTradesResponse$ {
  /** @deprecated use `GetApiAccountTradesResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAccountTradesResponse$inboundSchema;
  /** @deprecated use `GetApiAccountTradesResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAccountTradesResponse$outboundSchema;
  /** @deprecated use `GetApiAccountTradesResponse$Outbound` instead. */
  export type Outbound = GetApiAccountTradesResponse$Outbound;
}

export function getApiAccountTradesResponseToJSON(
  getApiAccountTradesResponse: GetApiAccountTradesResponse,
): string {
  return JSON.stringify(
    GetApiAccountTradesResponse$outboundSchema.parse(
      getApiAccountTradesResponse,
    ),
  );
}

export function getApiAccountTradesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAccountTradesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAccountTradesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAccountTradesResponse' from JSON`,
  );
}
