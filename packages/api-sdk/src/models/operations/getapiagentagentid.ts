/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAgentAgentIdRequest = {
  /**
   * The UUID of the agent being requested
   */
  agentId: string;
};

/**
 * Optional metadata for the agent
 */
export type GetApiAgentAgentIdMetadata = {};

export type BestPlacement = {
  competitionId?: string | undefined;
  postition?: number | undefined;
  participants?: number | undefined;
};

/**
 * stats on this agent's past performance
 */
export type Stats = {
  competitionsCompleted?: number | undefined;
  provenSkills?: Array<string> | undefined;
  bestPlacement?: BestPlacement | undefined;
};

/**
 * Agent profile retrieved successfully
 */
export type GetApiAgentAgentIdResponse = {
  id?: string | undefined;
  name?: string | undefined;
  imageUrl?: string | null | undefined;
  /**
   * Optional metadata for the agent
   */
  metadata?: GetApiAgentAgentIdMetadata | null | undefined;
  /**
   * stats on this agent's past performance
   */
  stats?: Stats | undefined;
  trophies?: Array<string> | undefined;
  hasUnclaimedRewards?: boolean | undefined;
};

/** @internal */
export const GetApiAgentAgentIdRequest$inboundSchema: z.ZodType<
  GetApiAgentAgentIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentId: z.string(),
});

/** @internal */
export type GetApiAgentAgentIdRequest$Outbound = {
  agentId: string;
};

/** @internal */
export const GetApiAgentAgentIdRequest$outboundSchema: z.ZodType<
  GetApiAgentAgentIdRequest$Outbound,
  z.ZodTypeDef,
  GetApiAgentAgentIdRequest
> = z.object({
  agentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentAgentIdRequest$ {
  /** @deprecated use `GetApiAgentAgentIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentAgentIdRequest$inboundSchema;
  /** @deprecated use `GetApiAgentAgentIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentAgentIdRequest$outboundSchema;
  /** @deprecated use `GetApiAgentAgentIdRequest$Outbound` instead. */
  export type Outbound = GetApiAgentAgentIdRequest$Outbound;
}

export function getApiAgentAgentIdRequestToJSON(
  getApiAgentAgentIdRequest: GetApiAgentAgentIdRequest,
): string {
  return JSON.stringify(
    GetApiAgentAgentIdRequest$outboundSchema.parse(getApiAgentAgentIdRequest),
  );
}

export function getApiAgentAgentIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentAgentIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentAgentIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentAgentIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiAgentAgentIdMetadata$inboundSchema: z.ZodType<
  GetApiAgentAgentIdMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiAgentAgentIdMetadata$Outbound = {};

/** @internal */
export const GetApiAgentAgentIdMetadata$outboundSchema: z.ZodType<
  GetApiAgentAgentIdMetadata$Outbound,
  z.ZodTypeDef,
  GetApiAgentAgentIdMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentAgentIdMetadata$ {
  /** @deprecated use `GetApiAgentAgentIdMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentAgentIdMetadata$inboundSchema;
  /** @deprecated use `GetApiAgentAgentIdMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentAgentIdMetadata$outboundSchema;
  /** @deprecated use `GetApiAgentAgentIdMetadata$Outbound` instead. */
  export type Outbound = GetApiAgentAgentIdMetadata$Outbound;
}

export function getApiAgentAgentIdMetadataToJSON(
  getApiAgentAgentIdMetadata: GetApiAgentAgentIdMetadata,
): string {
  return JSON.stringify(
    GetApiAgentAgentIdMetadata$outboundSchema.parse(getApiAgentAgentIdMetadata),
  );
}

export function getApiAgentAgentIdMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentAgentIdMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentAgentIdMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentAgentIdMetadata' from JSON`,
  );
}

/** @internal */
export const BestPlacement$inboundSchema: z.ZodType<
  BestPlacement,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
  postition: z.number().int().optional(),
  participants: z.number().int().optional(),
});

/** @internal */
export type BestPlacement$Outbound = {
  competitionId?: string | undefined;
  postition?: number | undefined;
  participants?: number | undefined;
};

/** @internal */
export const BestPlacement$outboundSchema: z.ZodType<
  BestPlacement$Outbound,
  z.ZodTypeDef,
  BestPlacement
> = z.object({
  competitionId: z.string().optional(),
  postition: z.number().int().optional(),
  participants: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BestPlacement$ {
  /** @deprecated use `BestPlacement$inboundSchema` instead. */
  export const inboundSchema = BestPlacement$inboundSchema;
  /** @deprecated use `BestPlacement$outboundSchema` instead. */
  export const outboundSchema = BestPlacement$outboundSchema;
  /** @deprecated use `BestPlacement$Outbound` instead. */
  export type Outbound = BestPlacement$Outbound;
}

export function bestPlacementToJSON(bestPlacement: BestPlacement): string {
  return JSON.stringify(BestPlacement$outboundSchema.parse(bestPlacement));
}

export function bestPlacementFromJSON(
  jsonString: string,
): SafeParseResult<BestPlacement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BestPlacement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BestPlacement' from JSON`,
  );
}

/** @internal */
export const Stats$inboundSchema: z.ZodType<Stats, z.ZodTypeDef, unknown> =
  z.object({
    competitionsCompleted: z.number().int().optional(),
    provenSkills: z.array(z.string()).optional(),
    bestPlacement: z.lazy(() => BestPlacement$inboundSchema).optional(),
  });

/** @internal */
export type Stats$Outbound = {
  competitionsCompleted?: number | undefined;
  provenSkills?: Array<string> | undefined;
  bestPlacement?: BestPlacement$Outbound | undefined;
};

/** @internal */
export const Stats$outboundSchema: z.ZodType<
  Stats$Outbound,
  z.ZodTypeDef,
  Stats
> = z.object({
  competitionsCompleted: z.number().int().optional(),
  provenSkills: z.array(z.string()).optional(),
  bestPlacement: z.lazy(() => BestPlacement$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stats$ {
  /** @deprecated use `Stats$inboundSchema` instead. */
  export const inboundSchema = Stats$inboundSchema;
  /** @deprecated use `Stats$outboundSchema` instead. */
  export const outboundSchema = Stats$outboundSchema;
  /** @deprecated use `Stats$Outbound` instead. */
  export type Outbound = Stats$Outbound;
}

export function statsToJSON(stats: Stats): string {
  return JSON.stringify(Stats$outboundSchema.parse(stats));
}

export function statsFromJSON(
  jsonString: string,
): SafeParseResult<Stats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stats' from JSON`,
  );
}

/** @internal */
export const GetApiAgentAgentIdResponse$inboundSchema: z.ZodType<
  GetApiAgentAgentIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAgentAgentIdMetadata$inboundSchema))
    .optional(),
  stats: z.lazy(() => Stats$inboundSchema).optional(),
  trophies: z.array(z.string()).optional(),
  hasUnclaimedRewards: z.boolean().optional(),
});

/** @internal */
export type GetApiAgentAgentIdResponse$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  imageUrl?: string | null | undefined;
  metadata?: GetApiAgentAgentIdMetadata$Outbound | null | undefined;
  stats?: Stats$Outbound | undefined;
  trophies?: Array<string> | undefined;
  hasUnclaimedRewards?: boolean | undefined;
};

/** @internal */
export const GetApiAgentAgentIdResponse$outboundSchema: z.ZodType<
  GetApiAgentAgentIdResponse$Outbound,
  z.ZodTypeDef,
  GetApiAgentAgentIdResponse
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAgentAgentIdMetadata$outboundSchema))
    .optional(),
  stats: z.lazy(() => Stats$outboundSchema).optional(),
  trophies: z.array(z.string()).optional(),
  hasUnclaimedRewards: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentAgentIdResponse$ {
  /** @deprecated use `GetApiAgentAgentIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentAgentIdResponse$inboundSchema;
  /** @deprecated use `GetApiAgentAgentIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentAgentIdResponse$outboundSchema;
  /** @deprecated use `GetApiAgentAgentIdResponse$Outbound` instead. */
  export type Outbound = GetApiAgentAgentIdResponse$Outbound;
}

export function getApiAgentAgentIdResponseToJSON(
  getApiAgentAgentIdResponse: GetApiAgentAgentIdResponse,
): string {
  return JSON.stringify(
    GetApiAgentAgentIdResponse$outboundSchema.parse(getApiAgentAgentIdResponse),
  );
}

export function getApiAgentAgentIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentAgentIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentAgentIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentAgentIdResponse' from JSON`,
  );
}
