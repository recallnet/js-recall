/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiUserAgentsSecurity = {
  siweSession: string;
};

export type GetApiUserAgentsMetadata = {};

export const GetApiUserAgentsStatus = {
  Active: "active",
  Inactive: "inactive",
  Suspended: "suspended",
  Deleted: "deleted",
} as const;
export type GetApiUserAgentsStatus = ClosedEnum<typeof GetApiUserAgentsStatus>;

export type GetApiUserAgentsAgent = {
  id?: string | undefined;
  ownerId?: string | undefined;
  walletAddress?: string | null | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  email?: string | undefined;
  imageUrl?: string | undefined;
  metadata?: GetApiUserAgentsMetadata | undefined;
  status?: GetApiUserAgentsStatus | undefined;
  /**
   * Reason for deactivation (if status is inactive)
   */
  deactivationReason?: string | null | undefined;
  /**
   * Date when agent was deactivated (if status is inactive)
   */
  deactivationDate?: Date | null | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/**
 * Agents retrieved successfully
 */
export type GetApiUserAgentsResponse = {
  success?: boolean | undefined;
  userId?: string | undefined;
  agents?: Array<GetApiUserAgentsAgent> | undefined;
};

/** @internal */
export const GetApiUserAgentsSecurity$inboundSchema: z.ZodType<
  GetApiUserAgentsSecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    SIWESession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      SIWESession: "siweSession",
    });
  });

/** @internal */
export type GetApiUserAgentsSecurity$Outbound = {
  SIWESession: string;
};

/** @internal */
export const GetApiUserAgentsSecurity$outboundSchema: z.ZodType<
  GetApiUserAgentsSecurity$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsSecurity
> = z
  .object({
    siweSession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      siweSession: "SIWESession",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsSecurity$ {
  /** @deprecated use `GetApiUserAgentsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsSecurity$inboundSchema;
  /** @deprecated use `GetApiUserAgentsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsSecurity$outboundSchema;
  /** @deprecated use `GetApiUserAgentsSecurity$Outbound` instead. */
  export type Outbound = GetApiUserAgentsSecurity$Outbound;
}

export function getApiUserAgentsSecurityToJSON(
  getApiUserAgentsSecurity: GetApiUserAgentsSecurity,
): string {
  return JSON.stringify(
    GetApiUserAgentsSecurity$outboundSchema.parse(getApiUserAgentsSecurity),
  );
}

export function getApiUserAgentsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsSecurity' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsMetadata$inboundSchema: z.ZodType<
  GetApiUserAgentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiUserAgentsMetadata$Outbound = {};

/** @internal */
export const GetApiUserAgentsMetadata$outboundSchema: z.ZodType<
  GetApiUserAgentsMetadata$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsMetadata$ {
  /** @deprecated use `GetApiUserAgentsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsMetadata$inboundSchema;
  /** @deprecated use `GetApiUserAgentsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsMetadata$outboundSchema;
  /** @deprecated use `GetApiUserAgentsMetadata$Outbound` instead. */
  export type Outbound = GetApiUserAgentsMetadata$Outbound;
}

export function getApiUserAgentsMetadataToJSON(
  getApiUserAgentsMetadata: GetApiUserAgentsMetadata,
): string {
  return JSON.stringify(
    GetApiUserAgentsMetadata$outboundSchema.parse(getApiUserAgentsMetadata),
  );
}

export function getApiUserAgentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiUserAgentsStatus
> = z.nativeEnum(GetApiUserAgentsStatus);

/** @internal */
export const GetApiUserAgentsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiUserAgentsStatus
> = GetApiUserAgentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsStatus$ {
  /** @deprecated use `GetApiUserAgentsStatus$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsStatus$inboundSchema;
  /** @deprecated use `GetApiUserAgentsStatus$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsStatus$outboundSchema;
}

/** @internal */
export const GetApiUserAgentsAgent$inboundSchema: z.ZodType<
  GetApiUserAgentsAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  walletAddress: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  email: z.string().optional(),
  imageUrl: z.string().optional(),
  metadata: z.lazy(() => GetApiUserAgentsMetadata$inboundSchema).optional(),
  status: GetApiUserAgentsStatus$inboundSchema.optional(),
  deactivationReason: z.nullable(z.string()).optional(),
  deactivationDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiUserAgentsAgent$Outbound = {
  id?: string | undefined;
  ownerId?: string | undefined;
  walletAddress?: string | null | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  email?: string | undefined;
  imageUrl?: string | undefined;
  metadata?: GetApiUserAgentsMetadata$Outbound | undefined;
  status?: string | undefined;
  deactivationReason?: string | null | undefined;
  deactivationDate?: string | null | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiUserAgentsAgent$outboundSchema: z.ZodType<
  GetApiUserAgentsAgent$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgent
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  walletAddress: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  email: z.string().optional(),
  imageUrl: z.string().optional(),
  metadata: z.lazy(() => GetApiUserAgentsMetadata$outboundSchema).optional(),
  status: GetApiUserAgentsStatus$outboundSchema.optional(),
  deactivationReason: z.nullable(z.string()).optional(),
  deactivationDate: z
    .nullable(z.date().transform((v) => v.toISOString()))
    .optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgent$ {
  /** @deprecated use `GetApiUserAgentsAgent$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgent$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgent$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgent$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgent$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgent$Outbound;
}

export function getApiUserAgentsAgentToJSON(
  getApiUserAgentsAgent: GetApiUserAgentsAgent,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgent$outboundSchema.parse(getApiUserAgentsAgent),
  );
}

export function getApiUserAgentsAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgent' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsResponse$inboundSchema: z.ZodType<
  GetApiUserAgentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  userId: z.string().optional(),
  agents: z.array(z.lazy(() => GetApiUserAgentsAgent$inboundSchema)).optional(),
});

/** @internal */
export type GetApiUserAgentsResponse$Outbound = {
  success?: boolean | undefined;
  userId?: string | undefined;
  agents?: Array<GetApiUserAgentsAgent$Outbound> | undefined;
};

/** @internal */
export const GetApiUserAgentsResponse$outboundSchema: z.ZodType<
  GetApiUserAgentsResponse$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsResponse
> = z.object({
  success: z.boolean().optional(),
  userId: z.string().optional(),
  agents: z
    .array(z.lazy(() => GetApiUserAgentsAgent$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsResponse$ {
  /** @deprecated use `GetApiUserAgentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsResponse$inboundSchema;
  /** @deprecated use `GetApiUserAgentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsResponse$outboundSchema;
  /** @deprecated use `GetApiUserAgentsResponse$Outbound` instead. */
  export type Outbound = GetApiUserAgentsResponse$Outbound;
}

export function getApiUserAgentsResponseToJSON(
  getApiUserAgentsResponse: GetApiUserAgentsResponse,
): string {
  return JSON.stringify(
    GetApiUserAgentsResponse$outboundSchema.parse(getApiUserAgentsResponse),
  );
}

export function getApiUserAgentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsResponse' from JSON`,
  );
}
