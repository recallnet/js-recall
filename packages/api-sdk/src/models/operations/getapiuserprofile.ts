/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiUserProfileSecurity = {
  siweSession: string;
};

export const GetApiUserProfileStatus = {
  Active: "active",
  Inactive: "inactive",
  Suspended: "suspended",
  Deleted: "deleted",
} as const;
export type GetApiUserProfileStatus = ClosedEnum<
  typeof GetApiUserProfileStatus
>;

export type GetApiUserProfileMetadata = {};

export type GetApiUserProfileUser = {
  id?: string | undefined;
  walletAddress?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  /**
   * Whether the user's email address has been verified
   */
  isEmailVerified?: boolean | undefined;
  imageUrl?: string | undefined;
  status?: GetApiUserProfileStatus | undefined;
  metadata?: GetApiUserProfileMetadata | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/**
 * User profile retrieved successfully
 */
export type GetApiUserProfileResponse = {
  success?: boolean | undefined;
  user?: GetApiUserProfileUser | undefined;
};

/** @internal */
export const GetApiUserProfileSecurity$inboundSchema: z.ZodType<
  GetApiUserProfileSecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    SIWESession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      SIWESession: "siweSession",
    });
  });

/** @internal */
export type GetApiUserProfileSecurity$Outbound = {
  SIWESession: string;
};

/** @internal */
export const GetApiUserProfileSecurity$outboundSchema: z.ZodType<
  GetApiUserProfileSecurity$Outbound,
  z.ZodTypeDef,
  GetApiUserProfileSecurity
> = z
  .object({
    siweSession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      siweSession: "SIWESession",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserProfileSecurity$ {
  /** @deprecated use `GetApiUserProfileSecurity$inboundSchema` instead. */
  export const inboundSchema = GetApiUserProfileSecurity$inboundSchema;
  /** @deprecated use `GetApiUserProfileSecurity$outboundSchema` instead. */
  export const outboundSchema = GetApiUserProfileSecurity$outboundSchema;
  /** @deprecated use `GetApiUserProfileSecurity$Outbound` instead. */
  export type Outbound = GetApiUserProfileSecurity$Outbound;
}

export function getApiUserProfileSecurityToJSON(
  getApiUserProfileSecurity: GetApiUserProfileSecurity,
): string {
  return JSON.stringify(
    GetApiUserProfileSecurity$outboundSchema.parse(getApiUserProfileSecurity),
  );
}

export function getApiUserProfileSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserProfileSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserProfileSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserProfileSecurity' from JSON`,
  );
}

/** @internal */
export const GetApiUserProfileStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiUserProfileStatus
> = z.nativeEnum(GetApiUserProfileStatus);

/** @internal */
export const GetApiUserProfileStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiUserProfileStatus
> = GetApiUserProfileStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserProfileStatus$ {
  /** @deprecated use `GetApiUserProfileStatus$inboundSchema` instead. */
  export const inboundSchema = GetApiUserProfileStatus$inboundSchema;
  /** @deprecated use `GetApiUserProfileStatus$outboundSchema` instead. */
  export const outboundSchema = GetApiUserProfileStatus$outboundSchema;
}

/** @internal */
export const GetApiUserProfileMetadata$inboundSchema: z.ZodType<
  GetApiUserProfileMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiUserProfileMetadata$Outbound = {};

/** @internal */
export const GetApiUserProfileMetadata$outboundSchema: z.ZodType<
  GetApiUserProfileMetadata$Outbound,
  z.ZodTypeDef,
  GetApiUserProfileMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserProfileMetadata$ {
  /** @deprecated use `GetApiUserProfileMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiUserProfileMetadata$inboundSchema;
  /** @deprecated use `GetApiUserProfileMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiUserProfileMetadata$outboundSchema;
  /** @deprecated use `GetApiUserProfileMetadata$Outbound` instead. */
  export type Outbound = GetApiUserProfileMetadata$Outbound;
}

export function getApiUserProfileMetadataToJSON(
  getApiUserProfileMetadata: GetApiUserProfileMetadata,
): string {
  return JSON.stringify(
    GetApiUserProfileMetadata$outboundSchema.parse(getApiUserProfileMetadata),
  );
}

export function getApiUserProfileMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserProfileMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserProfileMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserProfileMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiUserProfileUser$inboundSchema: z.ZodType<
  GetApiUserProfileUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  walletAddress: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  isEmailVerified: z.boolean().optional(),
  imageUrl: z.string().optional(),
  status: GetApiUserProfileStatus$inboundSchema.optional(),
  metadata: z.lazy(() => GetApiUserProfileMetadata$inboundSchema).optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiUserProfileUser$Outbound = {
  id?: string | undefined;
  walletAddress?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  isEmailVerified?: boolean | undefined;
  imageUrl?: string | undefined;
  status?: string | undefined;
  metadata?: GetApiUserProfileMetadata$Outbound | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiUserProfileUser$outboundSchema: z.ZodType<
  GetApiUserProfileUser$Outbound,
  z.ZodTypeDef,
  GetApiUserProfileUser
> = z.object({
  id: z.string().optional(),
  walletAddress: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  isEmailVerified: z.boolean().optional(),
  imageUrl: z.string().optional(),
  status: GetApiUserProfileStatus$outboundSchema.optional(),
  metadata: z.lazy(() => GetApiUserProfileMetadata$outboundSchema).optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserProfileUser$ {
  /** @deprecated use `GetApiUserProfileUser$inboundSchema` instead. */
  export const inboundSchema = GetApiUserProfileUser$inboundSchema;
  /** @deprecated use `GetApiUserProfileUser$outboundSchema` instead. */
  export const outboundSchema = GetApiUserProfileUser$outboundSchema;
  /** @deprecated use `GetApiUserProfileUser$Outbound` instead. */
  export type Outbound = GetApiUserProfileUser$Outbound;
}

export function getApiUserProfileUserToJSON(
  getApiUserProfileUser: GetApiUserProfileUser,
): string {
  return JSON.stringify(
    GetApiUserProfileUser$outboundSchema.parse(getApiUserProfileUser),
  );
}

export function getApiUserProfileUserFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserProfileUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserProfileUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserProfileUser' from JSON`,
  );
}

/** @internal */
export const GetApiUserProfileResponse$inboundSchema: z.ZodType<
  GetApiUserProfileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  user: z.lazy(() => GetApiUserProfileUser$inboundSchema).optional(),
});

/** @internal */
export type GetApiUserProfileResponse$Outbound = {
  success?: boolean | undefined;
  user?: GetApiUserProfileUser$Outbound | undefined;
};

/** @internal */
export const GetApiUserProfileResponse$outboundSchema: z.ZodType<
  GetApiUserProfileResponse$Outbound,
  z.ZodTypeDef,
  GetApiUserProfileResponse
> = z.object({
  success: z.boolean().optional(),
  user: z.lazy(() => GetApiUserProfileUser$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserProfileResponse$ {
  /** @deprecated use `GetApiUserProfileResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiUserProfileResponse$inboundSchema;
  /** @deprecated use `GetApiUserProfileResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiUserProfileResponse$outboundSchema;
  /** @deprecated use `GetApiUserProfileResponse$Outbound` instead. */
  export type Outbound = GetApiUserProfileResponse$Outbound;
}

export function getApiUserProfileResponseToJSON(
  getApiUserProfileResponse: GetApiUserProfileResponse,
): string {
  return JSON.stringify(
    GetApiUserProfileResponse$outboundSchema.parse(getApiUserProfileResponse),
  );
}

export function getApiUserProfileResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserProfileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserProfileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserProfileResponse' from JSON`,
  );
}
