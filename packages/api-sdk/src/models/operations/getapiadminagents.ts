/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Optional metadata for the agent
 */
export type GetApiAdminAgentsMetadata = {};

export type GetApiAdminAgentsAgent = {
  /**
   * Agent ID
   */
  id?: string | undefined;
  /**
   * Agent owner ID
   */
  ownerId?: string | undefined;
  /**
   * Agent name
   */
  name?: string | undefined;
  /**
   * Agent email
   */
  email?: string | null | undefined;
  /**
   * Agent description
   */
  description?: string | null | undefined;
  /**
   * Agent status
   */
  status?: string | undefined;
  /**
   * URL to the agent's image
   */
  imageUrl?: string | null | undefined;
  /**
   * Optional metadata for the agent
   */
  metadata?: GetApiAdminAgentsMetadata | null | undefined;
  /**
   * Agent creation timestamp
   */
  createdAt?: Date | undefined;
  /**
   * Agent update timestamp
   */
  updatedAt?: Date | undefined;
};

/**
 * List of agents
 */
export type GetApiAdminAgentsResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  agents?: Array<GetApiAdminAgentsAgent> | undefined;
};

/** @internal */
export const GetApiAdminAgentsMetadata$inboundSchema: z.ZodType<
  GetApiAdminAgentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiAdminAgentsMetadata$Outbound = {};

/** @internal */
export const GetApiAdminAgentsMetadata$outboundSchema: z.ZodType<
  GetApiAdminAgentsMetadata$Outbound,
  z.ZodTypeDef,
  GetApiAdminAgentsMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminAgentsMetadata$ {
  /** @deprecated use `GetApiAdminAgentsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminAgentsMetadata$inboundSchema;
  /** @deprecated use `GetApiAdminAgentsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminAgentsMetadata$outboundSchema;
  /** @deprecated use `GetApiAdminAgentsMetadata$Outbound` instead. */
  export type Outbound = GetApiAdminAgentsMetadata$Outbound;
}

export function getApiAdminAgentsMetadataToJSON(
  getApiAdminAgentsMetadata: GetApiAdminAgentsMetadata,
): string {
  return JSON.stringify(
    GetApiAdminAgentsMetadata$outboundSchema.parse(getApiAdminAgentsMetadata),
  );
}

export function getApiAdminAgentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminAgentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminAgentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminAgentsMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiAdminAgentsAgent$inboundSchema: z.ZodType<
  GetApiAdminAgentsAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.string().optional(),
  email: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAdminAgentsMetadata$inboundSchema))
    .optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiAdminAgentsAgent$Outbound = {
  id?: string | undefined;
  ownerId?: string | undefined;
  name?: string | undefined;
  email?: string | null | undefined;
  description?: string | null | undefined;
  status?: string | undefined;
  imageUrl?: string | null | undefined;
  metadata?: GetApiAdminAgentsMetadata$Outbound | null | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiAdminAgentsAgent$outboundSchema: z.ZodType<
  GetApiAdminAgentsAgent$Outbound,
  z.ZodTypeDef,
  GetApiAdminAgentsAgent
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.string().optional(),
  email: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAdminAgentsMetadata$outboundSchema))
    .optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminAgentsAgent$ {
  /** @deprecated use `GetApiAdminAgentsAgent$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminAgentsAgent$inboundSchema;
  /** @deprecated use `GetApiAdminAgentsAgent$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminAgentsAgent$outboundSchema;
  /** @deprecated use `GetApiAdminAgentsAgent$Outbound` instead. */
  export type Outbound = GetApiAdminAgentsAgent$Outbound;
}

export function getApiAdminAgentsAgentToJSON(
  getApiAdminAgentsAgent: GetApiAdminAgentsAgent,
): string {
  return JSON.stringify(
    GetApiAdminAgentsAgent$outboundSchema.parse(getApiAdminAgentsAgent),
  );
}

export function getApiAdminAgentsAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminAgentsAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminAgentsAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminAgentsAgent' from JSON`,
  );
}

/** @internal */
export const GetApiAdminAgentsResponse$inboundSchema: z.ZodType<
  GetApiAdminAgentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  agents: z
    .array(z.lazy(() => GetApiAdminAgentsAgent$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiAdminAgentsResponse$Outbound = {
  success?: boolean | undefined;
  agents?: Array<GetApiAdminAgentsAgent$Outbound> | undefined;
};

/** @internal */
export const GetApiAdminAgentsResponse$outboundSchema: z.ZodType<
  GetApiAdminAgentsResponse$Outbound,
  z.ZodTypeDef,
  GetApiAdminAgentsResponse
> = z.object({
  success: z.boolean().optional(),
  agents: z
    .array(z.lazy(() => GetApiAdminAgentsAgent$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminAgentsResponse$ {
  /** @deprecated use `GetApiAdminAgentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminAgentsResponse$inboundSchema;
  /** @deprecated use `GetApiAdminAgentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminAgentsResponse$outboundSchema;
  /** @deprecated use `GetApiAdminAgentsResponse$Outbound` instead. */
  export type Outbound = GetApiAdminAgentsResponse$Outbound;
}

export function getApiAdminAgentsResponseToJSON(
  getApiAdminAgentsResponse: GetApiAdminAgentsResponse,
): string {
  return JSON.stringify(
    GetApiAdminAgentsResponse$outboundSchema.parse(getApiAdminAgentsResponse),
  );
}

export function getApiAdminAgentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminAgentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminAgentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminAgentsResponse' from JSON`,
  );
}
