/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiCompetitionsRequest = {
  /**
   * Optional filtering by competition status (default value is `active`)
   */
  status?: string | undefined;
  /**
   * Optional field to sort by (default value is `createdDate`)
   */
  sort?: string | undefined;
  /**
   * Optional field to choose max size of result set (default value is `10`)
   */
  limit?: string | undefined;
  /**
   * Optional field to choose offset of result set (default value is `0`)
   */
  offset?: string | undefined;
};

/**
 * Competition status (always PENDING)
 */
export const GetApiCompetitionsStatus = {
  Pending: "PENDING",
} as const;
/**
 * Competition status (always PENDING)
 */
export type GetApiCompetitionsStatus = ClosedEnum<
  typeof GetApiCompetitionsStatus
>;

/**
 * The type of cross-chain trading allowed in this competition
 */
export const GetApiCompetitionsCrossChainTradingType = {
  DisallowAll: "disallowAll",
  DisallowXParent: "disallowXParent",
  Allow: "allow",
} as const;
/**
 * The type of cross-chain trading allowed in this competition
 */
export type GetApiCompetitionsCrossChainTradingType = ClosedEnum<
  typeof GetApiCompetitionsCrossChainTradingType
>;

export type GetApiCompetitionsCompetition = {
  /**
   * Competition ID
   */
  id?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | null | undefined;
  /**
   * External URL for competition details
   */
  externalLink?: string | null | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | null | undefined;
  /**
   * Competition status (always PENDING)
   */
  status?: GetApiCompetitionsStatus | undefined;
  /**
   * The type of cross-chain trading allowed in this competition
   */
  crossChainTradingType?: GetApiCompetitionsCrossChainTradingType | undefined;
  /**
   * When the competition was created
   */
  createdAt?: Date | undefined;
  /**
   * When the competition was last updated
   */
  updatedAt?: Date | undefined;
};

/**
 * Competitions retrieved successfully
 */
export type GetApiCompetitionsResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  competitions?: Array<GetApiCompetitionsCompetition> | undefined;
};

/** @internal */
export const GetApiCompetitionsRequest$inboundSchema: z.ZodType<
  GetApiCompetitionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
  sort: z.string().optional(),
  limit: z.string().optional(),
  offset: z.string().optional(),
});

/** @internal */
export type GetApiCompetitionsRequest$Outbound = {
  status?: string | undefined;
  sort?: string | undefined;
  limit?: string | undefined;
  offset?: string | undefined;
};

/** @internal */
export const GetApiCompetitionsRequest$outboundSchema: z.ZodType<
  GetApiCompetitionsRequest$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsRequest
> = z.object({
  status: z.string().optional(),
  sort: z.string().optional(),
  limit: z.string().optional(),
  offset: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsRequest$ {
  /** @deprecated use `GetApiCompetitionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionsRequest$inboundSchema;
  /** @deprecated use `GetApiCompetitionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiCompetitionsRequest$outboundSchema;
  /** @deprecated use `GetApiCompetitionsRequest$Outbound` instead. */
  export type Outbound = GetApiCompetitionsRequest$Outbound;
}

export function getApiCompetitionsRequestToJSON(
  getApiCompetitionsRequest: GetApiCompetitionsRequest,
): string {
  return JSON.stringify(
    GetApiCompetitionsRequest$outboundSchema.parse(getApiCompetitionsRequest),
  );
}

export function getApiCompetitionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiCompetitionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsRequest' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsStatus
> = z.nativeEnum(GetApiCompetitionsStatus);

/** @internal */
export const GetApiCompetitionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsStatus
> = GetApiCompetitionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsStatus$ {
  /** @deprecated use `GetApiCompetitionsStatus$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionsStatus$inboundSchema;
  /** @deprecated use `GetApiCompetitionsStatus$outboundSchema` instead. */
  export const outboundSchema = GetApiCompetitionsStatus$outboundSchema;
}

/** @internal */
export const GetApiCompetitionsCrossChainTradingType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCrossChainTradingType
> = z.nativeEnum(GetApiCompetitionsCrossChainTradingType);

/** @internal */
export const GetApiCompetitionsCrossChainTradingType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCrossChainTradingType
> = GetApiCompetitionsCrossChainTradingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCrossChainTradingType$ {
  /** @deprecated use `GetApiCompetitionsCrossChainTradingType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCrossChainTradingType$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCrossChainTradingType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCrossChainTradingType$outboundSchema;
}

/** @internal */
export const GetApiCompetitionsCompetition$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiCompetitionsStatus$inboundSchema.optional(),
  crossChainTradingType:
    GetApiCompetitionsCrossChainTradingType$inboundSchema.optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiCompetitionsCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  externalLink?: string | null | undefined;
  imageUrl?: string | null | undefined;
  status?: string | undefined;
  crossChainTradingType?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetition$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetition$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiCompetitionsStatus$outboundSchema.optional(),
  crossChainTradingType:
    GetApiCompetitionsCrossChainTradingType$outboundSchema.optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetition$ {
  /** @deprecated use `GetApiCompetitionsCompetition$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionsCompetition$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetition$outboundSchema` instead. */
  export const outboundSchema = GetApiCompetitionsCompetition$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetition$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetition$Outbound;
}

export function getApiCompetitionsCompetitionToJSON(
  getApiCompetitionsCompetition: GetApiCompetitionsCompetition,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetition$outboundSchema.parse(
      getApiCompetitionsCompetition,
    ),
  );
}

export function getApiCompetitionsCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsCompetition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiCompetitionsCompetition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsCompetition' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsResponse$inboundSchema: z.ZodType<
  GetApiCompetitionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competitions: z
    .array(z.lazy(() => GetApiCompetitionsCompetition$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiCompetitionsResponse$Outbound = {
  success?: boolean | undefined;
  competitions?: Array<GetApiCompetitionsCompetition$Outbound> | undefined;
};

/** @internal */
export const GetApiCompetitionsResponse$outboundSchema: z.ZodType<
  GetApiCompetitionsResponse$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsResponse
> = z.object({
  success: z.boolean().optional(),
  competitions: z
    .array(z.lazy(() => GetApiCompetitionsCompetition$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsResponse$ {
  /** @deprecated use `GetApiCompetitionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionsResponse$inboundSchema;
  /** @deprecated use `GetApiCompetitionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiCompetitionsResponse$outboundSchema;
  /** @deprecated use `GetApiCompetitionsResponse$Outbound` instead. */
  export type Outbound = GetApiCompetitionsResponse$Outbound;
}

export function getApiCompetitionsResponseToJSON(
  getApiCompetitionsResponse: GetApiCompetitionsResponse,
): string {
  return JSON.stringify(
    GetApiCompetitionsResponse$outboundSchema.parse(getApiCompetitionsResponse),
  );
}

export function getApiCompetitionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiCompetitionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsResponse' from JSON`,
  );
}
