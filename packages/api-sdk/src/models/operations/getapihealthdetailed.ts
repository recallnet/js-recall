/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of individual services
 */
export type Services = {
  /**
   * Status of the price tracker service
   */
  priceTracker?: string | undefined;
  /**
   * Status of the balance manager service
   */
  balanceManager?: string | undefined;
  /**
   * Status of the trade simulator service
   */
  tradeSimulator?: string | undefined;
  /**
   * Status of the competition manager service
   */
  competitionManager?: string | undefined;
  /**
   * Status of the team manager service
   */
  teamManager?: string | undefined;
};

/**
 * Detailed health status
 */
export type GetApiHealthDetailedResponse = {
  /**
   * Overall health status of the API
   */
  status?: string | undefined;
  /**
   * Current server time
   */
  timestamp?: Date | undefined;
  /**
   * Server uptime in seconds
   */
  uptime?: number | undefined;
  /**
   * API version
   */
  version?: string | undefined;
  /**
   * Status of individual services
   */
  services?: Services | undefined;
};

/** @internal */
export const Services$inboundSchema: z.ZodType<
  Services,
  z.ZodTypeDef,
  unknown
> = z.object({
  priceTracker: z.string().optional(),
  balanceManager: z.string().optional(),
  tradeSimulator: z.string().optional(),
  competitionManager: z.string().optional(),
  teamManager: z.string().optional(),
});

/** @internal */
export type Services$Outbound = {
  priceTracker?: string | undefined;
  balanceManager?: string | undefined;
  tradeSimulator?: string | undefined;
  competitionManager?: string | undefined;
  teamManager?: string | undefined;
};

/** @internal */
export const Services$outboundSchema: z.ZodType<
  Services$Outbound,
  z.ZodTypeDef,
  Services
> = z.object({
  priceTracker: z.string().optional(),
  balanceManager: z.string().optional(),
  tradeSimulator: z.string().optional(),
  competitionManager: z.string().optional(),
  teamManager: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Services$ {
  /** @deprecated use `Services$inboundSchema` instead. */
  export const inboundSchema = Services$inboundSchema;
  /** @deprecated use `Services$outboundSchema` instead. */
  export const outboundSchema = Services$outboundSchema;
  /** @deprecated use `Services$Outbound` instead. */
  export type Outbound = Services$Outbound;
}

export function servicesToJSON(services: Services): string {
  return JSON.stringify(Services$outboundSchema.parse(services));
}

export function servicesFromJSON(
  jsonString: string,
): SafeParseResult<Services, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Services$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Services' from JSON`,
  );
}

/** @internal */
export const GetApiHealthDetailedResponse$inboundSchema: z.ZodType<
  GetApiHealthDetailedResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
  timestamp: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  uptime: z.number().optional(),
  version: z.string().optional(),
  services: z.lazy(() => Services$inboundSchema).optional(),
});

/** @internal */
export type GetApiHealthDetailedResponse$Outbound = {
  status?: string | undefined;
  timestamp?: string | undefined;
  uptime?: number | undefined;
  version?: string | undefined;
  services?: Services$Outbound | undefined;
};

/** @internal */
export const GetApiHealthDetailedResponse$outboundSchema: z.ZodType<
  GetApiHealthDetailedResponse$Outbound,
  z.ZodTypeDef,
  GetApiHealthDetailedResponse
> = z.object({
  status: z.string().optional(),
  timestamp: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  uptime: z.number().optional(),
  version: z.string().optional(),
  services: z.lazy(() => Services$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiHealthDetailedResponse$ {
  /** @deprecated use `GetApiHealthDetailedResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiHealthDetailedResponse$inboundSchema;
  /** @deprecated use `GetApiHealthDetailedResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiHealthDetailedResponse$outboundSchema;
  /** @deprecated use `GetApiHealthDetailedResponse$Outbound` instead. */
  export type Outbound = GetApiHealthDetailedResponse$Outbound;
}

export function getApiHealthDetailedResponseToJSON(
  getApiHealthDetailedResponse: GetApiHealthDetailedResponse,
): string {
  return JSON.stringify(
    GetApiHealthDetailedResponse$outboundSchema.parse(
      getApiHealthDetailedResponse,
    ),
  );
}

export function getApiHealthDetailedResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiHealthDetailedResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiHealthDetailedResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiHealthDetailedResponse' from JSON`,
  );
}
