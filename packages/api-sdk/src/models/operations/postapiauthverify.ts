/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostApiAuthVerifySecurity = {
  agentApiKey: string;
};

export type PostApiAuthVerifyRequest = {
  /**
   * The verification message to be signed
   */
  message: string;
  /**
   * The signature of the verification message
   */
  signature: string;
};

/**
 * Wallet verification successful
 */
export type PostApiAuthVerifyResponse = {
  success?: boolean | undefined;
  /**
   * The verified wallet address
   */
  walletAddress?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostApiAuthVerifySecurity$inboundSchema: z.ZodType<
  PostApiAuthVerifySecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    AgentApiKey: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      AgentApiKey: "agentApiKey",
    });
  });

/** @internal */
export type PostApiAuthVerifySecurity$Outbound = {
  AgentApiKey: string;
};

/** @internal */
export const PostApiAuthVerifySecurity$outboundSchema: z.ZodType<
  PostApiAuthVerifySecurity$Outbound,
  z.ZodTypeDef,
  PostApiAuthVerifySecurity
> = z
  .object({
    agentApiKey: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      agentApiKey: "AgentApiKey",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAuthVerifySecurity$ {
  /** @deprecated use `PostApiAuthVerifySecurity$inboundSchema` instead. */
  export const inboundSchema = PostApiAuthVerifySecurity$inboundSchema;
  /** @deprecated use `PostApiAuthVerifySecurity$outboundSchema` instead. */
  export const outboundSchema = PostApiAuthVerifySecurity$outboundSchema;
  /** @deprecated use `PostApiAuthVerifySecurity$Outbound` instead. */
  export type Outbound = PostApiAuthVerifySecurity$Outbound;
}

export function postApiAuthVerifySecurityToJSON(
  postApiAuthVerifySecurity: PostApiAuthVerifySecurity,
): string {
  return JSON.stringify(
    PostApiAuthVerifySecurity$outboundSchema.parse(postApiAuthVerifySecurity),
  );
}

export function postApiAuthVerifySecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAuthVerifySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAuthVerifySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAuthVerifySecurity' from JSON`,
  );
}

/** @internal */
export const PostApiAuthVerifyRequest$inboundSchema: z.ZodType<
  PostApiAuthVerifyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  signature: z.string(),
});

/** @internal */
export type PostApiAuthVerifyRequest$Outbound = {
  message: string;
  signature: string;
};

/** @internal */
export const PostApiAuthVerifyRequest$outboundSchema: z.ZodType<
  PostApiAuthVerifyRequest$Outbound,
  z.ZodTypeDef,
  PostApiAuthVerifyRequest
> = z.object({
  message: z.string(),
  signature: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAuthVerifyRequest$ {
  /** @deprecated use `PostApiAuthVerifyRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiAuthVerifyRequest$inboundSchema;
  /** @deprecated use `PostApiAuthVerifyRequest$outboundSchema` instead. */
  export const outboundSchema = PostApiAuthVerifyRequest$outboundSchema;
  /** @deprecated use `PostApiAuthVerifyRequest$Outbound` instead. */
  export type Outbound = PostApiAuthVerifyRequest$Outbound;
}

export function postApiAuthVerifyRequestToJSON(
  postApiAuthVerifyRequest: PostApiAuthVerifyRequest,
): string {
  return JSON.stringify(
    PostApiAuthVerifyRequest$outboundSchema.parse(postApiAuthVerifyRequest),
  );
}

export function postApiAuthVerifyRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAuthVerifyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAuthVerifyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAuthVerifyRequest' from JSON`,
  );
}

/** @internal */
export const PostApiAuthVerifyResponse$inboundSchema: z.ZodType<
  PostApiAuthVerifyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  walletAddress: z.string().optional(),
  message: z.string().optional(),
});

/** @internal */
export type PostApiAuthVerifyResponse$Outbound = {
  success?: boolean | undefined;
  walletAddress?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostApiAuthVerifyResponse$outboundSchema: z.ZodType<
  PostApiAuthVerifyResponse$Outbound,
  z.ZodTypeDef,
  PostApiAuthVerifyResponse
> = z.object({
  success: z.boolean().optional(),
  walletAddress: z.string().optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAuthVerifyResponse$ {
  /** @deprecated use `PostApiAuthVerifyResponse$inboundSchema` instead. */
  export const inboundSchema = PostApiAuthVerifyResponse$inboundSchema;
  /** @deprecated use `PostApiAuthVerifyResponse$outboundSchema` instead. */
  export const outboundSchema = PostApiAuthVerifyResponse$outboundSchema;
  /** @deprecated use `PostApiAuthVerifyResponse$Outbound` instead. */
  export type Outbound = PostApiAuthVerifyResponse$Outbound;
}

export function postApiAuthVerifyResponseToJSON(
  postApiAuthVerifyResponse: PostApiAuthVerifyResponse,
): string {
  return JSON.stringify(
    PostApiAuthVerifyResponse$outboundSchema.parse(postApiAuthVerifyResponse),
  );
}

export function postApiAuthVerifyResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAuthVerifyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAuthVerifyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAuthVerifyResponse' from JSON`,
  );
}
