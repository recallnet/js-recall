/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiCompetitionsCompetitionIdRequest = {
  /**
   * The ID of the competition to retrieve
   */
  competitionId: string;
};

/**
 * Competition status
 */
export const GetApiCompetitionsCompetitionIdStatus = {
  Pending: "pending",
  Active: "active",
  Completed: "completed",
} as const;
/**
 * Competition status
 */
export type GetApiCompetitionsCompetitionIdStatus = ClosedEnum<
  typeof GetApiCompetitionsCompetitionIdStatus
>;

/**
 * Competition type
 */
export const GetApiCompetitionsCompetitionIdType = {
  Trading: "trading",
} as const;
/**
 * Competition type
 */
export type GetApiCompetitionsCompetitionIdType = ClosedEnum<
  typeof GetApiCompetitionsCompetitionIdType
>;

/**
 * The type of cross-chain trading allowed in this competition
 */
export const GetApiCompetitionsCompetitionIdCrossChainTradingType = {
  DisallowAll: "disallowAll",
  DisallowXParent: "disallowXParent",
  Allow: "allow",
} as const;
/**
 * The type of cross-chain trading allowed in this competition
 */
export type GetApiCompetitionsCompetitionIdCrossChainTradingType = ClosedEnum<
  typeof GetApiCompetitionsCompetitionIdCrossChainTradingType
>;

export type GetApiCompetitionsCompetitionIdStats = {
  /**
   * Total number of trades
   */
  totalTrades?: number | undefined;
  /**
   * Total number of agents
   */
  totalAgents?: number | undefined;
  /**
   * Total volume of trades in USD
   */
  totalVolume?: number | undefined;
  /**
   * Total number of votes cast in this competition
   */
  totalVotes?: number | undefined;
  /**
   * Total number of unique tokens traded
   */
  uniqueTokens?: number | undefined;
};

export type GetApiCompetitionsCompetitionIdReward = {
  /**
   * Rank of the reward
   */
  rank?: number | undefined;
  /**
   * Reward amount for the given rank
   */
  reward?: number | undefined;
  /**
   * Agent ID of the reward
   */
  agentId?: string | undefined;
};

export type GetApiCompetitionsCompetitionIdInfo = {
  /**
   * Whether the user has already voted in this competition
   */
  hasVoted?: boolean | undefined;
  /**
   * ID of the agent the user voted for (if hasVoted is true)
   */
  agentId?: string | null | undefined;
  /**
   * When the user cast their vote (if hasVoted is true)
   */
  votedAt?: Date | null | undefined;
};

/**
 * User's voting state for this competition (only present for authenticated users)
 */
export type GetApiCompetitionsCompetitionIdUserVotingInfo = {
  /**
   * Whether the user can vote in this competition
   */
  canVote?: boolean | undefined;
  /**
   * Reason why voting is not allowed (if canVote is false)
   */
  reason?: string | null | undefined;
  info?: GetApiCompetitionsCompetitionIdInfo | undefined;
};

export type GetApiCompetitionsCompetitionIdCompetition = {
  /**
   * Competition ID
   */
  id?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | null | undefined;
  /**
   * External URL for competition details
   */
  externalUrl?: string | null | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | null | undefined;
  /**
   * Competition status
   */
  status?: GetApiCompetitionsCompetitionIdStatus | undefined;
  /**
   * Competition type
   */
  type?: GetApiCompetitionsCompetitionIdType | undefined;
  /**
   * The type of cross-chain trading allowed in this competition
   */
  crossChainTradingType?:
    | GetApiCompetitionsCompetitionIdCrossChainTradingType
    | undefined;
  /**
   * Competition start date (null for pending competitions)
   */
  startDate?: Date | null | undefined;
  /**
   * Competition end date (null for pending/active competitions)
   */
  endDate?: Date | null | undefined;
  stats?: GetApiCompetitionsCompetitionIdStats | undefined;
  /**
   * When the competition was created
   */
  createdAt?: Date | undefined;
  /**
   * When the competition was last updated
   */
  updatedAt?: Date | undefined;
  /**
   * Rewards for competition placements
   */
  rewards?: Array<GetApiCompetitionsCompetitionIdReward> | null | undefined;
  /**
   * Whether voting is enabled for this competition (only present for authenticated users)
   */
  votingEnabled?: boolean | undefined;
  /**
   * User's voting state for this competition (only present for authenticated users)
   */
  userVotingInfo?:
    | GetApiCompetitionsCompetitionIdUserVotingInfo
    | null
    | undefined;
};

/**
 * Competition details retrieved successfully
 */
export type GetApiCompetitionsCompetitionIdResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  competition?: GetApiCompetitionsCompetitionIdCompetition | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdRequest$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdRequest$Outbound = {
  competitionId: string;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdRequest$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdRequest$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdRequest
> = z.object({
  competitionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdRequest$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdRequest$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdRequest$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdRequest$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdRequest$Outbound;
}

export function getApiCompetitionsCompetitionIdRequestToJSON(
  getApiCompetitionsCompetitionIdRequest: GetApiCompetitionsCompetitionIdRequest,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdRequest$outboundSchema.parse(
      getApiCompetitionsCompetitionIdRequest,
    ),
  );
}

export function getApiCompetitionsCompetitionIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsCompetitionIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsCompetitionIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCompetitionIdStatus
> = z.nativeEnum(GetApiCompetitionsCompetitionIdStatus);

/** @internal */
export const GetApiCompetitionsCompetitionIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCompetitionIdStatus
> = GetApiCompetitionsCompetitionIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdStatus$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdStatus$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdStatus$outboundSchema;
}

/** @internal */
export const GetApiCompetitionsCompetitionIdType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCompetitionIdType
> = z.nativeEnum(GetApiCompetitionsCompetitionIdType);

/** @internal */
export const GetApiCompetitionsCompetitionIdType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCompetitionIdType
> = GetApiCompetitionsCompetitionIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdType$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdType$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdType$outboundSchema;
}

/** @internal */
export const GetApiCompetitionsCompetitionIdCrossChainTradingType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCompetitionIdCrossChainTradingType
> = z.nativeEnum(GetApiCompetitionsCompetitionIdCrossChainTradingType);

/** @internal */
export const GetApiCompetitionsCompetitionIdCrossChainTradingType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionsCompetitionIdCrossChainTradingType
> = GetApiCompetitionsCompetitionIdCrossChainTradingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdCrossChainTradingType$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdCrossChainTradingType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdCrossChainTradingType$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdCrossChainTradingType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdCrossChainTradingType$outboundSchema;
}

/** @internal */
export const GetApiCompetitionsCompetitionIdStats$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdStats,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalTrades: z.number().optional(),
  totalAgents: z.number().optional(),
  totalVolume: z.number().optional(),
  totalVotes: z.number().int().optional(),
  uniqueTokens: z.number().optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdStats$Outbound = {
  totalTrades?: number | undefined;
  totalAgents?: number | undefined;
  totalVolume?: number | undefined;
  totalVotes?: number | undefined;
  uniqueTokens?: number | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdStats$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdStats$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdStats
> = z.object({
  totalTrades: z.number().optional(),
  totalAgents: z.number().optional(),
  totalVolume: z.number().optional(),
  totalVotes: z.number().int().optional(),
  uniqueTokens: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdStats$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdStats$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdStats$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdStats$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdStats$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdStats$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdStats$Outbound;
}

export function getApiCompetitionsCompetitionIdStatsToJSON(
  getApiCompetitionsCompetitionIdStats: GetApiCompetitionsCompetitionIdStats,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdStats$outboundSchema.parse(
      getApiCompetitionsCompetitionIdStats,
    ),
  );
}

export function getApiCompetitionsCompetitionIdStatsFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsCompetitionIdStats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdStats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsCompetitionIdStats' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdReward$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdReward,
  z.ZodTypeDef,
  unknown
> = z.object({
  rank: z.number().optional(),
  reward: z.number().optional(),
  agentId: z.string().optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdReward$Outbound = {
  rank?: number | undefined;
  reward?: number | undefined;
  agentId?: string | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdReward$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdReward$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdReward
> = z.object({
  rank: z.number().optional(),
  reward: z.number().optional(),
  agentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdReward$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdReward$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdReward$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdReward$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdReward$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdReward$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdReward$Outbound;
}

export function getApiCompetitionsCompetitionIdRewardToJSON(
  getApiCompetitionsCompetitionIdReward: GetApiCompetitionsCompetitionIdReward,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdReward$outboundSchema.parse(
      getApiCompetitionsCompetitionIdReward,
    ),
  );
}

export function getApiCompetitionsCompetitionIdRewardFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsCompetitionIdReward, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdReward$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsCompetitionIdReward' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdInfo$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  hasVoted: z.boolean().optional(),
  agentId: z.nullable(z.string()).optional(),
  votedAt: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdInfo$Outbound = {
  hasVoted?: boolean | undefined;
  agentId?: string | null | undefined;
  votedAt?: string | null | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdInfo$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdInfo$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdInfo
> = z.object({
  hasVoted: z.boolean().optional(),
  agentId: z.nullable(z.string()).optional(),
  votedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdInfo$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdInfo$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdInfo$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdInfo$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdInfo$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdInfo$Outbound;
}

export function getApiCompetitionsCompetitionIdInfoToJSON(
  getApiCompetitionsCompetitionIdInfo: GetApiCompetitionsCompetitionIdInfo,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdInfo$outboundSchema.parse(
      getApiCompetitionsCompetitionIdInfo,
    ),
  );
}

export function getApiCompetitionsCompetitionIdInfoFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionsCompetitionIdInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionsCompetitionIdInfo' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdUserVotingInfo$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdUserVotingInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  canVote: z.boolean().optional(),
  reason: z.nullable(z.string()).optional(),
  info: z
    .lazy(() => GetApiCompetitionsCompetitionIdInfo$inboundSchema)
    .optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdUserVotingInfo$Outbound = {
  canVote?: boolean | undefined;
  reason?: string | null | undefined;
  info?: GetApiCompetitionsCompetitionIdInfo$Outbound | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdUserVotingInfo$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdUserVotingInfo$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdUserVotingInfo
> = z.object({
  canVote: z.boolean().optional(),
  reason: z.nullable(z.string()).optional(),
  info: z
    .lazy(() => GetApiCompetitionsCompetitionIdInfo$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdUserVotingInfo$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdUserVotingInfo$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdUserVotingInfo$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdUserVotingInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdUserVotingInfo$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdUserVotingInfo$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdUserVotingInfo$Outbound;
}

export function getApiCompetitionsCompetitionIdUserVotingInfoToJSON(
  getApiCompetitionsCompetitionIdUserVotingInfo: GetApiCompetitionsCompetitionIdUserVotingInfo,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdUserVotingInfo$outboundSchema.parse(
      getApiCompetitionsCompetitionIdUserVotingInfo,
    ),
  );
}

export function getApiCompetitionsCompetitionIdUserVotingInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsCompetitionIdUserVotingInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdUserVotingInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsCompetitionIdUserVotingInfo' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdCompetition$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiCompetitionsCompetitionIdStatus$inboundSchema.optional(),
  type: GetApiCompetitionsCompetitionIdType$inboundSchema.optional(),
  crossChainTradingType:
    GetApiCompetitionsCompetitionIdCrossChainTradingType$inboundSchema.optional(),
  startDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  endDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  stats: z
    .lazy(() => GetApiCompetitionsCompetitionIdStats$inboundSchema)
    .optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  rewards: z
    .nullable(
      z.array(
        z.lazy(() => GetApiCompetitionsCompetitionIdReward$inboundSchema),
      ),
    )
    .optional(),
  votingEnabled: z.boolean().optional(),
  userVotingInfo: z
    .nullable(
      z.lazy(() => GetApiCompetitionsCompetitionIdUserVotingInfo$inboundSchema),
    )
    .optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  externalUrl?: string | null | undefined;
  imageUrl?: string | null | undefined;
  status?: string | undefined;
  type?: string | undefined;
  crossChainTradingType?: string | undefined;
  startDate?: string | null | undefined;
  endDate?: string | null | undefined;
  stats?: GetApiCompetitionsCompetitionIdStats$Outbound | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  rewards?:
    | Array<GetApiCompetitionsCompetitionIdReward$Outbound>
    | null
    | undefined;
  votingEnabled?: boolean | undefined;
  userVotingInfo?:
    | GetApiCompetitionsCompetitionIdUserVotingInfo$Outbound
    | null
    | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdCompetition$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdCompetition$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: GetApiCompetitionsCompetitionIdStatus$outboundSchema.optional(),
  type: GetApiCompetitionsCompetitionIdType$outboundSchema.optional(),
  crossChainTradingType:
    GetApiCompetitionsCompetitionIdCrossChainTradingType$outboundSchema.optional(),
  startDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
  endDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
  stats: z
    .lazy(() => GetApiCompetitionsCompetitionIdStats$outboundSchema)
    .optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  rewards: z
    .nullable(
      z.array(
        z.lazy(() => GetApiCompetitionsCompetitionIdReward$outboundSchema),
      ),
    )
    .optional(),
  votingEnabled: z.boolean().optional(),
  userVotingInfo: z
    .nullable(
      z.lazy(
        () => GetApiCompetitionsCompetitionIdUserVotingInfo$outboundSchema,
      ),
    )
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdCompetition$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdCompetition$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdCompetition$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdCompetition$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdCompetition$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdCompetition$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdCompetition$Outbound;
}

export function getApiCompetitionsCompetitionIdCompetitionToJSON(
  getApiCompetitionsCompetitionIdCompetition: GetApiCompetitionsCompetitionIdCompetition,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdCompetition$outboundSchema.parse(
      getApiCompetitionsCompetitionIdCompetition,
    ),
  );
}

export function getApiCompetitionsCompetitionIdCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsCompetitionIdCompetition,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdCompetition$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsCompetitionIdCompetition' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionsCompetitionIdResponse$inboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => GetApiCompetitionsCompetitionIdCompetition$inboundSchema)
    .optional(),
});

/** @internal */
export type GetApiCompetitionsCompetitionIdResponse$Outbound = {
  success?: boolean | undefined;
  competition?: GetApiCompetitionsCompetitionIdCompetition$Outbound | undefined;
};

/** @internal */
export const GetApiCompetitionsCompetitionIdResponse$outboundSchema: z.ZodType<
  GetApiCompetitionsCompetitionIdResponse$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionsCompetitionIdResponse
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => GetApiCompetitionsCompetitionIdCompetition$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionsCompetitionIdResponse$ {
  /** @deprecated use `GetApiCompetitionsCompetitionIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionsCompetitionIdResponse$inboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionsCompetitionIdResponse$outboundSchema;
  /** @deprecated use `GetApiCompetitionsCompetitionIdResponse$Outbound` instead. */
  export type Outbound = GetApiCompetitionsCompetitionIdResponse$Outbound;
}

export function getApiCompetitionsCompetitionIdResponseToJSON(
  getApiCompetitionsCompetitionIdResponse: GetApiCompetitionsCompetitionIdResponse,
): string {
  return JSON.stringify(
    GetApiCompetitionsCompetitionIdResponse$outboundSchema.parse(
      getApiCompetitionsCompetitionIdResponse,
    ),
  );
}

export function getApiCompetitionsCompetitionIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiCompetitionsCompetitionIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionsCompetitionIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiCompetitionsCompetitionIdResponse' from JSON`,
  );
}
