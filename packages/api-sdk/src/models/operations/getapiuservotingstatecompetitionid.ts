/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiUserVotingStateCompetitionIdSecurity = {
  siweSession: string;
};

export type GetApiUserVotingStateCompetitionIdRequest = {
  /**
   * Competition ID to get voting state for
   */
  competitionId: string;
};

export type GetApiUserVotingStateCompetitionIdUserVoteInfo = {
  /**
   * Whether the user has voted in this competition
   */
  hasVoted?: boolean | undefined;
  /**
   * ID of the agent the user voted for (if hasVoted is true)
   */
  votedAgentId?: string | null | undefined;
  /**
   * When the user voted (if hasVoted is true)
   */
  votedAt?: Date | null | undefined;
};

export type VotingState = {
  /**
   * Whether the user can vote in this competition
   */
  canVote?: boolean | undefined;
  /**
   * Reason why voting is disabled (if canVote is false)
   */
  reason?: string | null | undefined;
  userVoteInfo?: GetApiUserVotingStateCompetitionIdUserVoteInfo | undefined;
};

/**
 * Voting state retrieved successfully
 */
export type GetApiUserVotingStateCompetitionIdResponse = {
  success?: boolean | undefined;
  votingState?: VotingState | undefined;
};

/** @internal */
export const GetApiUserVotingStateCompetitionIdSecurity$inboundSchema: z.ZodType<
  GetApiUserVotingStateCompetitionIdSecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    SIWESession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      SIWESession: "siweSession",
    });
  });

/** @internal */
export type GetApiUserVotingStateCompetitionIdSecurity$Outbound = {
  SIWESession: string;
};

/** @internal */
export const GetApiUserVotingStateCompetitionIdSecurity$outboundSchema: z.ZodType<
  GetApiUserVotingStateCompetitionIdSecurity$Outbound,
  z.ZodTypeDef,
  GetApiUserVotingStateCompetitionIdSecurity
> = z
  .object({
    siweSession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      siweSession: "SIWESession",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotingStateCompetitionIdSecurity$ {
  /** @deprecated use `GetApiUserVotingStateCompetitionIdSecurity$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserVotingStateCompetitionIdSecurity$inboundSchema;
  /** @deprecated use `GetApiUserVotingStateCompetitionIdSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserVotingStateCompetitionIdSecurity$outboundSchema;
  /** @deprecated use `GetApiUserVotingStateCompetitionIdSecurity$Outbound` instead. */
  export type Outbound = GetApiUserVotingStateCompetitionIdSecurity$Outbound;
}

export function getApiUserVotingStateCompetitionIdSecurityToJSON(
  getApiUserVotingStateCompetitionIdSecurity: GetApiUserVotingStateCompetitionIdSecurity,
): string {
  return JSON.stringify(
    GetApiUserVotingStateCompetitionIdSecurity$outboundSchema.parse(
      getApiUserVotingStateCompetitionIdSecurity,
    ),
  );
}

export function getApiUserVotingStateCompetitionIdSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiUserVotingStateCompetitionIdSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserVotingStateCompetitionIdSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiUserVotingStateCompetitionIdSecurity' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotingStateCompetitionIdRequest$inboundSchema: z.ZodType<
  GetApiUserVotingStateCompetitionIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string(),
});

/** @internal */
export type GetApiUserVotingStateCompetitionIdRequest$Outbound = {
  competitionId: string;
};

/** @internal */
export const GetApiUserVotingStateCompetitionIdRequest$outboundSchema: z.ZodType<
  GetApiUserVotingStateCompetitionIdRequest$Outbound,
  z.ZodTypeDef,
  GetApiUserVotingStateCompetitionIdRequest
> = z.object({
  competitionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotingStateCompetitionIdRequest$ {
  /** @deprecated use `GetApiUserVotingStateCompetitionIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserVotingStateCompetitionIdRequest$inboundSchema;
  /** @deprecated use `GetApiUserVotingStateCompetitionIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserVotingStateCompetitionIdRequest$outboundSchema;
  /** @deprecated use `GetApiUserVotingStateCompetitionIdRequest$Outbound` instead. */
  export type Outbound = GetApiUserVotingStateCompetitionIdRequest$Outbound;
}

export function getApiUserVotingStateCompetitionIdRequestToJSON(
  getApiUserVotingStateCompetitionIdRequest: GetApiUserVotingStateCompetitionIdRequest,
): string {
  return JSON.stringify(
    GetApiUserVotingStateCompetitionIdRequest$outboundSchema.parse(
      getApiUserVotingStateCompetitionIdRequest,
    ),
  );
}

export function getApiUserVotingStateCompetitionIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiUserVotingStateCompetitionIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserVotingStateCompetitionIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiUserVotingStateCompetitionIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotingStateCompetitionIdUserVoteInfo$inboundSchema: z.ZodType<
  GetApiUserVotingStateCompetitionIdUserVoteInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  hasVoted: z.boolean().optional(),
  votedAgentId: z.nullable(z.string()).optional(),
  votedAt: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
});

/** @internal */
export type GetApiUserVotingStateCompetitionIdUserVoteInfo$Outbound = {
  hasVoted?: boolean | undefined;
  votedAgentId?: string | null | undefined;
  votedAt?: string | null | undefined;
};

/** @internal */
export const GetApiUserVotingStateCompetitionIdUserVoteInfo$outboundSchema: z.ZodType<
  GetApiUserVotingStateCompetitionIdUserVoteInfo$Outbound,
  z.ZodTypeDef,
  GetApiUserVotingStateCompetitionIdUserVoteInfo
> = z.object({
  hasVoted: z.boolean().optional(),
  votedAgentId: z.nullable(z.string()).optional(),
  votedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotingStateCompetitionIdUserVoteInfo$ {
  /** @deprecated use `GetApiUserVotingStateCompetitionIdUserVoteInfo$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserVotingStateCompetitionIdUserVoteInfo$inboundSchema;
  /** @deprecated use `GetApiUserVotingStateCompetitionIdUserVoteInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserVotingStateCompetitionIdUserVoteInfo$outboundSchema;
  /** @deprecated use `GetApiUserVotingStateCompetitionIdUserVoteInfo$Outbound` instead. */
  export type Outbound =
    GetApiUserVotingStateCompetitionIdUserVoteInfo$Outbound;
}

export function getApiUserVotingStateCompetitionIdUserVoteInfoToJSON(
  getApiUserVotingStateCompetitionIdUserVoteInfo: GetApiUserVotingStateCompetitionIdUserVoteInfo,
): string {
  return JSON.stringify(
    GetApiUserVotingStateCompetitionIdUserVoteInfo$outboundSchema.parse(
      getApiUserVotingStateCompetitionIdUserVoteInfo,
    ),
  );
}

export function getApiUserVotingStateCompetitionIdUserVoteInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiUserVotingStateCompetitionIdUserVoteInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserVotingStateCompetitionIdUserVoteInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiUserVotingStateCompetitionIdUserVoteInfo' from JSON`,
  );
}

/** @internal */
export const VotingState$inboundSchema: z.ZodType<
  VotingState,
  z.ZodTypeDef,
  unknown
> = z.object({
  canVote: z.boolean().optional(),
  reason: z.nullable(z.string()).optional(),
  userVoteInfo: z
    .lazy(() => GetApiUserVotingStateCompetitionIdUserVoteInfo$inboundSchema)
    .optional(),
});

/** @internal */
export type VotingState$Outbound = {
  canVote?: boolean | undefined;
  reason?: string | null | undefined;
  userVoteInfo?:
    | GetApiUserVotingStateCompetitionIdUserVoteInfo$Outbound
    | undefined;
};

/** @internal */
export const VotingState$outboundSchema: z.ZodType<
  VotingState$Outbound,
  z.ZodTypeDef,
  VotingState
> = z.object({
  canVote: z.boolean().optional(),
  reason: z.nullable(z.string()).optional(),
  userVoteInfo: z
    .lazy(() => GetApiUserVotingStateCompetitionIdUserVoteInfo$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VotingState$ {
  /** @deprecated use `VotingState$inboundSchema` instead. */
  export const inboundSchema = VotingState$inboundSchema;
  /** @deprecated use `VotingState$outboundSchema` instead. */
  export const outboundSchema = VotingState$outboundSchema;
  /** @deprecated use `VotingState$Outbound` instead. */
  export type Outbound = VotingState$Outbound;
}

export function votingStateToJSON(votingState: VotingState): string {
  return JSON.stringify(VotingState$outboundSchema.parse(votingState));
}

export function votingStateFromJSON(
  jsonString: string,
): SafeParseResult<VotingState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VotingState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VotingState' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotingStateCompetitionIdResponse$inboundSchema: z.ZodType<
  GetApiUserVotingStateCompetitionIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  votingState: z.lazy(() => VotingState$inboundSchema).optional(),
});

/** @internal */
export type GetApiUserVotingStateCompetitionIdResponse$Outbound = {
  success?: boolean | undefined;
  votingState?: VotingState$Outbound | undefined;
};

/** @internal */
export const GetApiUserVotingStateCompetitionIdResponse$outboundSchema: z.ZodType<
  GetApiUserVotingStateCompetitionIdResponse$Outbound,
  z.ZodTypeDef,
  GetApiUserVotingStateCompetitionIdResponse
> = z.object({
  success: z.boolean().optional(),
  votingState: z.lazy(() => VotingState$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotingStateCompetitionIdResponse$ {
  /** @deprecated use `GetApiUserVotingStateCompetitionIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserVotingStateCompetitionIdResponse$inboundSchema;
  /** @deprecated use `GetApiUserVotingStateCompetitionIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserVotingStateCompetitionIdResponse$outboundSchema;
  /** @deprecated use `GetApiUserVotingStateCompetitionIdResponse$Outbound` instead. */
  export type Outbound = GetApiUserVotingStateCompetitionIdResponse$Outbound;
}

export function getApiUserVotingStateCompetitionIdResponseToJSON(
  getApiUserVotingStateCompetitionIdResponse: GetApiUserVotingStateCompetitionIdResponse,
): string {
  return JSON.stringify(
    GetApiUserVotingStateCompetitionIdResponse$outboundSchema.parse(
      getApiUserVotingStateCompetitionIdResponse,
    ),
  );
}

export function getApiUserVotingStateCompetitionIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiUserVotingStateCompetitionIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserVotingStateCompetitionIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiUserVotingStateCompetitionIdResponse' from JSON`,
  );
}
