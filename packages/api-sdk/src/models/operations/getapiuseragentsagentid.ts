/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiUserAgentsAgentIdSecurity = {
  siweSession: string;
};

export type GetApiUserAgentsAgentIdRequest = {
  /**
   * The ID of the agent to retrieve
   */
  agentId: string;
};

export type GetApiUserAgentsAgentIdMetadata = {};

export const GetApiUserAgentsAgentIdStatus = {
  Active: "active",
  Inactive: "inactive",
  Suspended: "suspended",
  Deleted: "deleted",
} as const;
export type GetApiUserAgentsAgentIdStatus = ClosedEnum<
  typeof GetApiUserAgentsAgentIdStatus
>;

/**
 * Best placement across all competitions (null if no ranking data available)
 */
export type GetApiUserAgentsAgentIdBestPlacement = {
  competitionId?: string | undefined;
  rank?: number | undefined;
  score?: number | undefined;
  totalAgents?: number | undefined;
};

export type GetApiUserAgentsAgentIdStats = {
  completedCompetitions?: number | undefined;
  totalTrades?: number | undefined;
  totalVotes?: number | undefined;
  /**
   * Best placement across all competitions (null if no ranking data available)
   */
  bestPlacement?: GetApiUserAgentsAgentIdBestPlacement | null | undefined;
  rank?: number | undefined;
  score?: number | undefined;
};

export type GetApiUserAgentsAgentIdTrophy = {
  /**
   * Competition ID
   */
  competitionId?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Agent's final rank in the competition
   */
  rank?: number | undefined;
  /**
   * Competition image URL
   */
  imageUrl?: string | undefined;
  /**
   * When the trophy was awarded (competition end date)
   */
  createdAt?: Date | undefined;
};

export type GetApiUserAgentsAgentIdAgent = {
  id?: string | undefined;
  ownerId?: string | undefined;
  walletAddress?: string | null | undefined;
  isVerified?: boolean | undefined;
  name?: string | undefined;
  email?: string | null | undefined;
  description?: string | null | undefined;
  imageUrl?: string | null | undefined;
  metadata?: GetApiUserAgentsAgentIdMetadata | null | undefined;
  status?: GetApiUserAgentsAgentIdStatus | undefined;
  stats?: GetApiUserAgentsAgentIdStats | undefined;
  /**
   * Trophies earned from ended competitions
   */
  trophies?: Array<GetApiUserAgentsAgentIdTrophy> | undefined;
  skills?: Array<string> | undefined;
  hasUnclaimedRewards?: boolean | undefined;
  /**
   * Reason for deactivation (if status is inactive)
   */
  deactivationReason?: string | null | undefined;
  /**
   * Date when agent was deactivated (if status is inactive)
   */
  deactivationDate?: Date | null | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/**
 * Agent details retrieved successfully
 */
export type GetApiUserAgentsAgentIdResponse = {
  success?: boolean | undefined;
  agent?: GetApiUserAgentsAgentIdAgent | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdSecurity$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdSecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    SIWESession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      SIWESession: "siweSession",
    });
  });

/** @internal */
export type GetApiUserAgentsAgentIdSecurity$Outbound = {
  SIWESession: string;
};

/** @internal */
export const GetApiUserAgentsAgentIdSecurity$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdSecurity$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdSecurity
> = z
  .object({
    siweSession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      siweSession: "SIWESession",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdSecurity$ {
  /** @deprecated use `GetApiUserAgentsAgentIdSecurity$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgentIdSecurity$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdSecurity$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgentIdSecurity$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdSecurity$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdSecurity$Outbound;
}

export function getApiUserAgentsAgentIdSecurityToJSON(
  getApiUserAgentsAgentIdSecurity: GetApiUserAgentsAgentIdSecurity,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgentIdSecurity$outboundSchema.parse(
      getApiUserAgentsAgentIdSecurity,
    ),
  );
}

export function getApiUserAgentsAgentIdSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgentIdSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsAgentIdSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgentIdSecurity' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsAgentIdRequest$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentId: z.string(),
});

/** @internal */
export type GetApiUserAgentsAgentIdRequest$Outbound = {
  agentId: string;
};

/** @internal */
export const GetApiUserAgentsAgentIdRequest$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdRequest$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdRequest
> = z.object({
  agentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdRequest$ {
  /** @deprecated use `GetApiUserAgentsAgentIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgentIdRequest$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgentIdRequest$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdRequest$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdRequest$Outbound;
}

export function getApiUserAgentsAgentIdRequestToJSON(
  getApiUserAgentsAgentIdRequest: GetApiUserAgentsAgentIdRequest,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgentIdRequest$outboundSchema.parse(
      getApiUserAgentsAgentIdRequest,
    ),
  );
}

export function getApiUserAgentsAgentIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgentIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsAgentIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgentIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsAgentIdMetadata$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetApiUserAgentsAgentIdMetadata$Outbound = {};

/** @internal */
export const GetApiUserAgentsAgentIdMetadata$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdMetadata$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdMetadata$ {
  /** @deprecated use `GetApiUserAgentsAgentIdMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgentIdMetadata$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgentIdMetadata$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdMetadata$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdMetadata$Outbound;
}

export function getApiUserAgentsAgentIdMetadataToJSON(
  getApiUserAgentsAgentIdMetadata: GetApiUserAgentsAgentIdMetadata,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgentIdMetadata$outboundSchema.parse(
      getApiUserAgentsAgentIdMetadata,
    ),
  );
}

export function getApiUserAgentsAgentIdMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgentIdMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsAgentIdMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgentIdMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsAgentIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiUserAgentsAgentIdStatus
> = z.nativeEnum(GetApiUserAgentsAgentIdStatus);

/** @internal */
export const GetApiUserAgentsAgentIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiUserAgentsAgentIdStatus
> = GetApiUserAgentsAgentIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdStatus$ {
  /** @deprecated use `GetApiUserAgentsAgentIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgentIdStatus$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdStatus$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgentIdStatus$outboundSchema;
}

/** @internal */
export const GetApiUserAgentsAgentIdBestPlacement$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdBestPlacement,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
  rank: z.number().int().optional(),
  score: z.number().int().optional(),
  totalAgents: z.number().int().optional(),
});

/** @internal */
export type GetApiUserAgentsAgentIdBestPlacement$Outbound = {
  competitionId?: string | undefined;
  rank?: number | undefined;
  score?: number | undefined;
  totalAgents?: number | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdBestPlacement$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdBestPlacement$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdBestPlacement
> = z.object({
  competitionId: z.string().optional(),
  rank: z.number().int().optional(),
  score: z.number().int().optional(),
  totalAgents: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdBestPlacement$ {
  /** @deprecated use `GetApiUserAgentsAgentIdBestPlacement$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserAgentsAgentIdBestPlacement$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdBestPlacement$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserAgentsAgentIdBestPlacement$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdBestPlacement$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdBestPlacement$Outbound;
}

export function getApiUserAgentsAgentIdBestPlacementToJSON(
  getApiUserAgentsAgentIdBestPlacement: GetApiUserAgentsAgentIdBestPlacement,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgentIdBestPlacement$outboundSchema.parse(
      getApiUserAgentsAgentIdBestPlacement,
    ),
  );
}

export function getApiUserAgentsAgentIdBestPlacementFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgentIdBestPlacement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserAgentsAgentIdBestPlacement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgentIdBestPlacement' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsAgentIdStats$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdStats,
  z.ZodTypeDef,
  unknown
> = z.object({
  completedCompetitions: z.number().int().optional(),
  totalTrades: z.number().int().optional(),
  totalVotes: z.number().int().optional(),
  bestPlacement: z
    .nullable(z.lazy(() => GetApiUserAgentsAgentIdBestPlacement$inboundSchema))
    .optional(),
  rank: z.number().int().optional(),
  score: z.number().optional(),
});

/** @internal */
export type GetApiUserAgentsAgentIdStats$Outbound = {
  completedCompetitions?: number | undefined;
  totalTrades?: number | undefined;
  totalVotes?: number | undefined;
  bestPlacement?:
    | GetApiUserAgentsAgentIdBestPlacement$Outbound
    | null
    | undefined;
  rank?: number | undefined;
  score?: number | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdStats$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdStats$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdStats
> = z.object({
  completedCompetitions: z.number().int().optional(),
  totalTrades: z.number().int().optional(),
  totalVotes: z.number().int().optional(),
  bestPlacement: z
    .nullable(z.lazy(() => GetApiUserAgentsAgentIdBestPlacement$outboundSchema))
    .optional(),
  rank: z.number().int().optional(),
  score: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdStats$ {
  /** @deprecated use `GetApiUserAgentsAgentIdStats$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgentIdStats$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdStats$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgentIdStats$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdStats$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdStats$Outbound;
}

export function getApiUserAgentsAgentIdStatsToJSON(
  getApiUserAgentsAgentIdStats: GetApiUserAgentsAgentIdStats,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgentIdStats$outboundSchema.parse(
      getApiUserAgentsAgentIdStats,
    ),
  );
}

export function getApiUserAgentsAgentIdStatsFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgentIdStats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsAgentIdStats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgentIdStats' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsAgentIdTrophy$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdTrophy,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
  name: z.string().optional(),
  rank: z.number().optional(),
  imageUrl: z.string().optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiUserAgentsAgentIdTrophy$Outbound = {
  competitionId?: string | undefined;
  name?: string | undefined;
  rank?: number | undefined;
  imageUrl?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdTrophy$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdTrophy$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdTrophy
> = z.object({
  competitionId: z.string().optional(),
  name: z.string().optional(),
  rank: z.number().optional(),
  imageUrl: z.string().optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdTrophy$ {
  /** @deprecated use `GetApiUserAgentsAgentIdTrophy$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgentIdTrophy$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdTrophy$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgentIdTrophy$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdTrophy$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdTrophy$Outbound;
}

export function getApiUserAgentsAgentIdTrophyToJSON(
  getApiUserAgentsAgentIdTrophy: GetApiUserAgentsAgentIdTrophy,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgentIdTrophy$outboundSchema.parse(
      getApiUserAgentsAgentIdTrophy,
    ),
  );
}

export function getApiUserAgentsAgentIdTrophyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgentIdTrophy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsAgentIdTrophy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgentIdTrophy' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsAgentIdAgent$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  walletAddress: z.nullable(z.string()).optional(),
  isVerified: z.boolean().optional(),
  name: z.string().optional(),
  email: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiUserAgentsAgentIdMetadata$inboundSchema))
    .optional(),
  status: GetApiUserAgentsAgentIdStatus$inboundSchema.optional(),
  stats: z.lazy(() => GetApiUserAgentsAgentIdStats$inboundSchema).optional(),
  trophies: z
    .array(z.lazy(() => GetApiUserAgentsAgentIdTrophy$inboundSchema))
    .optional(),
  skills: z.array(z.string()).optional(),
  hasUnclaimedRewards: z.boolean().optional(),
  deactivationReason: z.nullable(z.string()).optional(),
  deactivationDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiUserAgentsAgentIdAgent$Outbound = {
  id?: string | undefined;
  ownerId?: string | undefined;
  walletAddress?: string | null | undefined;
  isVerified?: boolean | undefined;
  name?: string | undefined;
  email?: string | null | undefined;
  description?: string | null | undefined;
  imageUrl?: string | null | undefined;
  metadata?: GetApiUserAgentsAgentIdMetadata$Outbound | null | undefined;
  status?: string | undefined;
  stats?: GetApiUserAgentsAgentIdStats$Outbound | undefined;
  trophies?: Array<GetApiUserAgentsAgentIdTrophy$Outbound> | undefined;
  skills?: Array<string> | undefined;
  hasUnclaimedRewards?: boolean | undefined;
  deactivationReason?: string | null | undefined;
  deactivationDate?: string | null | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdAgent$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdAgent$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdAgent
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  walletAddress: z.nullable(z.string()).optional(),
  isVerified: z.boolean().optional(),
  name: z.string().optional(),
  email: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiUserAgentsAgentIdMetadata$outboundSchema))
    .optional(),
  status: GetApiUserAgentsAgentIdStatus$outboundSchema.optional(),
  stats: z.lazy(() => GetApiUserAgentsAgentIdStats$outboundSchema).optional(),
  trophies: z
    .array(z.lazy(() => GetApiUserAgentsAgentIdTrophy$outboundSchema))
    .optional(),
  skills: z.array(z.string()).optional(),
  hasUnclaimedRewards: z.boolean().optional(),
  deactivationReason: z.nullable(z.string()).optional(),
  deactivationDate: z
    .nullable(z.date().transform((v) => v.toISOString()))
    .optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdAgent$ {
  /** @deprecated use `GetApiUserAgentsAgentIdAgent$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgentIdAgent$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdAgent$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgentIdAgent$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdAgent$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdAgent$Outbound;
}

export function getApiUserAgentsAgentIdAgentToJSON(
  getApiUserAgentsAgentIdAgent: GetApiUserAgentsAgentIdAgent,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgentIdAgent$outboundSchema.parse(
      getApiUserAgentsAgentIdAgent,
    ),
  );
}

export function getApiUserAgentsAgentIdAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgentIdAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsAgentIdAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgentIdAgent' from JSON`,
  );
}

/** @internal */
export const GetApiUserAgentsAgentIdResponse$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  agent: z.lazy(() => GetApiUserAgentsAgentIdAgent$inboundSchema).optional(),
});

/** @internal */
export type GetApiUserAgentsAgentIdResponse$Outbound = {
  success?: boolean | undefined;
  agent?: GetApiUserAgentsAgentIdAgent$Outbound | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdResponse$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdResponse$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdResponse
> = z.object({
  success: z.boolean().optional(),
  agent: z.lazy(() => GetApiUserAgentsAgentIdAgent$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdResponse$ {
  /** @deprecated use `GetApiUserAgentsAgentIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiUserAgentsAgentIdResponse$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiUserAgentsAgentIdResponse$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdResponse$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdResponse$Outbound;
}

export function getApiUserAgentsAgentIdResponseToJSON(
  getApiUserAgentsAgentIdResponse: GetApiUserAgentsAgentIdResponse,
): string {
  return JSON.stringify(
    GetApiUserAgentsAgentIdResponse$outboundSchema.parse(
      getApiUserAgentsAgentIdResponse,
    ),
  );
}

export function getApiUserAgentsAgentIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserAgentsAgentIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserAgentsAgentIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserAgentsAgentIdResponse' from JSON`,
  );
}
