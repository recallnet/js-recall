/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiVerifyEmailRequest = {
  /**
   * The verification token from the email
   */
  token: string;
};

export type GetApiVerifyEmailResponse = {
  headers: { [k: string]: Array<string> };
  result: string;
};

/** @internal */
export const GetApiVerifyEmailRequest$inboundSchema: z.ZodType<
  GetApiVerifyEmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type GetApiVerifyEmailRequest$Outbound = {
  token: string;
};

/** @internal */
export const GetApiVerifyEmailRequest$outboundSchema: z.ZodType<
  GetApiVerifyEmailRequest$Outbound,
  z.ZodTypeDef,
  GetApiVerifyEmailRequest
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiVerifyEmailRequest$ {
  /** @deprecated use `GetApiVerifyEmailRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiVerifyEmailRequest$inboundSchema;
  /** @deprecated use `GetApiVerifyEmailRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiVerifyEmailRequest$outboundSchema;
  /** @deprecated use `GetApiVerifyEmailRequest$Outbound` instead. */
  export type Outbound = GetApiVerifyEmailRequest$Outbound;
}

export function getApiVerifyEmailRequestToJSON(
  getApiVerifyEmailRequest: GetApiVerifyEmailRequest,
): string {
  return JSON.stringify(
    GetApiVerifyEmailRequest$outboundSchema.parse(getApiVerifyEmailRequest),
  );
}

export function getApiVerifyEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiVerifyEmailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiVerifyEmailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiVerifyEmailRequest' from JSON`,
  );
}

/** @internal */
export const GetApiVerifyEmailResponse$inboundSchema: z.ZodType<
  GetApiVerifyEmailResponse,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    Headers: z.record(z.array(z.string())),
    Result: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      Headers: "headers",
      Result: "result",
    });
  });

/** @internal */
export type GetApiVerifyEmailResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: string;
};

/** @internal */
export const GetApiVerifyEmailResponse$outboundSchema: z.ZodType<
  GetApiVerifyEmailResponse$Outbound,
  z.ZodTypeDef,
  GetApiVerifyEmailResponse
> = z
  .object({
    headers: z.record(z.array(z.string())),
    result: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiVerifyEmailResponse$ {
  /** @deprecated use `GetApiVerifyEmailResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiVerifyEmailResponse$inboundSchema;
  /** @deprecated use `GetApiVerifyEmailResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiVerifyEmailResponse$outboundSchema;
  /** @deprecated use `GetApiVerifyEmailResponse$Outbound` instead. */
  export type Outbound = GetApiVerifyEmailResponse$Outbound;
}

export function getApiVerifyEmailResponseToJSON(
  getApiVerifyEmailResponse: GetApiVerifyEmailResponse,
): string {
  return JSON.stringify(
    GetApiVerifyEmailResponse$outboundSchema.parse(getApiVerifyEmailResponse),
  );
}

export function getApiVerifyEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiVerifyEmailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiVerifyEmailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiVerifyEmailResponse' from JSON`,
  );
}
