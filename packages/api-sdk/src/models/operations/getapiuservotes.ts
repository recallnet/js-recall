/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiUserVotesSecurity = {
  siweSession: string;
};

export type GetApiUserVotesRequest = {
  /**
   * Optional competition ID to filter votes by
   */
  competitionId?: string | undefined;
  /**
   * Number of votes to return per page
   */
  limit?: number | undefined;
  /**
   * Number of votes to skip (for pagination)
   */
  offset?: number | undefined;
};

export type GetApiUserVotesVote = {
  id?: string | undefined;
  agentId?: string | undefined;
  competitionId?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiUserVotesPagination = {
  /**
   * Total number of votes
   */
  total?: number | undefined;
  /**
   * Number of votes per page
   */
  limit?: number | undefined;
  /**
   * Number of votes skipped
   */
  offset?: number | undefined;
  /**
   * Whether there are more votes available
   */
  hasMore?: boolean | undefined;
};

/**
 * Votes retrieved successfully
 */
export type GetApiUserVotesResponse = {
  success?: boolean | undefined;
  votes?: Array<GetApiUserVotesVote> | undefined;
  pagination?: GetApiUserVotesPagination | undefined;
};

/** @internal */
export const GetApiUserVotesSecurity$inboundSchema: z.ZodType<
  GetApiUserVotesSecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    SIWESession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      SIWESession: "siweSession",
    });
  });

/** @internal */
export type GetApiUserVotesSecurity$Outbound = {
  SIWESession: string;
};

/** @internal */
export const GetApiUserVotesSecurity$outboundSchema: z.ZodType<
  GetApiUserVotesSecurity$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesSecurity
> = z
  .object({
    siweSession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      siweSession: "SIWESession",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesSecurity$ {
  /** @deprecated use `GetApiUserVotesSecurity$inboundSchema` instead. */
  export const inboundSchema = GetApiUserVotesSecurity$inboundSchema;
  /** @deprecated use `GetApiUserVotesSecurity$outboundSchema` instead. */
  export const outboundSchema = GetApiUserVotesSecurity$outboundSchema;
  /** @deprecated use `GetApiUserVotesSecurity$Outbound` instead. */
  export type Outbound = GetApiUserVotesSecurity$Outbound;
}

export function getApiUserVotesSecurityToJSON(
  getApiUserVotesSecurity: GetApiUserVotesSecurity,
): string {
  return JSON.stringify(
    GetApiUserVotesSecurity$outboundSchema.parse(getApiUserVotesSecurity),
  );
}

export function getApiUserVotesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserVotesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserVotesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserVotesSecurity' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotesRequest$inboundSchema: z.ZodType<
  GetApiUserVotesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
  limit: z.number().int().default(50),
  offset: z.number().int().default(0),
});

/** @internal */
export type GetApiUserVotesRequest$Outbound = {
  competitionId?: string | undefined;
  limit: number;
  offset: number;
};

/** @internal */
export const GetApiUserVotesRequest$outboundSchema: z.ZodType<
  GetApiUserVotesRequest$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesRequest
> = z.object({
  competitionId: z.string().optional(),
  limit: z.number().int().default(50),
  offset: z.number().int().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesRequest$ {
  /** @deprecated use `GetApiUserVotesRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiUserVotesRequest$inboundSchema;
  /** @deprecated use `GetApiUserVotesRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiUserVotesRequest$outboundSchema;
  /** @deprecated use `GetApiUserVotesRequest$Outbound` instead. */
  export type Outbound = GetApiUserVotesRequest$Outbound;
}

export function getApiUserVotesRequestToJSON(
  getApiUserVotesRequest: GetApiUserVotesRequest,
): string {
  return JSON.stringify(
    GetApiUserVotesRequest$outboundSchema.parse(getApiUserVotesRequest),
  );
}

export function getApiUserVotesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserVotesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserVotesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserVotesRequest' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotesVote$inboundSchema: z.ZodType<
  GetApiUserVotesVote,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  agentId: z.string().optional(),
  competitionId: z.string().optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiUserVotesVote$Outbound = {
  id?: string | undefined;
  agentId?: string | undefined;
  competitionId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiUserVotesVote$outboundSchema: z.ZodType<
  GetApiUserVotesVote$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesVote
> = z.object({
  id: z.string().optional(),
  agentId: z.string().optional(),
  competitionId: z.string().optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesVote$ {
  /** @deprecated use `GetApiUserVotesVote$inboundSchema` instead. */
  export const inboundSchema = GetApiUserVotesVote$inboundSchema;
  /** @deprecated use `GetApiUserVotesVote$outboundSchema` instead. */
  export const outboundSchema = GetApiUserVotesVote$outboundSchema;
  /** @deprecated use `GetApiUserVotesVote$Outbound` instead. */
  export type Outbound = GetApiUserVotesVote$Outbound;
}

export function getApiUserVotesVoteToJSON(
  getApiUserVotesVote: GetApiUserVotesVote,
): string {
  return JSON.stringify(
    GetApiUserVotesVote$outboundSchema.parse(getApiUserVotesVote),
  );
}

export function getApiUserVotesVoteFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserVotesVote, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserVotesVote$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserVotesVote' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotesPagination$inboundSchema: z.ZodType<
  GetApiUserVotesPagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  hasMore: z.boolean().optional(),
});

/** @internal */
export type GetApiUserVotesPagination$Outbound = {
  total?: number | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  hasMore?: boolean | undefined;
};

/** @internal */
export const GetApiUserVotesPagination$outboundSchema: z.ZodType<
  GetApiUserVotesPagination$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesPagination
> = z.object({
  total: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  hasMore: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesPagination$ {
  /** @deprecated use `GetApiUserVotesPagination$inboundSchema` instead. */
  export const inboundSchema = GetApiUserVotesPagination$inboundSchema;
  /** @deprecated use `GetApiUserVotesPagination$outboundSchema` instead. */
  export const outboundSchema = GetApiUserVotesPagination$outboundSchema;
  /** @deprecated use `GetApiUserVotesPagination$Outbound` instead. */
  export type Outbound = GetApiUserVotesPagination$Outbound;
}

export function getApiUserVotesPaginationToJSON(
  getApiUserVotesPagination: GetApiUserVotesPagination,
): string {
  return JSON.stringify(
    GetApiUserVotesPagination$outboundSchema.parse(getApiUserVotesPagination),
  );
}

export function getApiUserVotesPaginationFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserVotesPagination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserVotesPagination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserVotesPagination' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotesResponse$inboundSchema: z.ZodType<
  GetApiUserVotesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  votes: z.array(z.lazy(() => GetApiUserVotesVote$inboundSchema)).optional(),
  pagination: z.lazy(() => GetApiUserVotesPagination$inboundSchema).optional(),
});

/** @internal */
export type GetApiUserVotesResponse$Outbound = {
  success?: boolean | undefined;
  votes?: Array<GetApiUserVotesVote$Outbound> | undefined;
  pagination?: GetApiUserVotesPagination$Outbound | undefined;
};

/** @internal */
export const GetApiUserVotesResponse$outboundSchema: z.ZodType<
  GetApiUserVotesResponse$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesResponse
> = z.object({
  success: z.boolean().optional(),
  votes: z.array(z.lazy(() => GetApiUserVotesVote$outboundSchema)).optional(),
  pagination: z.lazy(() => GetApiUserVotesPagination$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesResponse$ {
  /** @deprecated use `GetApiUserVotesResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiUserVotesResponse$inboundSchema;
  /** @deprecated use `GetApiUserVotesResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiUserVotesResponse$outboundSchema;
  /** @deprecated use `GetApiUserVotesResponse$Outbound` instead. */
  export type Outbound = GetApiUserVotesResponse$Outbound;
}

export function getApiUserVotesResponseToJSON(
  getApiUserVotesResponse: GetApiUserVotesResponse,
): string {
  return JSON.stringify(
    GetApiUserVotesResponse$outboundSchema.parse(getApiUserVotesResponse),
  );
}

export function getApiUserVotesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserVotesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUserVotesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserVotesResponse' from JSON`,
  );
}
