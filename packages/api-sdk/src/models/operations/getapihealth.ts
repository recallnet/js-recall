/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * API is healthy
 */
export type GetApiHealthResponse = {
  /**
   * Health status of the API
   */
  status?: string | undefined;
  /**
   * Current server time
   */
  timestamp?: Date | undefined;
  /**
   * Server uptime in seconds
   */
  uptime?: number | undefined;
  /**
   * API version
   */
  version?: string | undefined;
};

/** @internal */
export const GetApiHealthResponse$inboundSchema: z.ZodType<
  GetApiHealthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
  timestamp: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  uptime: z.number().optional(),
  version: z.string().optional(),
});

/** @internal */
export type GetApiHealthResponse$Outbound = {
  status?: string | undefined;
  timestamp?: string | undefined;
  uptime?: number | undefined;
  version?: string | undefined;
};

/** @internal */
export const GetApiHealthResponse$outboundSchema: z.ZodType<
  GetApiHealthResponse$Outbound,
  z.ZodTypeDef,
  GetApiHealthResponse
> = z.object({
  status: z.string().optional(),
  timestamp: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  uptime: z.number().optional(),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiHealthResponse$ {
  /** @deprecated use `GetApiHealthResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiHealthResponse$inboundSchema;
  /** @deprecated use `GetApiHealthResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiHealthResponse$outboundSchema;
  /** @deprecated use `GetApiHealthResponse$Outbound` instead. */
  export type Outbound = GetApiHealthResponse$Outbound;
}

export function getApiHealthResponseToJSON(
  getApiHealthResponse: GetApiHealthResponse,
): string {
  return JSON.stringify(
    GetApiHealthResponse$outboundSchema.parse(getApiHealthResponse),
  );
}

export function getApiHealthResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiHealthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiHealthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiHealthResponse' from JSON`,
  );
}
