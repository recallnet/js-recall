/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostApiAdminAgentsUser = {
  /**
   * The user ID (owner) of the agent. Must be provided if userWalletAddress is not provided.
   */
  id?: string | null | undefined;
  /**
   * The user (owner) wallet address. Must be provided if userId is not provided.
   */
  walletAddress?: string | null | undefined;
};

/**
 * Optional metadata for the agent
 */
export type PostApiAdminAgentsMetadataRequest = {};

export type AgentRequest = {
  /**
   * Agent name
   */
  name: string;
  /**
   * Agent handle
   */
  handle?: string | undefined;
  /**
   * The agent wallet address. Must be provided if userWalletAddress is not provided.
   */
  walletAddress?: string | null | undefined;
  /**
   * Agent email
   */
  email?: string | null | undefined;
  /**
   * Agent description
   */
  description?: string | null | undefined;
  /**
   * URL to agent's image
   */
  imageUrl?: string | null | undefined;
  /**
   * Optional metadata for the agent
   */
  metadata?: PostApiAdminAgentsMetadataRequest | null | undefined;
};

export type PostApiAdminAgentsRequest = {
  user: PostApiAdminAgentsUser;
  agent: AgentRequest;
};

/**
 * Optional metadata for the agent
 */
export type PostApiAdminAgentsMetadataResponse = {};

export type PostApiAdminAgentsAgentResponse = {
  /**
   * Agent ID
   */
  id?: string | undefined;
  /**
   * Agent owner ID
   */
  ownerId?: string | undefined;
  /**
   * Agent name
   */
  name?: string | undefined;
  /**
   * Agent handle
   */
  handle?: string | undefined;
  /**
   * Agent wallet address
   */
  walletAddress?: string | null | undefined;
  /**
   * Agent email
   */
  email?: string | null | undefined;
  /**
   * Agent description
   */
  description?: string | null | undefined;
  /**
   * URL to agent's image
   */
  imageUrl?: string | null | undefined;
  /**
   * Optional metadata for the agent
   */
  metadata?: PostApiAdminAgentsMetadataResponse | null | undefined;
  /**
   * API key for the agent to use with Bearer authentication. Admin should securely provide this to the agent.
   */
  apiKey?: string | undefined;
  /**
   * Agent status
   */
  status?: string | undefined;
  /**
   * Agent creation timestamp
   */
  createdAt?: Date | undefined;
  /**
   * Agent update timestamp
   */
  updatedAt?: Date | undefined;
};

/**
 * Agent registered successfully
 */
export type PostApiAdminAgentsResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  agent?: PostApiAdminAgentsAgentResponse | undefined;
};

/** @internal */
export const PostApiAdminAgentsUser$inboundSchema: z.ZodType<
  PostApiAdminAgentsUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  walletAddress: z.nullable(z.string()).optional(),
});

/** @internal */
export type PostApiAdminAgentsUser$Outbound = {
  id?: string | null | undefined;
  walletAddress?: string | null | undefined;
};

/** @internal */
export const PostApiAdminAgentsUser$outboundSchema: z.ZodType<
  PostApiAdminAgentsUser$Outbound,
  z.ZodTypeDef,
  PostApiAdminAgentsUser
> = z.object({
  id: z.nullable(z.string()).optional(),
  walletAddress: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminAgentsUser$ {
  /** @deprecated use `PostApiAdminAgentsUser$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminAgentsUser$inboundSchema;
  /** @deprecated use `PostApiAdminAgentsUser$outboundSchema` instead. */
  export const outboundSchema = PostApiAdminAgentsUser$outboundSchema;
  /** @deprecated use `PostApiAdminAgentsUser$Outbound` instead. */
  export type Outbound = PostApiAdminAgentsUser$Outbound;
}

export function postApiAdminAgentsUserToJSON(
  postApiAdminAgentsUser: PostApiAdminAgentsUser,
): string {
  return JSON.stringify(
    PostApiAdminAgentsUser$outboundSchema.parse(postApiAdminAgentsUser),
  );
}

export function postApiAdminAgentsUserFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminAgentsUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAdminAgentsUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminAgentsUser' from JSON`,
  );
}

/** @internal */
export const PostApiAdminAgentsMetadataRequest$inboundSchema: z.ZodType<
  PostApiAdminAgentsMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostApiAdminAgentsMetadataRequest$Outbound = {};

/** @internal */
export const PostApiAdminAgentsMetadataRequest$outboundSchema: z.ZodType<
  PostApiAdminAgentsMetadataRequest$Outbound,
  z.ZodTypeDef,
  PostApiAdminAgentsMetadataRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminAgentsMetadataRequest$ {
  /** @deprecated use `PostApiAdminAgentsMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminAgentsMetadataRequest$inboundSchema;
  /** @deprecated use `PostApiAdminAgentsMetadataRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminAgentsMetadataRequest$outboundSchema;
  /** @deprecated use `PostApiAdminAgentsMetadataRequest$Outbound` instead. */
  export type Outbound = PostApiAdminAgentsMetadataRequest$Outbound;
}

export function postApiAdminAgentsMetadataRequestToJSON(
  postApiAdminAgentsMetadataRequest: PostApiAdminAgentsMetadataRequest,
): string {
  return JSON.stringify(
    PostApiAdminAgentsMetadataRequest$outboundSchema.parse(
      postApiAdminAgentsMetadataRequest,
    ),
  );
}

export function postApiAdminAgentsMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminAgentsMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAdminAgentsMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminAgentsMetadataRequest' from JSON`,
  );
}

/** @internal */
export const AgentRequest$inboundSchema: z.ZodType<
  AgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  handle: z.string().optional(),
  walletAddress: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => PostApiAdminAgentsMetadataRequest$inboundSchema))
    .optional(),
});

/** @internal */
export type AgentRequest$Outbound = {
  name: string;
  handle?: string | undefined;
  walletAddress?: string | null | undefined;
  email?: string | null | undefined;
  description?: string | null | undefined;
  imageUrl?: string | null | undefined;
  metadata?: PostApiAdminAgentsMetadataRequest$Outbound | null | undefined;
};

/** @internal */
export const AgentRequest$outboundSchema: z.ZodType<
  AgentRequest$Outbound,
  z.ZodTypeDef,
  AgentRequest
> = z.object({
  name: z.string(),
  handle: z.string().optional(),
  walletAddress: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => PostApiAdminAgentsMetadataRequest$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentRequest$ {
  /** @deprecated use `AgentRequest$inboundSchema` instead. */
  export const inboundSchema = AgentRequest$inboundSchema;
  /** @deprecated use `AgentRequest$outboundSchema` instead. */
  export const outboundSchema = AgentRequest$outboundSchema;
  /** @deprecated use `AgentRequest$Outbound` instead. */
  export type Outbound = AgentRequest$Outbound;
}

export function agentRequestToJSON(agentRequest: AgentRequest): string {
  return JSON.stringify(AgentRequest$outboundSchema.parse(agentRequest));
}

export function agentRequestFromJSON(
  jsonString: string,
): SafeParseResult<AgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentRequest' from JSON`,
  );
}

/** @internal */
export const PostApiAdminAgentsRequest$inboundSchema: z.ZodType<
  PostApiAdminAgentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => PostApiAdminAgentsUser$inboundSchema),
  agent: z.lazy(() => AgentRequest$inboundSchema),
});

/** @internal */
export type PostApiAdminAgentsRequest$Outbound = {
  user: PostApiAdminAgentsUser$Outbound;
  agent: AgentRequest$Outbound;
};

/** @internal */
export const PostApiAdminAgentsRequest$outboundSchema: z.ZodType<
  PostApiAdminAgentsRequest$Outbound,
  z.ZodTypeDef,
  PostApiAdminAgentsRequest
> = z.object({
  user: z.lazy(() => PostApiAdminAgentsUser$outboundSchema),
  agent: z.lazy(() => AgentRequest$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminAgentsRequest$ {
  /** @deprecated use `PostApiAdminAgentsRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminAgentsRequest$inboundSchema;
  /** @deprecated use `PostApiAdminAgentsRequest$outboundSchema` instead. */
  export const outboundSchema = PostApiAdminAgentsRequest$outboundSchema;
  /** @deprecated use `PostApiAdminAgentsRequest$Outbound` instead. */
  export type Outbound = PostApiAdminAgentsRequest$Outbound;
}

export function postApiAdminAgentsRequestToJSON(
  postApiAdminAgentsRequest: PostApiAdminAgentsRequest,
): string {
  return JSON.stringify(
    PostApiAdminAgentsRequest$outboundSchema.parse(postApiAdminAgentsRequest),
  );
}

export function postApiAdminAgentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminAgentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAdminAgentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminAgentsRequest' from JSON`,
  );
}

/** @internal */
export const PostApiAdminAgentsMetadataResponse$inboundSchema: z.ZodType<
  PostApiAdminAgentsMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostApiAdminAgentsMetadataResponse$Outbound = {};

/** @internal */
export const PostApiAdminAgentsMetadataResponse$outboundSchema: z.ZodType<
  PostApiAdminAgentsMetadataResponse$Outbound,
  z.ZodTypeDef,
  PostApiAdminAgentsMetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminAgentsMetadataResponse$ {
  /** @deprecated use `PostApiAdminAgentsMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminAgentsMetadataResponse$inboundSchema;
  /** @deprecated use `PostApiAdminAgentsMetadataResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminAgentsMetadataResponse$outboundSchema;
  /** @deprecated use `PostApiAdminAgentsMetadataResponse$Outbound` instead. */
  export type Outbound = PostApiAdminAgentsMetadataResponse$Outbound;
}

export function postApiAdminAgentsMetadataResponseToJSON(
  postApiAdminAgentsMetadataResponse: PostApiAdminAgentsMetadataResponse,
): string {
  return JSON.stringify(
    PostApiAdminAgentsMetadataResponse$outboundSchema.parse(
      postApiAdminAgentsMetadataResponse,
    ),
  );
}

export function postApiAdminAgentsMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminAgentsMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiAdminAgentsMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminAgentsMetadataResponse' from JSON`,
  );
}

/** @internal */
export const PostApiAdminAgentsAgentResponse$inboundSchema: z.ZodType<
  PostApiAdminAgentsAgentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  walletAddress: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => PostApiAdminAgentsMetadataResponse$inboundSchema))
    .optional(),
  apiKey: z.string().optional(),
  status: z.string().optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiAdminAgentsAgentResponse$Outbound = {
  id?: string | undefined;
  ownerId?: string | undefined;
  name?: string | undefined;
  handle?: string | undefined;
  walletAddress?: string | null | undefined;
  email?: string | null | undefined;
  description?: string | null | undefined;
  imageUrl?: string | null | undefined;
  metadata?: PostApiAdminAgentsMetadataResponse$Outbound | null | undefined;
  apiKey?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiAdminAgentsAgentResponse$outboundSchema: z.ZodType<
  PostApiAdminAgentsAgentResponse$Outbound,
  z.ZodTypeDef,
  PostApiAdminAgentsAgentResponse
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.string().optional(),
  handle: z.string().optional(),
  walletAddress: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  metadata: z
    .nullable(z.lazy(() => PostApiAdminAgentsMetadataResponse$outboundSchema))
    .optional(),
  apiKey: z.string().optional(),
  status: z.string().optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminAgentsAgentResponse$ {
  /** @deprecated use `PostApiAdminAgentsAgentResponse$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminAgentsAgentResponse$inboundSchema;
  /** @deprecated use `PostApiAdminAgentsAgentResponse$outboundSchema` instead. */
  export const outboundSchema = PostApiAdminAgentsAgentResponse$outboundSchema;
  /** @deprecated use `PostApiAdminAgentsAgentResponse$Outbound` instead. */
  export type Outbound = PostApiAdminAgentsAgentResponse$Outbound;
}

export function postApiAdminAgentsAgentResponseToJSON(
  postApiAdminAgentsAgentResponse: PostApiAdminAgentsAgentResponse,
): string {
  return JSON.stringify(
    PostApiAdminAgentsAgentResponse$outboundSchema.parse(
      postApiAdminAgentsAgentResponse,
    ),
  );
}

export function postApiAdminAgentsAgentResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminAgentsAgentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAdminAgentsAgentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminAgentsAgentResponse' from JSON`,
  );
}

/** @internal */
export const PostApiAdminAgentsResponse$inboundSchema: z.ZodType<
  PostApiAdminAgentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  agent: z.lazy(() => PostApiAdminAgentsAgentResponse$inboundSchema).optional(),
});

/** @internal */
export type PostApiAdminAgentsResponse$Outbound = {
  success?: boolean | undefined;
  agent?: PostApiAdminAgentsAgentResponse$Outbound | undefined;
};

/** @internal */
export const PostApiAdminAgentsResponse$outboundSchema: z.ZodType<
  PostApiAdminAgentsResponse$Outbound,
  z.ZodTypeDef,
  PostApiAdminAgentsResponse
> = z.object({
  success: z.boolean().optional(),
  agent: z
    .lazy(() => PostApiAdminAgentsAgentResponse$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminAgentsResponse$ {
  /** @deprecated use `PostApiAdminAgentsResponse$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminAgentsResponse$inboundSchema;
  /** @deprecated use `PostApiAdminAgentsResponse$outboundSchema` instead. */
  export const outboundSchema = PostApiAdminAgentsResponse$outboundSchema;
  /** @deprecated use `PostApiAdminAgentsResponse$Outbound` instead. */
  export type Outbound = PostApiAdminAgentsResponse$Outbound;
}

export function postApiAdminAgentsResponseToJSON(
  postApiAdminAgentsResponse: PostApiAdminAgentsResponse,
): string {
  return JSON.stringify(
    PostApiAdminAgentsResponse$outboundSchema.parse(postApiAdminAgentsResponse),
  );
}

export function postApiAdminAgentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminAgentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAdminAgentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminAgentsResponse' from JSON`,
  );
}
