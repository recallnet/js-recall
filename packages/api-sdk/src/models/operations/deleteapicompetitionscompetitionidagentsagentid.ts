/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest = {
  /**
   * Competition ID
   */
  competitionId: string;
  /**
   * Agent ID
   */
  agentId: string;
};

/**
 * Successfully left competition
 */
export type DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  /**
   * Success message
   */
  message?: string | undefined;
};

/** @internal */
export const DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$inboundSchema: z.ZodType<
  DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string(),
  agentId: z.string(),
});

/** @internal */
export type DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$Outbound = {
  competitionId: string;
  agentId: string;
};

/** @internal */
export const DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$outboundSchema: z.ZodType<
  DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest
> = z.object({
  competitionId: z.string(),
  agentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$ {
  /** @deprecated use `DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$Outbound` instead. */
  export type Outbound =
    DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$Outbound;
}

export function deleteApiCompetitionsCompetitionIdAgentsAgentIdRequestToJSON(
  deleteApiCompetitionsCompetitionIdAgentsAgentIdRequest: DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest,
): string {
  return JSON.stringify(
    DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$outboundSchema.parse(
      deleteApiCompetitionsCompetitionIdAgentsAgentIdRequest,
    ),
  );
}

export function deleteApiCompetitionsCompetitionIdAgentsAgentIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteApiCompetitionsCompetitionIdAgentsAgentIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$inboundSchema: z.ZodType<
  DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$outboundSchema: z.ZodType<
  DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse
> = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$ {
  /** @deprecated use `DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$inboundSchema;
  /** @deprecated use `DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$outboundSchema;
  /** @deprecated use `DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$Outbound` instead. */
  export type Outbound =
    DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$Outbound;
}

export function deleteApiCompetitionsCompetitionIdAgentsAgentIdResponseToJSON(
  deleteApiCompetitionsCompetitionIdAgentsAgentIdResponse: DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse,
): string {
  return JSON.stringify(
    DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$outboundSchema.parse(
      deleteApiCompetitionsCompetitionIdAgentsAgentIdResponse,
    ),
  );
}

export function deleteApiCompetitionsCompetitionIdAgentsAgentIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteApiCompetitionsCompetitionIdAgentsAgentIdResponse' from JSON`,
  );
}
