/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Blockchain type of the token
 */
export const GetApiAccountPortfolioChain = {
  Evm: "evm",
  Svm: "svm",
} as const;
/**
 * Blockchain type of the token
 */
export type GetApiAccountPortfolioChain = ClosedEnum<
  typeof GetApiAccountPortfolioChain
>;

export type Token = {
  /**
   * Token address
   */
  token?: string | undefined;
  /**
   * Token balance amount
   */
  amount?: number | undefined;
  /**
   * Current token price in USD
   */
  price?: number | undefined;
  /**
   * Total value of token holdings in USD
   */
  value?: number | undefined;
  /**
   * Blockchain type of the token
   */
  chain?: GetApiAccountPortfolioChain | undefined;
  /**
   * Specific chain for EVM tokens
   */
  specificChain?: string | null | undefined;
};

/**
 * Source of the portfolio data
 */
export const Source = {
  Snapshot: "snapshot",
  LiveCalculation: "live-calculation",
} as const;
/**
 * Source of the portfolio data
 */
export type Source = ClosedEnum<typeof Source>;

/**
 * Team portfolio information
 */
export type GetApiAccountPortfolioResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  /**
   * Team ID
   */
  teamId?: string | undefined;
  /**
   * Total portfolio value in USD
   */
  totalValue?: number | undefined;
  tokens?: Array<Token> | undefined;
  /**
   * Time of the snapshot (if source is 'snapshot')
   */
  snapshotTime?: Date | undefined;
  /**
   * Source of the portfolio data
   */
  source?: Source | undefined;
};

/** @internal */
export const GetApiAccountPortfolioChain$inboundSchema: z.ZodNativeEnum<
  typeof GetApiAccountPortfolioChain
> = z.nativeEnum(GetApiAccountPortfolioChain);

/** @internal */
export const GetApiAccountPortfolioChain$outboundSchema: z.ZodNativeEnum<
  typeof GetApiAccountPortfolioChain
> = GetApiAccountPortfolioChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAccountPortfolioChain$ {
  /** @deprecated use `GetApiAccountPortfolioChain$inboundSchema` instead. */
  export const inboundSchema = GetApiAccountPortfolioChain$inboundSchema;
  /** @deprecated use `GetApiAccountPortfolioChain$outboundSchema` instead. */
  export const outboundSchema = GetApiAccountPortfolioChain$outboundSchema;
}

/** @internal */
export const Token$inboundSchema: z.ZodType<Token, z.ZodTypeDef, unknown> =
  z.object({
    token: z.string().optional(),
    amount: z.number().optional(),
    price: z.number().optional(),
    value: z.number().optional(),
    chain: GetApiAccountPortfolioChain$inboundSchema.optional(),
    specificChain: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Token$Outbound = {
  token?: string | undefined;
  amount?: number | undefined;
  price?: number | undefined;
  value?: number | undefined;
  chain?: string | undefined;
  specificChain?: string | null | undefined;
};

/** @internal */
export const Token$outboundSchema: z.ZodType<
  Token$Outbound,
  z.ZodTypeDef,
  Token
> = z.object({
  token: z.string().optional(),
  amount: z.number().optional(),
  price: z.number().optional(),
  value: z.number().optional(),
  chain: GetApiAccountPortfolioChain$outboundSchema.optional(),
  specificChain: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Token$ {
  /** @deprecated use `Token$inboundSchema` instead. */
  export const inboundSchema = Token$inboundSchema;
  /** @deprecated use `Token$outboundSchema` instead. */
  export const outboundSchema = Token$outboundSchema;
  /** @deprecated use `Token$Outbound` instead. */
  export type Outbound = Token$Outbound;
}

export function tokenToJSON(token: Token): string {
  return JSON.stringify(Token$outboundSchema.parse(token));
}

export function tokenFromJSON(
  jsonString: string,
): SafeParseResult<Token, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Token$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Token' from JSON`,
  );
}

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> =
  z.nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const GetApiAccountPortfolioResponse$inboundSchema: z.ZodType<
  GetApiAccountPortfolioResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  teamId: z.string().optional(),
  totalValue: z.number().optional(),
  tokens: z.array(z.lazy(() => Token$inboundSchema)).optional(),
  snapshotTime: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  source: Source$inboundSchema.optional(),
});

/** @internal */
export type GetApiAccountPortfolioResponse$Outbound = {
  success?: boolean | undefined;
  teamId?: string | undefined;
  totalValue?: number | undefined;
  tokens?: Array<Token$Outbound> | undefined;
  snapshotTime?: string | undefined;
  source?: string | undefined;
};

/** @internal */
export const GetApiAccountPortfolioResponse$outboundSchema: z.ZodType<
  GetApiAccountPortfolioResponse$Outbound,
  z.ZodTypeDef,
  GetApiAccountPortfolioResponse
> = z.object({
  success: z.boolean().optional(),
  teamId: z.string().optional(),
  totalValue: z.number().optional(),
  tokens: z.array(z.lazy(() => Token$outboundSchema)).optional(),
  snapshotTime: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  source: Source$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAccountPortfolioResponse$ {
  /** @deprecated use `GetApiAccountPortfolioResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAccountPortfolioResponse$inboundSchema;
  /** @deprecated use `GetApiAccountPortfolioResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAccountPortfolioResponse$outboundSchema;
  /** @deprecated use `GetApiAccountPortfolioResponse$Outbound` instead. */
  export type Outbound = GetApiAccountPortfolioResponse$Outbound;
}

export function getApiAccountPortfolioResponseToJSON(
  getApiAccountPortfolioResponse: GetApiAccountPortfolioResponse,
): string {
  return JSON.stringify(
    GetApiAccountPortfolioResponse$outboundSchema.parse(
      getApiAccountPortfolioResponse,
    ),
  );
}

export function getApiAccountPortfolioResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAccountPortfolioResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAccountPortfolioResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAccountPortfolioResponse' from JSON`,
  );
}
