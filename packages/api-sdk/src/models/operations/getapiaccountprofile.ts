/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAccountProfileRef = {
  /**
   * Agent name
   */
  name?: string | undefined;
  /**
   * Agent version
   */
  version?: string | undefined;
  /**
   * Link to agent documentation or repository
   */
  url?: string | undefined;
};

export type GetApiAccountProfileSocial = {
  /**
   * Agent social name
   */
  name?: string | undefined;
  /**
   * Contact email for the agent
   */
  email?: string | undefined;
  /**
   * Twitter handle
   */
  twitter?: string | undefined;
};

/**
 * Optional agent metadata
 */
export type GetApiAccountProfileMetadata = {
  ref?: GetApiAccountProfileRef | undefined;
  /**
   * Brief description of the agent
   */
  description?: string | undefined;
  social?: GetApiAccountProfileSocial | undefined;
};

export type GetApiAccountProfileTeam = {
  /**
   * Team ID
   */
  id?: string | undefined;
  /**
   * Team name
   */
  name?: string | undefined;
  /**
   * Team email
   */
  email?: string | undefined;
  /**
   * Contact person name
   */
  contactPerson?: string | undefined;
  /**
   * Optional agent metadata
   */
  metadata?: GetApiAccountProfileMetadata | null | undefined;
  /**
   * Team creation timestamp
   */
  createdAt?: Date | undefined;
  /**
   * URL to the team's image
   */
  imageUrl?: string | null | undefined;
  /**
   * Team last update timestamp
   */
  updatedAt?: Date | undefined;
};

/**
 * Team profile
 */
export type GetApiAccountProfileResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  team?: GetApiAccountProfileTeam | undefined;
};

/** @internal */
export const GetApiAccountProfileRef$inboundSchema: z.ZodType<
  GetApiAccountProfileRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  version: z.string().optional(),
  url: z.string().optional(),
});

/** @internal */
export type GetApiAccountProfileRef$Outbound = {
  name?: string | undefined;
  version?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const GetApiAccountProfileRef$outboundSchema: z.ZodType<
  GetApiAccountProfileRef$Outbound,
  z.ZodTypeDef,
  GetApiAccountProfileRef
> = z.object({
  name: z.string().optional(),
  version: z.string().optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAccountProfileRef$ {
  /** @deprecated use `GetApiAccountProfileRef$inboundSchema` instead. */
  export const inboundSchema = GetApiAccountProfileRef$inboundSchema;
  /** @deprecated use `GetApiAccountProfileRef$outboundSchema` instead. */
  export const outboundSchema = GetApiAccountProfileRef$outboundSchema;
  /** @deprecated use `GetApiAccountProfileRef$Outbound` instead. */
  export type Outbound = GetApiAccountProfileRef$Outbound;
}

export function getApiAccountProfileRefToJSON(
  getApiAccountProfileRef: GetApiAccountProfileRef,
): string {
  return JSON.stringify(
    GetApiAccountProfileRef$outboundSchema.parse(getApiAccountProfileRef),
  );
}

export function getApiAccountProfileRefFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAccountProfileRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAccountProfileRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAccountProfileRef' from JSON`,
  );
}

/** @internal */
export const GetApiAccountProfileSocial$inboundSchema: z.ZodType<
  GetApiAccountProfileSocial,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  twitter: z.string().optional(),
});

/** @internal */
export type GetApiAccountProfileSocial$Outbound = {
  name?: string | undefined;
  email?: string | undefined;
  twitter?: string | undefined;
};

/** @internal */
export const GetApiAccountProfileSocial$outboundSchema: z.ZodType<
  GetApiAccountProfileSocial$Outbound,
  z.ZodTypeDef,
  GetApiAccountProfileSocial
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  twitter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAccountProfileSocial$ {
  /** @deprecated use `GetApiAccountProfileSocial$inboundSchema` instead. */
  export const inboundSchema = GetApiAccountProfileSocial$inboundSchema;
  /** @deprecated use `GetApiAccountProfileSocial$outboundSchema` instead. */
  export const outboundSchema = GetApiAccountProfileSocial$outboundSchema;
  /** @deprecated use `GetApiAccountProfileSocial$Outbound` instead. */
  export type Outbound = GetApiAccountProfileSocial$Outbound;
}

export function getApiAccountProfileSocialToJSON(
  getApiAccountProfileSocial: GetApiAccountProfileSocial,
): string {
  return JSON.stringify(
    GetApiAccountProfileSocial$outboundSchema.parse(getApiAccountProfileSocial),
  );
}

export function getApiAccountProfileSocialFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAccountProfileSocial, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAccountProfileSocial$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAccountProfileSocial' from JSON`,
  );
}

/** @internal */
export const GetApiAccountProfileMetadata$inboundSchema: z.ZodType<
  GetApiAccountProfileMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.lazy(() => GetApiAccountProfileRef$inboundSchema).optional(),
  description: z.string().optional(),
  social: z.lazy(() => GetApiAccountProfileSocial$inboundSchema).optional(),
});

/** @internal */
export type GetApiAccountProfileMetadata$Outbound = {
  ref?: GetApiAccountProfileRef$Outbound | undefined;
  description?: string | undefined;
  social?: GetApiAccountProfileSocial$Outbound | undefined;
};

/** @internal */
export const GetApiAccountProfileMetadata$outboundSchema: z.ZodType<
  GetApiAccountProfileMetadata$Outbound,
  z.ZodTypeDef,
  GetApiAccountProfileMetadata
> = z.object({
  ref: z.lazy(() => GetApiAccountProfileRef$outboundSchema).optional(),
  description: z.string().optional(),
  social: z.lazy(() => GetApiAccountProfileSocial$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAccountProfileMetadata$ {
  /** @deprecated use `GetApiAccountProfileMetadata$inboundSchema` instead. */
  export const inboundSchema = GetApiAccountProfileMetadata$inboundSchema;
  /** @deprecated use `GetApiAccountProfileMetadata$outboundSchema` instead. */
  export const outboundSchema = GetApiAccountProfileMetadata$outboundSchema;
  /** @deprecated use `GetApiAccountProfileMetadata$Outbound` instead. */
  export type Outbound = GetApiAccountProfileMetadata$Outbound;
}

export function getApiAccountProfileMetadataToJSON(
  getApiAccountProfileMetadata: GetApiAccountProfileMetadata,
): string {
  return JSON.stringify(
    GetApiAccountProfileMetadata$outboundSchema.parse(
      getApiAccountProfileMetadata,
    ),
  );
}

export function getApiAccountProfileMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAccountProfileMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAccountProfileMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAccountProfileMetadata' from JSON`,
  );
}

/** @internal */
export const GetApiAccountProfileTeam$inboundSchema: z.ZodType<
  GetApiAccountProfileTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAccountProfileMetadata$inboundSchema))
    .optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  imageUrl: z.nullable(z.string()).optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiAccountProfileTeam$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  contactPerson?: string | undefined;
  metadata?: GetApiAccountProfileMetadata$Outbound | null | undefined;
  createdAt?: string | undefined;
  imageUrl?: string | null | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiAccountProfileTeam$outboundSchema: z.ZodType<
  GetApiAccountProfileTeam$Outbound,
  z.ZodTypeDef,
  GetApiAccountProfileTeam
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  metadata: z
    .nullable(z.lazy(() => GetApiAccountProfileMetadata$outboundSchema))
    .optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  imageUrl: z.nullable(z.string()).optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAccountProfileTeam$ {
  /** @deprecated use `GetApiAccountProfileTeam$inboundSchema` instead. */
  export const inboundSchema = GetApiAccountProfileTeam$inboundSchema;
  /** @deprecated use `GetApiAccountProfileTeam$outboundSchema` instead. */
  export const outboundSchema = GetApiAccountProfileTeam$outboundSchema;
  /** @deprecated use `GetApiAccountProfileTeam$Outbound` instead. */
  export type Outbound = GetApiAccountProfileTeam$Outbound;
}

export function getApiAccountProfileTeamToJSON(
  getApiAccountProfileTeam: GetApiAccountProfileTeam,
): string {
  return JSON.stringify(
    GetApiAccountProfileTeam$outboundSchema.parse(getApiAccountProfileTeam),
  );
}

export function getApiAccountProfileTeamFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAccountProfileTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAccountProfileTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAccountProfileTeam' from JSON`,
  );
}

/** @internal */
export const GetApiAccountProfileResponse$inboundSchema: z.ZodType<
  GetApiAccountProfileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  team: z.lazy(() => GetApiAccountProfileTeam$inboundSchema).optional(),
});

/** @internal */
export type GetApiAccountProfileResponse$Outbound = {
  success?: boolean | undefined;
  team?: GetApiAccountProfileTeam$Outbound | undefined;
};

/** @internal */
export const GetApiAccountProfileResponse$outboundSchema: z.ZodType<
  GetApiAccountProfileResponse$Outbound,
  z.ZodTypeDef,
  GetApiAccountProfileResponse
> = z.object({
  success: z.boolean().optional(),
  team: z.lazy(() => GetApiAccountProfileTeam$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAccountProfileResponse$ {
  /** @deprecated use `GetApiAccountProfileResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAccountProfileResponse$inboundSchema;
  /** @deprecated use `GetApiAccountProfileResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAccountProfileResponse$outboundSchema;
  /** @deprecated use `GetApiAccountProfileResponse$Outbound` instead. */
  export type Outbound = GetApiAccountProfileResponse$Outbound;
}

export function getApiAccountProfileResponseToJSON(
  getApiAccountProfileResponse: GetApiAccountProfileResponse,
): string {
  return JSON.stringify(
    GetApiAccountProfileResponse$outboundSchema.parse(
      getApiAccountProfileResponse,
    ),
  );
}

export function getApiAccountProfileResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAccountProfileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAccountProfileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAccountProfileResponse' from JSON`,
  );
}
