/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Optional metadata about the team's agent
 */
export type PostApiPublicTeamsRegisterMetadataRequest = {};

export type PostApiPublicTeamsRegisterRequest = {
  /**
   * Name of the team
   */
  teamName: string;
  /**
   * Team email address
   */
  email: string;
  /**
   * Name of the contact person
   */
  contactPerson: string;
  /**
   * (Optional) Ethereum wallet address (must start with 0x). If not provided, one will be auto-generated.
   */
  walletAddress?: string | undefined;
  /**
   * Optional metadata about the team's agent
   */
  metadata?: PostApiPublicTeamsRegisterMetadataRequest | undefined;
  /**
   * URL to the team's image
   */
  imageUrl?: string | undefined;
};

/**
 * Optional agent metadata if provided
 */
export type PostApiPublicTeamsRegisterMetadataResponse = {};

export type PostApiPublicTeamsRegisterTeam = {
  /**
   * Team ID
   */
  id?: string | undefined;
  /**
   * Team name
   */
  name?: string | undefined;
  /**
   * Team email
   */
  email?: string | undefined;
  /**
   * Contact person name
   */
  contactPerson?: string | undefined;
  /**
   * Ethereum wallet address
   */
  walletAddress?: string | undefined;
  /**
   * API key for the team to use with Bearer authentication
   */
  apiKey?: string | undefined;
  /**
   * Optional agent metadata if provided
   */
  metadata?: PostApiPublicTeamsRegisterMetadataResponse | undefined;
  /**
   * URL to the team's image
   */
  imageUrl?: string | null | undefined;
  /**
   * Account creation timestamp
   */
  createdAt?: Date | undefined;
};

/**
 * Team registered successfully
 */
export type PostApiPublicTeamsRegisterResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  team?: PostApiPublicTeamsRegisterTeam | undefined;
};

/** @internal */
export const PostApiPublicTeamsRegisterMetadataRequest$inboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostApiPublicTeamsRegisterMetadataRequest$Outbound = {};

/** @internal */
export const PostApiPublicTeamsRegisterMetadataRequest$outboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterMetadataRequest$Outbound,
  z.ZodTypeDef,
  PostApiPublicTeamsRegisterMetadataRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiPublicTeamsRegisterMetadataRequest$ {
  /** @deprecated use `PostApiPublicTeamsRegisterMetadataRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostApiPublicTeamsRegisterMetadataRequest$inboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterMetadataRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostApiPublicTeamsRegisterMetadataRequest$outboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterMetadataRequest$Outbound` instead. */
  export type Outbound = PostApiPublicTeamsRegisterMetadataRequest$Outbound;
}

export function postApiPublicTeamsRegisterMetadataRequestToJSON(
  postApiPublicTeamsRegisterMetadataRequest: PostApiPublicTeamsRegisterMetadataRequest,
): string {
  return JSON.stringify(
    PostApiPublicTeamsRegisterMetadataRequest$outboundSchema.parse(
      postApiPublicTeamsRegisterMetadataRequest,
    ),
  );
}

export function postApiPublicTeamsRegisterMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiPublicTeamsRegisterMetadataRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiPublicTeamsRegisterMetadataRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiPublicTeamsRegisterMetadataRequest' from JSON`,
  );
}

/** @internal */
export const PostApiPublicTeamsRegisterRequest$inboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamName: z.string(),
  email: z.string(),
  contactPerson: z.string(),
  walletAddress: z.string().optional(),
  metadata: z
    .lazy(() => PostApiPublicTeamsRegisterMetadataRequest$inboundSchema)
    .optional(),
  imageUrl: z.string().optional(),
});

/** @internal */
export type PostApiPublicTeamsRegisterRequest$Outbound = {
  teamName: string;
  email: string;
  contactPerson: string;
  walletAddress?: string | undefined;
  metadata?: PostApiPublicTeamsRegisterMetadataRequest$Outbound | undefined;
  imageUrl?: string | undefined;
};

/** @internal */
export const PostApiPublicTeamsRegisterRequest$outboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterRequest$Outbound,
  z.ZodTypeDef,
  PostApiPublicTeamsRegisterRequest
> = z.object({
  teamName: z.string(),
  email: z.string(),
  contactPerson: z.string(),
  walletAddress: z.string().optional(),
  metadata: z
    .lazy(() => PostApiPublicTeamsRegisterMetadataRequest$outboundSchema)
    .optional(),
  imageUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiPublicTeamsRegisterRequest$ {
  /** @deprecated use `PostApiPublicTeamsRegisterRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiPublicTeamsRegisterRequest$inboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostApiPublicTeamsRegisterRequest$outboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterRequest$Outbound` instead. */
  export type Outbound = PostApiPublicTeamsRegisterRequest$Outbound;
}

export function postApiPublicTeamsRegisterRequestToJSON(
  postApiPublicTeamsRegisterRequest: PostApiPublicTeamsRegisterRequest,
): string {
  return JSON.stringify(
    PostApiPublicTeamsRegisterRequest$outboundSchema.parse(
      postApiPublicTeamsRegisterRequest,
    ),
  );
}

export function postApiPublicTeamsRegisterRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiPublicTeamsRegisterRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiPublicTeamsRegisterRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiPublicTeamsRegisterRequest' from JSON`,
  );
}

/** @internal */
export const PostApiPublicTeamsRegisterMetadataResponse$inboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostApiPublicTeamsRegisterMetadataResponse$Outbound = {};

/** @internal */
export const PostApiPublicTeamsRegisterMetadataResponse$outboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterMetadataResponse$Outbound,
  z.ZodTypeDef,
  PostApiPublicTeamsRegisterMetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiPublicTeamsRegisterMetadataResponse$ {
  /** @deprecated use `PostApiPublicTeamsRegisterMetadataResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostApiPublicTeamsRegisterMetadataResponse$inboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterMetadataResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostApiPublicTeamsRegisterMetadataResponse$outboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterMetadataResponse$Outbound` instead. */
  export type Outbound = PostApiPublicTeamsRegisterMetadataResponse$Outbound;
}

export function postApiPublicTeamsRegisterMetadataResponseToJSON(
  postApiPublicTeamsRegisterMetadataResponse: PostApiPublicTeamsRegisterMetadataResponse,
): string {
  return JSON.stringify(
    PostApiPublicTeamsRegisterMetadataResponse$outboundSchema.parse(
      postApiPublicTeamsRegisterMetadataResponse,
    ),
  );
}

export function postApiPublicTeamsRegisterMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiPublicTeamsRegisterMetadataResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiPublicTeamsRegisterMetadataResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiPublicTeamsRegisterMetadataResponse' from JSON`,
  );
}

/** @internal */
export const PostApiPublicTeamsRegisterTeam$inboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  walletAddress: z.string().optional(),
  apiKey: z.string().optional(),
  metadata: z
    .lazy(() => PostApiPublicTeamsRegisterMetadataResponse$inboundSchema)
    .optional(),
  imageUrl: z.nullable(z.string()).optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiPublicTeamsRegisterTeam$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  contactPerson?: string | undefined;
  walletAddress?: string | undefined;
  apiKey?: string | undefined;
  metadata?: PostApiPublicTeamsRegisterMetadataResponse$Outbound | undefined;
  imageUrl?: string | null | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiPublicTeamsRegisterTeam$outboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterTeam$Outbound,
  z.ZodTypeDef,
  PostApiPublicTeamsRegisterTeam
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  walletAddress: z.string().optional(),
  apiKey: z.string().optional(),
  metadata: z
    .lazy(() => PostApiPublicTeamsRegisterMetadataResponse$outboundSchema)
    .optional(),
  imageUrl: z.nullable(z.string()).optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiPublicTeamsRegisterTeam$ {
  /** @deprecated use `PostApiPublicTeamsRegisterTeam$inboundSchema` instead. */
  export const inboundSchema = PostApiPublicTeamsRegisterTeam$inboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterTeam$outboundSchema` instead. */
  export const outboundSchema = PostApiPublicTeamsRegisterTeam$outboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterTeam$Outbound` instead. */
  export type Outbound = PostApiPublicTeamsRegisterTeam$Outbound;
}

export function postApiPublicTeamsRegisterTeamToJSON(
  postApiPublicTeamsRegisterTeam: PostApiPublicTeamsRegisterTeam,
): string {
  return JSON.stringify(
    PostApiPublicTeamsRegisterTeam$outboundSchema.parse(
      postApiPublicTeamsRegisterTeam,
    ),
  );
}

export function postApiPublicTeamsRegisterTeamFromJSON(
  jsonString: string,
): SafeParseResult<PostApiPublicTeamsRegisterTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiPublicTeamsRegisterTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiPublicTeamsRegisterTeam' from JSON`,
  );
}

/** @internal */
export const PostApiPublicTeamsRegisterResponse$inboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  team: z.lazy(() => PostApiPublicTeamsRegisterTeam$inboundSchema).optional(),
});

/** @internal */
export type PostApiPublicTeamsRegisterResponse$Outbound = {
  success?: boolean | undefined;
  team?: PostApiPublicTeamsRegisterTeam$Outbound | undefined;
};

/** @internal */
export const PostApiPublicTeamsRegisterResponse$outboundSchema: z.ZodType<
  PostApiPublicTeamsRegisterResponse$Outbound,
  z.ZodTypeDef,
  PostApiPublicTeamsRegisterResponse
> = z.object({
  success: z.boolean().optional(),
  team: z.lazy(() => PostApiPublicTeamsRegisterTeam$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiPublicTeamsRegisterResponse$ {
  /** @deprecated use `PostApiPublicTeamsRegisterResponse$inboundSchema` instead. */
  export const inboundSchema = PostApiPublicTeamsRegisterResponse$inboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostApiPublicTeamsRegisterResponse$outboundSchema;
  /** @deprecated use `PostApiPublicTeamsRegisterResponse$Outbound` instead. */
  export type Outbound = PostApiPublicTeamsRegisterResponse$Outbound;
}

export function postApiPublicTeamsRegisterResponseToJSON(
  postApiPublicTeamsRegisterResponse: PostApiPublicTeamsRegisterResponse,
): string {
  return JSON.stringify(
    PostApiPublicTeamsRegisterResponse$outboundSchema.parse(
      postApiPublicTeamsRegisterResponse,
    ),
  );
}

export function postApiPublicTeamsRegisterResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiPublicTeamsRegisterResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiPublicTeamsRegisterResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiPublicTeamsRegisterResponse' from JSON`,
  );
}
