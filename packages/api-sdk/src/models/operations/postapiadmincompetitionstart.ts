/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of cross-chain trading to allow in this competition (used when creating a new competition)
 */
export const PostApiAdminCompetitionStartTradingType = {
  DisallowAll: "disallowAll",
  DisallowXParent: "disallowXParent",
  Allow: "allow",
} as const;
/**
 * Type of cross-chain trading to allow in this competition (used when creating a new competition)
 */
export type PostApiAdminCompetitionStartTradingType = ClosedEnum<
  typeof PostApiAdminCompetitionStartTradingType
>;

/**
 * The type of competition
 */
export const PostApiAdminCompetitionStartTypeRequest = {
  Trading: "trading",
} as const;
/**
 * The type of competition
 */
export type PostApiAdminCompetitionStartTypeRequest = ClosedEnum<
  typeof PostApiAdminCompetitionStartTypeRequest
>;

/**
 * Trading constraints for the competition (used when creating a new competition)
 */
export type PostApiAdminCompetitionStartTradingConstraints = {
  /**
   * Minimum age of trading pairs in hours
   */
  minimumPairAgeHours?: number | undefined;
  /**
   * Minimum 24-hour volume in USD
   */
  minimum24hVolumeUsd?: number | undefined;
  /**
   * Minimum liquidity in USD
   */
  minimumLiquidityUsd?: number | undefined;
  /**
   * Minimum fully diluted valuation in USD
   */
  minimumFdvUsd?: number | undefined;
};

export type PostApiAdminCompetitionStartRequest = {
  /**
   * ID of an existing competition to start. If not provided, a new competition will be created.
   */
  competitionId?: string | undefined;
  /**
   * Competition name (required when creating a new competition)
   */
  name?: string | undefined;
  /**
   * Competition description (used when creating a new competition)
   */
  description?: string | undefined;
  /**
   * External URL for competition details (used when creating a new competition)
   */
  externalUrl?: string | undefined;
  /**
   * URL to competition image (used when creating a new competition)
   */
  imageUrl?: string | undefined;
  /**
   * End date for the competition (ISO 8601 format)
   */
  endDate?: Date | undefined;
  /**
   * Start date for voting (ISO 8601 format, used when creating a new competition)
   */
  votingStartDate?: Date | undefined;
  /**
   * End date for voting (ISO 8601 format, used when creating a new competition)
   */
  votingEndDate?: Date | undefined;
  /**
   * Array of agent IDs to include in the competition
   */
  agentIds: Array<string>;
  /**
   * Type of cross-chain trading to allow in this competition (used when creating a new competition)
   */
  tradingType?: PostApiAdminCompetitionStartTradingType | undefined;
  /**
   * Enable sandbox mode to automatically join newly registered agents to this competition (used when creating a new competition)
   */
  sandboxMode?: boolean | undefined;
  /**
   * The type of competition
   */
  type?: PostApiAdminCompetitionStartTypeRequest | undefined;
  /**
   * Trading constraints for the competition (used when creating a new competition)
   */
  tradingConstraints?:
    | PostApiAdminCompetitionStartTradingConstraints
    | undefined;
};

/**
 * Competition status
 */
export const PostApiAdminCompetitionStartStatus = {
  Pending: "pending",
  Active: "active",
  Completed: "completed",
} as const;
/**
 * Competition status
 */
export type PostApiAdminCompetitionStartStatus = ClosedEnum<
  typeof PostApiAdminCompetitionStartStatus
>;

/**
 * Type of cross-chain trading allowed in this competition
 */
export const PostApiAdminCompetitionStartCrossChainTradingType = {
  DisallowAll: "disallowAll",
  DisallowXParent: "disallowXParent",
  Allow: "allow",
} as const;
/**
 * Type of cross-chain trading allowed in this competition
 */
export type PostApiAdminCompetitionStartCrossChainTradingType = ClosedEnum<
  typeof PostApiAdminCompetitionStartCrossChainTradingType
>;

/**
 * The type of competition
 */
export const PostApiAdminCompetitionStartTypeResponse = {
  Trading: "trading",
} as const;
/**
 * The type of competition
 */
export type PostApiAdminCompetitionStartTypeResponse = ClosedEnum<
  typeof PostApiAdminCompetitionStartTypeResponse
>;

export type PostApiAdminCompetitionStartCompetition = {
  /**
   * Competition ID
   */
  id?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | undefined;
  /**
   * Competition start date
   */
  startDate?: Date | undefined;
  /**
   * Competition end date (null if not ended)
   */
  endDate?: Date | null | undefined;
  /**
   * External URL for competition details
   */
  externalUrl?: string | null | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | null | undefined;
  /**
   * Competition status
   */
  status?: PostApiAdminCompetitionStartStatus | undefined;
  /**
   * Type of cross-chain trading allowed in this competition
   */
  crossChainTradingType?:
    | PostApiAdminCompetitionStartCrossChainTradingType
    | undefined;
  /**
   * Whether sandbox mode is enabled for this competition
   */
  sandboxMode?: boolean | undefined;
  /**
   * The type of competition
   */
  type?: PostApiAdminCompetitionStartTypeResponse | undefined;
  /**
   * Agent IDs participating in the competition
   */
  agentIds?: Array<string> | undefined;
};

/**
 * Competition started successfully
 */
export type PostApiAdminCompetitionStartResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  competition?: PostApiAdminCompetitionStartCompetition | undefined;
  /**
   * Agent IDs that were successfully initialized for the competition
   */
  initializedAgents?: Array<string> | undefined;
};

/** @internal */
export const PostApiAdminCompetitionStartTradingType$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartTradingType
> = z.nativeEnum(PostApiAdminCompetitionStartTradingType);

/** @internal */
export const PostApiAdminCompetitionStartTradingType$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartTradingType
> = PostApiAdminCompetitionStartTradingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartTradingType$ {
  /** @deprecated use `PostApiAdminCompetitionStartTradingType$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAdminCompetitionStartTradingType$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartTradingType$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartTradingType$outboundSchema;
}

/** @internal */
export const PostApiAdminCompetitionStartTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartTypeRequest
> = z.nativeEnum(PostApiAdminCompetitionStartTypeRequest);

/** @internal */
export const PostApiAdminCompetitionStartTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartTypeRequest
> = PostApiAdminCompetitionStartTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartTypeRequest$ {
  /** @deprecated use `PostApiAdminCompetitionStartTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAdminCompetitionStartTypeRequest$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartTypeRequest$outboundSchema;
}

/** @internal */
export const PostApiAdminCompetitionStartTradingConstraints$inboundSchema: z.ZodType<
  PostApiAdminCompetitionStartTradingConstraints,
  z.ZodTypeDef,
  unknown
> = z.object({
  minimumPairAgeHours: z.number().optional(),
  minimum24hVolumeUsd: z.number().optional(),
  minimumLiquidityUsd: z.number().optional(),
  minimumFdvUsd: z.number().optional(),
});

/** @internal */
export type PostApiAdminCompetitionStartTradingConstraints$Outbound = {
  minimumPairAgeHours?: number | undefined;
  minimum24hVolumeUsd?: number | undefined;
  minimumLiquidityUsd?: number | undefined;
  minimumFdvUsd?: number | undefined;
};

/** @internal */
export const PostApiAdminCompetitionStartTradingConstraints$outboundSchema: z.ZodType<
  PostApiAdminCompetitionStartTradingConstraints$Outbound,
  z.ZodTypeDef,
  PostApiAdminCompetitionStartTradingConstraints
> = z.object({
  minimumPairAgeHours: z.number().optional(),
  minimum24hVolumeUsd: z.number().optional(),
  minimumLiquidityUsd: z.number().optional(),
  minimumFdvUsd: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartTradingConstraints$ {
  /** @deprecated use `PostApiAdminCompetitionStartTradingConstraints$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAdminCompetitionStartTradingConstraints$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartTradingConstraints$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartTradingConstraints$outboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartTradingConstraints$Outbound` instead. */
  export type Outbound =
    PostApiAdminCompetitionStartTradingConstraints$Outbound;
}

export function postApiAdminCompetitionStartTradingConstraintsToJSON(
  postApiAdminCompetitionStartTradingConstraints: PostApiAdminCompetitionStartTradingConstraints,
): string {
  return JSON.stringify(
    PostApiAdminCompetitionStartTradingConstraints$outboundSchema.parse(
      postApiAdminCompetitionStartTradingConstraints,
    ),
  );
}

export function postApiAdminCompetitionStartTradingConstraintsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiAdminCompetitionStartTradingConstraints,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiAdminCompetitionStartTradingConstraints$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiAdminCompetitionStartTradingConstraints' from JSON`,
  );
}

/** @internal */
export const PostApiAdminCompetitionStartRequest$inboundSchema: z.ZodType<
  PostApiAdminCompetitionStartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  externalUrl: z.string().optional(),
  imageUrl: z.string().optional(),
  endDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  votingStartDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  votingEndDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  agentIds: z.array(z.string()),
  tradingType:
    PostApiAdminCompetitionStartTradingType$inboundSchema.default(
      "disallowAll",
    ),
  sandboxMode: z.boolean().default(false),
  type: PostApiAdminCompetitionStartTypeRequest$inboundSchema.default(
    "trading",
  ),
  tradingConstraints: z
    .lazy(() => PostApiAdminCompetitionStartTradingConstraints$inboundSchema)
    .optional(),
});

/** @internal */
export type PostApiAdminCompetitionStartRequest$Outbound = {
  competitionId?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  externalUrl?: string | undefined;
  imageUrl?: string | undefined;
  endDate?: string | undefined;
  votingStartDate?: string | undefined;
  votingEndDate?: string | undefined;
  agentIds: Array<string>;
  tradingType: string;
  sandboxMode: boolean;
  type: string;
  tradingConstraints?:
    | PostApiAdminCompetitionStartTradingConstraints$Outbound
    | undefined;
};

/** @internal */
export const PostApiAdminCompetitionStartRequest$outboundSchema: z.ZodType<
  PostApiAdminCompetitionStartRequest$Outbound,
  z.ZodTypeDef,
  PostApiAdminCompetitionStartRequest
> = z.object({
  competitionId: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  externalUrl: z.string().optional(),
  imageUrl: z.string().optional(),
  endDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  votingStartDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  votingEndDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  agentIds: z.array(z.string()),
  tradingType:
    PostApiAdminCompetitionStartTradingType$outboundSchema.default(
      "disallowAll",
    ),
  sandboxMode: z.boolean().default(false),
  type: PostApiAdminCompetitionStartTypeRequest$outboundSchema.default(
    "trading",
  ),
  tradingConstraints: z
    .lazy(() => PostApiAdminCompetitionStartTradingConstraints$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartRequest$ {
  /** @deprecated use `PostApiAdminCompetitionStartRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAdminCompetitionStartRequest$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartRequest$outboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartRequest$Outbound` instead. */
  export type Outbound = PostApiAdminCompetitionStartRequest$Outbound;
}

export function postApiAdminCompetitionStartRequestToJSON(
  postApiAdminCompetitionStartRequest: PostApiAdminCompetitionStartRequest,
): string {
  return JSON.stringify(
    PostApiAdminCompetitionStartRequest$outboundSchema.parse(
      postApiAdminCompetitionStartRequest,
    ),
  );
}

export function postApiAdminCompetitionStartRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminCompetitionStartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiAdminCompetitionStartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminCompetitionStartRequest' from JSON`,
  );
}

/** @internal */
export const PostApiAdminCompetitionStartStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartStatus
> = z.nativeEnum(PostApiAdminCompetitionStartStatus);

/** @internal */
export const PostApiAdminCompetitionStartStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartStatus
> = PostApiAdminCompetitionStartStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartStatus$ {
  /** @deprecated use `PostApiAdminCompetitionStartStatus$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminCompetitionStartStatus$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartStatus$outboundSchema;
}

/** @internal */
export const PostApiAdminCompetitionStartCrossChainTradingType$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartCrossChainTradingType
> = z.nativeEnum(PostApiAdminCompetitionStartCrossChainTradingType);

/** @internal */
export const PostApiAdminCompetitionStartCrossChainTradingType$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartCrossChainTradingType
> = PostApiAdminCompetitionStartCrossChainTradingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartCrossChainTradingType$ {
  /** @deprecated use `PostApiAdminCompetitionStartCrossChainTradingType$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAdminCompetitionStartCrossChainTradingType$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartCrossChainTradingType$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartCrossChainTradingType$outboundSchema;
}

/** @internal */
export const PostApiAdminCompetitionStartTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartTypeResponse
> = z.nativeEnum(PostApiAdminCompetitionStartTypeResponse);

/** @internal */
export const PostApiAdminCompetitionStartTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAdminCompetitionStartTypeResponse
> = PostApiAdminCompetitionStartTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartTypeResponse$ {
  /** @deprecated use `PostApiAdminCompetitionStartTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAdminCompetitionStartTypeResponse$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartTypeResponse$outboundSchema;
}

/** @internal */
export const PostApiAdminCompetitionStartCompetition$inboundSchema: z.ZodType<
  PostApiAdminCompetitionStartCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  startDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  endDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  externalUrl: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: PostApiAdminCompetitionStartStatus$inboundSchema.optional(),
  crossChainTradingType:
    PostApiAdminCompetitionStartCrossChainTradingType$inboundSchema.optional(),
  sandboxMode: z.boolean().optional(),
  type: PostApiAdminCompetitionStartTypeResponse$inboundSchema.optional(),
  agentIds: z.array(z.string()).optional(),
});

/** @internal */
export type PostApiAdminCompetitionStartCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | null | undefined;
  externalUrl?: string | null | undefined;
  imageUrl?: string | null | undefined;
  status?: string | undefined;
  crossChainTradingType?: string | undefined;
  sandboxMode?: boolean | undefined;
  type?: string | undefined;
  agentIds?: Array<string> | undefined;
};

/** @internal */
export const PostApiAdminCompetitionStartCompetition$outboundSchema: z.ZodType<
  PostApiAdminCompetitionStartCompetition$Outbound,
  z.ZodTypeDef,
  PostApiAdminCompetitionStartCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  startDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  endDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  status: PostApiAdminCompetitionStartStatus$outboundSchema.optional(),
  crossChainTradingType:
    PostApiAdminCompetitionStartCrossChainTradingType$outboundSchema.optional(),
  sandboxMode: z.boolean().optional(),
  type: PostApiAdminCompetitionStartTypeResponse$outboundSchema.optional(),
  agentIds: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartCompetition$ {
  /** @deprecated use `PostApiAdminCompetitionStartCompetition$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAdminCompetitionStartCompetition$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartCompetition$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartCompetition$outboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartCompetition$Outbound` instead. */
  export type Outbound = PostApiAdminCompetitionStartCompetition$Outbound;
}

export function postApiAdminCompetitionStartCompetitionToJSON(
  postApiAdminCompetitionStartCompetition: PostApiAdminCompetitionStartCompetition,
): string {
  return JSON.stringify(
    PostApiAdminCompetitionStartCompetition$outboundSchema.parse(
      postApiAdminCompetitionStartCompetition,
    ),
  );
}

export function postApiAdminCompetitionStartCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiAdminCompetitionStartCompetition,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiAdminCompetitionStartCompetition$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiAdminCompetitionStartCompetition' from JSON`,
  );
}

/** @internal */
export const PostApiAdminCompetitionStartResponse$inboundSchema: z.ZodType<
  PostApiAdminCompetitionStartResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => PostApiAdminCompetitionStartCompetition$inboundSchema)
    .optional(),
  initializedAgents: z.array(z.string()).optional(),
});

/** @internal */
export type PostApiAdminCompetitionStartResponse$Outbound = {
  success?: boolean | undefined;
  competition?: PostApiAdminCompetitionStartCompetition$Outbound | undefined;
  initializedAgents?: Array<string> | undefined;
};

/** @internal */
export const PostApiAdminCompetitionStartResponse$outboundSchema: z.ZodType<
  PostApiAdminCompetitionStartResponse$Outbound,
  z.ZodTypeDef,
  PostApiAdminCompetitionStartResponse
> = z.object({
  success: z.boolean().optional(),
  competition: z
    .lazy(() => PostApiAdminCompetitionStartCompetition$outboundSchema)
    .optional(),
  initializedAgents: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminCompetitionStartResponse$ {
  /** @deprecated use `PostApiAdminCompetitionStartResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAdminCompetitionStartResponse$inboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAdminCompetitionStartResponse$outboundSchema;
  /** @deprecated use `PostApiAdminCompetitionStartResponse$Outbound` instead. */
  export type Outbound = PostApiAdminCompetitionStartResponse$Outbound;
}

export function postApiAdminCompetitionStartResponseToJSON(
  postApiAdminCompetitionStartResponse: PostApiAdminCompetitionStartResponse,
): string {
  return JSON.stringify(
    PostApiAdminCompetitionStartResponse$outboundSchema.parse(
      postApiAdminCompetitionStartResponse,
    ),
  );
}

export function postApiAdminCompetitionStartResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminCompetitionStartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiAdminCompetitionStartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminCompetitionStartResponse' from JSON`,
  );
}
