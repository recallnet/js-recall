/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiUserVotesCompetitionIdStateSecurity = {
  siweSession: string;
};

export type GetApiUserVotesCompetitionIdStateRequest = {
  /**
   * Competition ID to get voting state for
   */
  competitionId: string;
};

export type GetApiUserVotesCompetitionIdStateInfo = {
  /**
   * Whether the user has voted in this competition
   */
  hasVoted?: boolean | undefined;
  /**
   * ID of the agent the user voted for (if hasVoted is true)
   */
  agentId?: string | null | undefined;
  /**
   * When the user voted (if hasVoted is true)
   */
  votedAt?: Date | null | undefined;
};

export type VotingState = {
  /**
   * Whether the user can vote in this competition
   */
  canVote?: boolean | undefined;
  /**
   * Reason why voting is disabled (if canVote is false)
   */
  reason?: string | null | undefined;
  info?: GetApiUserVotesCompetitionIdStateInfo | undefined;
};

/**
 * Voting state retrieved successfully
 */
export type GetApiUserVotesCompetitionIdStateResponse = {
  success?: boolean | undefined;
  votingState?: VotingState | undefined;
};

/** @internal */
export const GetApiUserVotesCompetitionIdStateSecurity$inboundSchema: z.ZodType<
  GetApiUserVotesCompetitionIdStateSecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    SIWESession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      SIWESession: "siweSession",
    });
  });

/** @internal */
export type GetApiUserVotesCompetitionIdStateSecurity$Outbound = {
  SIWESession: string;
};

/** @internal */
export const GetApiUserVotesCompetitionIdStateSecurity$outboundSchema: z.ZodType<
  GetApiUserVotesCompetitionIdStateSecurity$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesCompetitionIdStateSecurity
> = z
  .object({
    siweSession: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      siweSession: "SIWESession",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesCompetitionIdStateSecurity$ {
  /** @deprecated use `GetApiUserVotesCompetitionIdStateSecurity$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserVotesCompetitionIdStateSecurity$inboundSchema;
  /** @deprecated use `GetApiUserVotesCompetitionIdStateSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserVotesCompetitionIdStateSecurity$outboundSchema;
  /** @deprecated use `GetApiUserVotesCompetitionIdStateSecurity$Outbound` instead. */
  export type Outbound = GetApiUserVotesCompetitionIdStateSecurity$Outbound;
}

export function getApiUserVotesCompetitionIdStateSecurityToJSON(
  getApiUserVotesCompetitionIdStateSecurity: GetApiUserVotesCompetitionIdStateSecurity,
): string {
  return JSON.stringify(
    GetApiUserVotesCompetitionIdStateSecurity$outboundSchema.parse(
      getApiUserVotesCompetitionIdStateSecurity,
    ),
  );
}

export function getApiUserVotesCompetitionIdStateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiUserVotesCompetitionIdStateSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserVotesCompetitionIdStateSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiUserVotesCompetitionIdStateSecurity' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotesCompetitionIdStateRequest$inboundSchema: z.ZodType<
  GetApiUserVotesCompetitionIdStateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  competitionId: z.string(),
});

/** @internal */
export type GetApiUserVotesCompetitionIdStateRequest$Outbound = {
  competitionId: string;
};

/** @internal */
export const GetApiUserVotesCompetitionIdStateRequest$outboundSchema: z.ZodType<
  GetApiUserVotesCompetitionIdStateRequest$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesCompetitionIdStateRequest
> = z.object({
  competitionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesCompetitionIdStateRequest$ {
  /** @deprecated use `GetApiUserVotesCompetitionIdStateRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserVotesCompetitionIdStateRequest$inboundSchema;
  /** @deprecated use `GetApiUserVotesCompetitionIdStateRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserVotesCompetitionIdStateRequest$outboundSchema;
  /** @deprecated use `GetApiUserVotesCompetitionIdStateRequest$Outbound` instead. */
  export type Outbound = GetApiUserVotesCompetitionIdStateRequest$Outbound;
}

export function getApiUserVotesCompetitionIdStateRequestToJSON(
  getApiUserVotesCompetitionIdStateRequest: GetApiUserVotesCompetitionIdStateRequest,
): string {
  return JSON.stringify(
    GetApiUserVotesCompetitionIdStateRequest$outboundSchema.parse(
      getApiUserVotesCompetitionIdStateRequest,
    ),
  );
}

export function getApiUserVotesCompetitionIdStateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiUserVotesCompetitionIdStateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserVotesCompetitionIdStateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiUserVotesCompetitionIdStateRequest' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotesCompetitionIdStateInfo$inboundSchema: z.ZodType<
  GetApiUserVotesCompetitionIdStateInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  hasVoted: z.boolean().optional(),
  agentId: z.nullable(z.string()).optional(),
  votedAt: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
});

/** @internal */
export type GetApiUserVotesCompetitionIdStateInfo$Outbound = {
  hasVoted?: boolean | undefined;
  agentId?: string | null | undefined;
  votedAt?: string | null | undefined;
};

/** @internal */
export const GetApiUserVotesCompetitionIdStateInfo$outboundSchema: z.ZodType<
  GetApiUserVotesCompetitionIdStateInfo$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesCompetitionIdStateInfo
> = z.object({
  hasVoted: z.boolean().optional(),
  agentId: z.nullable(z.string()).optional(),
  votedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesCompetitionIdStateInfo$ {
  /** @deprecated use `GetApiUserVotesCompetitionIdStateInfo$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserVotesCompetitionIdStateInfo$inboundSchema;
  /** @deprecated use `GetApiUserVotesCompetitionIdStateInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserVotesCompetitionIdStateInfo$outboundSchema;
  /** @deprecated use `GetApiUserVotesCompetitionIdStateInfo$Outbound` instead. */
  export type Outbound = GetApiUserVotesCompetitionIdStateInfo$Outbound;
}

export function getApiUserVotesCompetitionIdStateInfoToJSON(
  getApiUserVotesCompetitionIdStateInfo: GetApiUserVotesCompetitionIdStateInfo,
): string {
  return JSON.stringify(
    GetApiUserVotesCompetitionIdStateInfo$outboundSchema.parse(
      getApiUserVotesCompetitionIdStateInfo,
    ),
  );
}

export function getApiUserVotesCompetitionIdStateInfoFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUserVotesCompetitionIdStateInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserVotesCompetitionIdStateInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUserVotesCompetitionIdStateInfo' from JSON`,
  );
}

/** @internal */
export const VotingState$inboundSchema: z.ZodType<
  VotingState,
  z.ZodTypeDef,
  unknown
> = z.object({
  canVote: z.boolean().optional(),
  reason: z.nullable(z.string()).optional(),
  info: z
    .lazy(() => GetApiUserVotesCompetitionIdStateInfo$inboundSchema)
    .optional(),
});

/** @internal */
export type VotingState$Outbound = {
  canVote?: boolean | undefined;
  reason?: string | null | undefined;
  info?: GetApiUserVotesCompetitionIdStateInfo$Outbound | undefined;
};

/** @internal */
export const VotingState$outboundSchema: z.ZodType<
  VotingState$Outbound,
  z.ZodTypeDef,
  VotingState
> = z.object({
  canVote: z.boolean().optional(),
  reason: z.nullable(z.string()).optional(),
  info: z
    .lazy(() => GetApiUserVotesCompetitionIdStateInfo$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VotingState$ {
  /** @deprecated use `VotingState$inboundSchema` instead. */
  export const inboundSchema = VotingState$inboundSchema;
  /** @deprecated use `VotingState$outboundSchema` instead. */
  export const outboundSchema = VotingState$outboundSchema;
  /** @deprecated use `VotingState$Outbound` instead. */
  export type Outbound = VotingState$Outbound;
}

export function votingStateToJSON(votingState: VotingState): string {
  return JSON.stringify(VotingState$outboundSchema.parse(votingState));
}

export function votingStateFromJSON(
  jsonString: string,
): SafeParseResult<VotingState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VotingState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VotingState' from JSON`,
  );
}

/** @internal */
export const GetApiUserVotesCompetitionIdStateResponse$inboundSchema: z.ZodType<
  GetApiUserVotesCompetitionIdStateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  votingState: z.lazy(() => VotingState$inboundSchema).optional(),
});

/** @internal */
export type GetApiUserVotesCompetitionIdStateResponse$Outbound = {
  success?: boolean | undefined;
  votingState?: VotingState$Outbound | undefined;
};

/** @internal */
export const GetApiUserVotesCompetitionIdStateResponse$outboundSchema: z.ZodType<
  GetApiUserVotesCompetitionIdStateResponse$Outbound,
  z.ZodTypeDef,
  GetApiUserVotesCompetitionIdStateResponse
> = z.object({
  success: z.boolean().optional(),
  votingState: z.lazy(() => VotingState$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserVotesCompetitionIdStateResponse$ {
  /** @deprecated use `GetApiUserVotesCompetitionIdStateResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserVotesCompetitionIdStateResponse$inboundSchema;
  /** @deprecated use `GetApiUserVotesCompetitionIdStateResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserVotesCompetitionIdStateResponse$outboundSchema;
  /** @deprecated use `GetApiUserVotesCompetitionIdStateResponse$Outbound` instead. */
  export type Outbound = GetApiUserVotesCompetitionIdStateResponse$Outbound;
}

export function getApiUserVotesCompetitionIdStateResponseToJSON(
  getApiUserVotesCompetitionIdStateResponse: GetApiUserVotesCompetitionIdStateResponse,
): string {
  return JSON.stringify(
    GetApiUserVotesCompetitionIdStateResponse$outboundSchema.parse(
      getApiUserVotesCompetitionIdStateResponse,
    ),
  );
}

export function getApiUserVotesCompetitionIdStateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiUserVotesCompetitionIdStateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiUserVotesCompetitionIdStateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiUserVotesCompetitionIdStateResponse' from JSON`,
  );
}
