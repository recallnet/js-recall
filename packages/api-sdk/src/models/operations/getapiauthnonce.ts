/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A new nonce generated successfully
 */
export type GetApiAuthNonceResponse = {
  /**
   * The nonce to be used in the SIWE message
   */
  nonce: string;
};

/** @internal */
export const GetApiAuthNonceResponse$inboundSchema: z.ZodType<
  GetApiAuthNonceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.string(),
});

/** @internal */
export type GetApiAuthNonceResponse$Outbound = {
  nonce: string;
};

/** @internal */
export const GetApiAuthNonceResponse$outboundSchema: z.ZodType<
  GetApiAuthNonceResponse$Outbound,
  z.ZodTypeDef,
  GetApiAuthNonceResponse
> = z.object({
  nonce: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAuthNonceResponse$ {
  /** @deprecated use `GetApiAuthNonceResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAuthNonceResponse$inboundSchema;
  /** @deprecated use `GetApiAuthNonceResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAuthNonceResponse$outboundSchema;
  /** @deprecated use `GetApiAuthNonceResponse$Outbound` instead. */
  export type Outbound = GetApiAuthNonceResponse$Outbound;
}

export function getApiAuthNonceResponseToJSON(
  getApiAuthNonceResponse: GetApiAuthNonceResponse,
): string {
  return JSON.stringify(
    GetApiAuthNonceResponse$outboundSchema.parse(getApiAuthNonceResponse),
  );
}

export function getApiAuthNonceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAuthNonceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAuthNonceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAuthNonceResponse' from JSON`,
  );
}
