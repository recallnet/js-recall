/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Competition status
 */
export const GetApiCompetitionStatusStatus = {
  Pending: "PENDING",
  Active: "ACTIVE",
  Completed: "COMPLETED",
} as const;
/**
 * Competition status
 */
export type GetApiCompetitionStatusStatus = ClosedEnum<
  typeof GetApiCompetitionStatusStatus
>;

/**
 * The type of cross-chain trading allowed in this competition
 */
export const GetApiCompetitionStatusCrossChainTradingType = {
  DisallowAll: "disallowAll",
  DisallowXParent: "disallowXParent",
  Allow: "allow",
} as const;
/**
 * The type of cross-chain trading allowed in this competition
 */
export type GetApiCompetitionStatusCrossChainTradingType = ClosedEnum<
  typeof GetApiCompetitionStatusCrossChainTradingType
>;

export type GetApiCompetitionStatusCompetition = {
  /**
   * Competition ID
   */
  id?: string | undefined;
  /**
   * Competition name
   */
  name?: string | undefined;
  /**
   * Competition description
   */
  description?: string | null | undefined;
  /**
   * External URL for competition details
   */
  externalLink?: string | null | undefined;
  /**
   * URL to competition image
   */
  imageUrl?: string | null | undefined;
  /**
   * Competition start date
   */
  startDate?: Date | undefined;
  /**
   * Competition end date
   */
  endDate?: Date | null | undefined;
  /**
   * Competition status
   */
  status?: GetApiCompetitionStatusStatus | undefined;
  /**
   * The type of cross-chain trading allowed in this competition
   */
  crossChainTradingType?:
    | GetApiCompetitionStatusCrossChainTradingType
    | undefined;
  /**
   * When the competition was created
   */
  createdAt?: Date | undefined;
  /**
   * When the competition was last updated
   */
  updatedAt?: Date | undefined;
};

/**
 * Competition status
 */
export type GetApiCompetitionStatusResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  /**
   * Whether there is an active competition
   */
  active?: boolean | undefined;
  competition?: GetApiCompetitionStatusCompetition | null | undefined;
  /**
   * Additional information about the competition status
   */
  message?: string | null | undefined;
  /**
   * Whether the authenticated team is participating in the competition
   */
  participating?: boolean | null | undefined;
};

/** @internal */
export const GetApiCompetitionStatusStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionStatusStatus
> = z.nativeEnum(GetApiCompetitionStatusStatus);

/** @internal */
export const GetApiCompetitionStatusStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionStatusStatus
> = GetApiCompetitionStatusStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionStatusStatus$ {
  /** @deprecated use `GetApiCompetitionStatusStatus$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionStatusStatus$inboundSchema;
  /** @deprecated use `GetApiCompetitionStatusStatus$outboundSchema` instead. */
  export const outboundSchema = GetApiCompetitionStatusStatus$outboundSchema;
}

/** @internal */
export const GetApiCompetitionStatusCrossChainTradingType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionStatusCrossChainTradingType
> = z.nativeEnum(GetApiCompetitionStatusCrossChainTradingType);

/** @internal */
export const GetApiCompetitionStatusCrossChainTradingType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiCompetitionStatusCrossChainTradingType
> = GetApiCompetitionStatusCrossChainTradingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionStatusCrossChainTradingType$ {
  /** @deprecated use `GetApiCompetitionStatusCrossChainTradingType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiCompetitionStatusCrossChainTradingType$inboundSchema;
  /** @deprecated use `GetApiCompetitionStatusCrossChainTradingType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionStatusCrossChainTradingType$outboundSchema;
}

/** @internal */
export const GetApiCompetitionStatusCompetition$inboundSchema: z.ZodType<
  GetApiCompetitionStatusCompetition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  startDate: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  endDate: z
    .nullable(
      z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    )
    .optional(),
  status: GetApiCompetitionStatusStatus$inboundSchema.optional(),
  crossChainTradingType:
    GetApiCompetitionStatusCrossChainTradingType$inboundSchema.optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiCompetitionStatusCompetition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  externalLink?: string | null | undefined;
  imageUrl?: string | null | undefined;
  startDate?: string | undefined;
  endDate?: string | null | undefined;
  status?: string | undefined;
  crossChainTradingType?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiCompetitionStatusCompetition$outboundSchema: z.ZodType<
  GetApiCompetitionStatusCompetition$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionStatusCompetition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  externalLink: z.nullable(z.string()).optional(),
  imageUrl: z.nullable(z.string()).optional(),
  startDate: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  endDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
  status: GetApiCompetitionStatusStatus$outboundSchema.optional(),
  crossChainTradingType:
    GetApiCompetitionStatusCrossChainTradingType$outboundSchema.optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionStatusCompetition$ {
  /** @deprecated use `GetApiCompetitionStatusCompetition$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionStatusCompetition$inboundSchema;
  /** @deprecated use `GetApiCompetitionStatusCompetition$outboundSchema` instead. */
  export const outboundSchema =
    GetApiCompetitionStatusCompetition$outboundSchema;
  /** @deprecated use `GetApiCompetitionStatusCompetition$Outbound` instead. */
  export type Outbound = GetApiCompetitionStatusCompetition$Outbound;
}

export function getApiCompetitionStatusCompetitionToJSON(
  getApiCompetitionStatusCompetition: GetApiCompetitionStatusCompetition,
): string {
  return JSON.stringify(
    GetApiCompetitionStatusCompetition$outboundSchema.parse(
      getApiCompetitionStatusCompetition,
    ),
  );
}

export function getApiCompetitionStatusCompetitionFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionStatusCompetition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiCompetitionStatusCompetition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionStatusCompetition' from JSON`,
  );
}

/** @internal */
export const GetApiCompetitionStatusResponse$inboundSchema: z.ZodType<
  GetApiCompetitionStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  active: z.boolean().optional(),
  competition: z
    .nullable(z.lazy(() => GetApiCompetitionStatusCompetition$inboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  participating: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetApiCompetitionStatusResponse$Outbound = {
  success?: boolean | undefined;
  active?: boolean | undefined;
  competition?: GetApiCompetitionStatusCompetition$Outbound | null | undefined;
  message?: string | null | undefined;
  participating?: boolean | null | undefined;
};

/** @internal */
export const GetApiCompetitionStatusResponse$outboundSchema: z.ZodType<
  GetApiCompetitionStatusResponse$Outbound,
  z.ZodTypeDef,
  GetApiCompetitionStatusResponse
> = z.object({
  success: z.boolean().optional(),
  active: z.boolean().optional(),
  competition: z
    .nullable(z.lazy(() => GetApiCompetitionStatusCompetition$outboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  participating: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiCompetitionStatusResponse$ {
  /** @deprecated use `GetApiCompetitionStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiCompetitionStatusResponse$inboundSchema;
  /** @deprecated use `GetApiCompetitionStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiCompetitionStatusResponse$outboundSchema;
  /** @deprecated use `GetApiCompetitionStatusResponse$Outbound` instead. */
  export type Outbound = GetApiCompetitionStatusResponse$Outbound;
}

export function getApiCompetitionStatusResponseToJSON(
  getApiCompetitionStatusResponse: GetApiCompetitionStatusResponse,
): string {
  return JSON.stringify(
    GetApiCompetitionStatusResponse$outboundSchema.parse(
      getApiCompetitionStatusResponse,
    ),
  );
}

export function getApiCompetitionStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiCompetitionStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiCompetitionStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiCompetitionStatusResponse' from JSON`,
  );
}
