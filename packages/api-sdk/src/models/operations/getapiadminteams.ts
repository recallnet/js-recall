/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAdminTeamsTeam = {
  /**
   * Team ID
   */
  id?: string | undefined;
  /**
   * Team name
   */
  name?: string | undefined;
  /**
   * Team email
   */
  email?: string | undefined;
  /**
   * Contact person name
   */
  contactPerson?: string | undefined;
  /**
   * Account creation timestamp
   */
  createdAt?: Date | undefined;
  /**
   * Account update timestamp
   */
  updatedAt?: Date | undefined;
  /**
   * URL to the team's image
   */
  imageUrl?: string | null | undefined;
};

/**
 * List of teams
 */
export type GetApiAdminTeamsResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  teams?: Array<GetApiAdminTeamsTeam> | undefined;
};

/** @internal */
export const GetApiAdminTeamsTeam$inboundSchema: z.ZodType<
  GetApiAdminTeamsTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  createdAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  updatedAt: z
    .string()
    .datetime({ offset: true })
    .transform((v) => new Date(v))
    .optional(),
  imageUrl: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetApiAdminTeamsTeam$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  contactPerson?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  imageUrl?: string | null | undefined;
};

/** @internal */
export const GetApiAdminTeamsTeam$outboundSchema: z.ZodType<
  GetApiAdminTeamsTeam$Outbound,
  z.ZodTypeDef,
  GetApiAdminTeamsTeam
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  contactPerson: z.string().optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  updatedAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
  imageUrl: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminTeamsTeam$ {
  /** @deprecated use `GetApiAdminTeamsTeam$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminTeamsTeam$inboundSchema;
  /** @deprecated use `GetApiAdminTeamsTeam$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminTeamsTeam$outboundSchema;
  /** @deprecated use `GetApiAdminTeamsTeam$Outbound` instead. */
  export type Outbound = GetApiAdminTeamsTeam$Outbound;
}

export function getApiAdminTeamsTeamToJSON(
  getApiAdminTeamsTeam: GetApiAdminTeamsTeam,
): string {
  return JSON.stringify(
    GetApiAdminTeamsTeam$outboundSchema.parse(getApiAdminTeamsTeam),
  );
}

export function getApiAdminTeamsTeamFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminTeamsTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminTeamsTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminTeamsTeam' from JSON`,
  );
}

/** @internal */
export const GetApiAdminTeamsResponse$inboundSchema: z.ZodType<
  GetApiAdminTeamsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  teams: z.array(z.lazy(() => GetApiAdminTeamsTeam$inboundSchema)).optional(),
});

/** @internal */
export type GetApiAdminTeamsResponse$Outbound = {
  success?: boolean | undefined;
  teams?: Array<GetApiAdminTeamsTeam$Outbound> | undefined;
};

/** @internal */
export const GetApiAdminTeamsResponse$outboundSchema: z.ZodType<
  GetApiAdminTeamsResponse$Outbound,
  z.ZodTypeDef,
  GetApiAdminTeamsResponse
> = z.object({
  success: z.boolean().optional(),
  teams: z.array(z.lazy(() => GetApiAdminTeamsTeam$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAdminTeamsResponse$ {
  /** @deprecated use `GetApiAdminTeamsResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAdminTeamsResponse$inboundSchema;
  /** @deprecated use `GetApiAdminTeamsResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAdminTeamsResponse$outboundSchema;
  /** @deprecated use `GetApiAdminTeamsResponse$Outbound` instead. */
  export type Outbound = GetApiAdminTeamsResponse$Outbound;
}

export function getApiAdminTeamsResponseToJSON(
  getApiAdminTeamsResponse: GetApiAdminTeamsResponse,
): string {
  return JSON.stringify(
    GetApiAdminTeamsResponse$outboundSchema.parse(getApiAdminTeamsResponse),
  );
}

export function getApiAdminTeamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAdminTeamsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAdminTeamsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAdminTeamsResponse' from JSON`,
  );
}
