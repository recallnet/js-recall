/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiTradeQuoteRequest = {
  /**
   * Token address to sell
   */
  fromToken: string;
  /**
   * Token address to buy
   */
  toToken: string;
  /**
   * Amount of fromToken to get quote for
   */
  amount: string;
  /**
   * Optional blockchain type for fromToken
   */
  fromChain?: string | undefined;
  /**
   * Optional specific chain for fromToken
   */
  fromSpecificChain?: string | undefined;
  /**
   * Optional blockchain type for toToken
   */
  toChain?: string | undefined;
  /**
   * Optional specific chain for toToken
   */
  toSpecificChain?: string | undefined;
};

export type Prices = {
  /**
   * Price of the source token in USD
   */
  fromToken?: number | undefined;
  /**
   * Price of the destination token in USD
   */
  toToken?: number | undefined;
};

export type Chains = {
  /**
   * Blockchain type of the source token
   */
  fromChain?: string | undefined;
  /**
   * Blockchain type of the destination token
   */
  toChain?: string | undefined;
};

/**
 * Quote generated successfully
 */
export type GetApiTradeQuoteResponse = {
  /**
   * Token address being sold
   */
  fromToken?: string | undefined;
  /**
   * Token address being bought
   */
  toToken?: string | undefined;
  /**
   * Amount of fromToken to be sold
   */
  fromAmount?: number | undefined;
  /**
   * Estimated amount of toToken to be received
   */
  toAmount?: number | undefined;
  /**
   * Exchange rate between the tokens (toAmount / fromAmount)
   */
  exchangeRate?: number | undefined;
  /**
   * Applied slippage percentage for this trade size
   */
  slippage?: number | undefined;
  /**
   * Estimated USD value of the trade
   */
  tradeAmountUsd?: number | undefined;
  prices?: Prices | undefined;
  chains?: Chains | undefined;
};

/** @internal */
export const GetApiTradeQuoteRequest$inboundSchema: z.ZodType<
  GetApiTradeQuoteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromToken: z.string(),
  toToken: z.string(),
  amount: z.string(),
  fromChain: z.string().optional(),
  fromSpecificChain: z.string().optional(),
  toChain: z.string().optional(),
  toSpecificChain: z.string().optional(),
});

/** @internal */
export type GetApiTradeQuoteRequest$Outbound = {
  fromToken: string;
  toToken: string;
  amount: string;
  fromChain?: string | undefined;
  fromSpecificChain?: string | undefined;
  toChain?: string | undefined;
  toSpecificChain?: string | undefined;
};

/** @internal */
export const GetApiTradeQuoteRequest$outboundSchema: z.ZodType<
  GetApiTradeQuoteRequest$Outbound,
  z.ZodTypeDef,
  GetApiTradeQuoteRequest
> = z.object({
  fromToken: z.string(),
  toToken: z.string(),
  amount: z.string(),
  fromChain: z.string().optional(),
  fromSpecificChain: z.string().optional(),
  toChain: z.string().optional(),
  toSpecificChain: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiTradeQuoteRequest$ {
  /** @deprecated use `GetApiTradeQuoteRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiTradeQuoteRequest$inboundSchema;
  /** @deprecated use `GetApiTradeQuoteRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiTradeQuoteRequest$outboundSchema;
  /** @deprecated use `GetApiTradeQuoteRequest$Outbound` instead. */
  export type Outbound = GetApiTradeQuoteRequest$Outbound;
}

export function getApiTradeQuoteRequestToJSON(
  getApiTradeQuoteRequest: GetApiTradeQuoteRequest,
): string {
  return JSON.stringify(
    GetApiTradeQuoteRequest$outboundSchema.parse(getApiTradeQuoteRequest),
  );
}

export function getApiTradeQuoteRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiTradeQuoteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiTradeQuoteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiTradeQuoteRequest' from JSON`,
  );
}

/** @internal */
export const Prices$inboundSchema: z.ZodType<Prices, z.ZodTypeDef, unknown> =
  z.object({
    fromToken: z.number().optional(),
    toToken: z.number().optional(),
  });

/** @internal */
export type Prices$Outbound = {
  fromToken?: number | undefined;
  toToken?: number | undefined;
};

/** @internal */
export const Prices$outboundSchema: z.ZodType<
  Prices$Outbound,
  z.ZodTypeDef,
  Prices
> = z.object({
  fromToken: z.number().optional(),
  toToken: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Prices$ {
  /** @deprecated use `Prices$inboundSchema` instead. */
  export const inboundSchema = Prices$inboundSchema;
  /** @deprecated use `Prices$outboundSchema` instead. */
  export const outboundSchema = Prices$outboundSchema;
  /** @deprecated use `Prices$Outbound` instead. */
  export type Outbound = Prices$Outbound;
}

export function pricesToJSON(prices: Prices): string {
  return JSON.stringify(Prices$outboundSchema.parse(prices));
}

export function pricesFromJSON(
  jsonString: string,
): SafeParseResult<Prices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Prices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Prices' from JSON`,
  );
}

/** @internal */
export const Chains$inboundSchema: z.ZodType<Chains, z.ZodTypeDef, unknown> =
  z.object({
    fromChain: z.string().optional(),
    toChain: z.string().optional(),
  });

/** @internal */
export type Chains$Outbound = {
  fromChain?: string | undefined;
  toChain?: string | undefined;
};

/** @internal */
export const Chains$outboundSchema: z.ZodType<
  Chains$Outbound,
  z.ZodTypeDef,
  Chains
> = z.object({
  fromChain: z.string().optional(),
  toChain: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Chains$ {
  /** @deprecated use `Chains$inboundSchema` instead. */
  export const inboundSchema = Chains$inboundSchema;
  /** @deprecated use `Chains$outboundSchema` instead. */
  export const outboundSchema = Chains$outboundSchema;
  /** @deprecated use `Chains$Outbound` instead. */
  export type Outbound = Chains$Outbound;
}

export function chainsToJSON(chains: Chains): string {
  return JSON.stringify(Chains$outboundSchema.parse(chains));
}

export function chainsFromJSON(
  jsonString: string,
): SafeParseResult<Chains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Chains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Chains' from JSON`,
  );
}

/** @internal */
export const GetApiTradeQuoteResponse$inboundSchema: z.ZodType<
  GetApiTradeQuoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromToken: z.string().optional(),
  toToken: z.string().optional(),
  fromAmount: z.number().optional(),
  toAmount: z.number().optional(),
  exchangeRate: z.number().optional(),
  slippage: z.number().optional(),
  tradeAmountUsd: z.number().optional(),
  prices: z.lazy(() => Prices$inboundSchema).optional(),
  chains: z.lazy(() => Chains$inboundSchema).optional(),
});

/** @internal */
export type GetApiTradeQuoteResponse$Outbound = {
  fromToken?: string | undefined;
  toToken?: string | undefined;
  fromAmount?: number | undefined;
  toAmount?: number | undefined;
  exchangeRate?: number | undefined;
  slippage?: number | undefined;
  tradeAmountUsd?: number | undefined;
  prices?: Prices$Outbound | undefined;
  chains?: Chains$Outbound | undefined;
};

/** @internal */
export const GetApiTradeQuoteResponse$outboundSchema: z.ZodType<
  GetApiTradeQuoteResponse$Outbound,
  z.ZodTypeDef,
  GetApiTradeQuoteResponse
> = z.object({
  fromToken: z.string().optional(),
  toToken: z.string().optional(),
  fromAmount: z.number().optional(),
  toAmount: z.number().optional(),
  exchangeRate: z.number().optional(),
  slippage: z.number().optional(),
  tradeAmountUsd: z.number().optional(),
  prices: z.lazy(() => Prices$outboundSchema).optional(),
  chains: z.lazy(() => Chains$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiTradeQuoteResponse$ {
  /** @deprecated use `GetApiTradeQuoteResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiTradeQuoteResponse$inboundSchema;
  /** @deprecated use `GetApiTradeQuoteResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiTradeQuoteResponse$outboundSchema;
  /** @deprecated use `GetApiTradeQuoteResponse$Outbound` instead. */
  export type Outbound = GetApiTradeQuoteResponse$Outbound;
}

export function getApiTradeQuoteResponseToJSON(
  getApiTradeQuoteResponse: GetApiTradeQuoteResponse,
): string {
  return JSON.stringify(
    GetApiTradeQuoteResponse$outboundSchema.parse(getApiTradeQuoteResponse),
  );
}

export function getApiTradeQuoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiTradeQuoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiTradeQuoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiTradeQuoteResponse' from JSON`,
  );
}
