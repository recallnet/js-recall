/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAuthAgentNonceSecurity = {
  agentApiKey: string;
};

/**
 * Agent nonce generated successfully
 */
export type GetApiAuthAgentNonceResponse = {
  /**
   * The nonce to be used in agent wallet verification
   */
  nonce: string;
};

/** @internal */
export const GetApiAuthAgentNonceSecurity$inboundSchema: z.ZodType<
  GetApiAuthAgentNonceSecurity,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    AgentApiKey: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      AgentApiKey: "agentApiKey",
    });
  });

/** @internal */
export type GetApiAuthAgentNonceSecurity$Outbound = {
  AgentApiKey: string;
};

/** @internal */
export const GetApiAuthAgentNonceSecurity$outboundSchema: z.ZodType<
  GetApiAuthAgentNonceSecurity$Outbound,
  z.ZodTypeDef,
  GetApiAuthAgentNonceSecurity
> = z
  .object({
    agentApiKey: z.string(),
  })
  .transform((v) => {
    return remap$(v, {
      agentApiKey: "AgentApiKey",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAuthAgentNonceSecurity$ {
  /** @deprecated use `GetApiAuthAgentNonceSecurity$inboundSchema` instead. */
  export const inboundSchema = GetApiAuthAgentNonceSecurity$inboundSchema;
  /** @deprecated use `GetApiAuthAgentNonceSecurity$outboundSchema` instead. */
  export const outboundSchema = GetApiAuthAgentNonceSecurity$outboundSchema;
  /** @deprecated use `GetApiAuthAgentNonceSecurity$Outbound` instead. */
  export type Outbound = GetApiAuthAgentNonceSecurity$Outbound;
}

export function getApiAuthAgentNonceSecurityToJSON(
  getApiAuthAgentNonceSecurity: GetApiAuthAgentNonceSecurity,
): string {
  return JSON.stringify(
    GetApiAuthAgentNonceSecurity$outboundSchema.parse(
      getApiAuthAgentNonceSecurity,
    ),
  );
}

export function getApiAuthAgentNonceSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAuthAgentNonceSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAuthAgentNonceSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAuthAgentNonceSecurity' from JSON`,
  );
}

/** @internal */
export const GetApiAuthAgentNonceResponse$inboundSchema: z.ZodType<
  GetApiAuthAgentNonceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.string(),
});

/** @internal */
export type GetApiAuthAgentNonceResponse$Outbound = {
  nonce: string;
};

/** @internal */
export const GetApiAuthAgentNonceResponse$outboundSchema: z.ZodType<
  GetApiAuthAgentNonceResponse$Outbound,
  z.ZodTypeDef,
  GetApiAuthAgentNonceResponse
> = z.object({
  nonce: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAuthAgentNonceResponse$ {
  /** @deprecated use `GetApiAuthAgentNonceResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiAuthAgentNonceResponse$inboundSchema;
  /** @deprecated use `GetApiAuthAgentNonceResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiAuthAgentNonceResponse$outboundSchema;
  /** @deprecated use `GetApiAuthAgentNonceResponse$Outbound` instead. */
  export type Outbound = GetApiAuthAgentNonceResponse$Outbound;
}

export function getApiAuthAgentNonceResponseToJSON(
  getApiAuthAgentNonceResponse: GetApiAuthAgentNonceResponse,
): string {
  return JSON.stringify(
    GetApiAuthAgentNonceResponse$outboundSchema.parse(
      getApiAuthAgentNonceResponse,
    ),
  );
}

export function getApiAuthAgentNonceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAuthAgentNonceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAuthAgentNonceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAuthAgentNonceResponse' from JSON`,
  );
}
