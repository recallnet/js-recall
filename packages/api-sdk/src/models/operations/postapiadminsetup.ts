/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostApiAdminSetupRequest = {
  /**
   * Admin username
   */
  username: string;
  /**
   * Admin password (minimum 8 characters)
   */
  password: string;
  /**
   * Admin email address
   */
  email: string;
};

export type Admin = {
  /**
   * Admin ID
   */
  id?: string | undefined;
  /**
   * Admin username
   */
  username?: string | undefined;
  /**
   * Admin email
   */
  email?: string | undefined;
  /**
   * Account creation timestamp
   */
  createdAt?: Date | undefined;
};

/**
 * Admin account created successfully
 */
export type PostApiAdminSetupResponse = {
  /**
   * Operation success status
   */
  success?: boolean | undefined;
  /**
   * Success message
   */
  message?: string | undefined;
  admin?: Admin | undefined;
};

/** @internal */
export const PostApiAdminSetupRequest$inboundSchema: z.ZodType<
  PostApiAdminSetupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  password: z.string(),
  email: z.string(),
});

/** @internal */
export type PostApiAdminSetupRequest$Outbound = {
  username: string;
  password: string;
  email: string;
};

/** @internal */
export const PostApiAdminSetupRequest$outboundSchema: z.ZodType<
  PostApiAdminSetupRequest$Outbound,
  z.ZodTypeDef,
  PostApiAdminSetupRequest
> = z.object({
  username: z.string(),
  password: z.string(),
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminSetupRequest$ {
  /** @deprecated use `PostApiAdminSetupRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminSetupRequest$inboundSchema;
  /** @deprecated use `PostApiAdminSetupRequest$outboundSchema` instead. */
  export const outboundSchema = PostApiAdminSetupRequest$outboundSchema;
  /** @deprecated use `PostApiAdminSetupRequest$Outbound` instead. */
  export type Outbound = PostApiAdminSetupRequest$Outbound;
}

export function postApiAdminSetupRequestToJSON(
  postApiAdminSetupRequest: PostApiAdminSetupRequest,
): string {
  return JSON.stringify(
    PostApiAdminSetupRequest$outboundSchema.parse(postApiAdminSetupRequest),
  );
}

export function postApiAdminSetupRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminSetupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAdminSetupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminSetupRequest' from JSON`,
  );
}

/** @internal */
export const Admin$inboundSchema: z.ZodType<Admin, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    username: z.string().optional(),
    email: z.string().optional(),
    createdAt: z
      .string()
      .datetime({ offset: true })
      .transform((v) => new Date(v))
      .optional(),
  });

/** @internal */
export type Admin$Outbound = {
  id?: string | undefined;
  username?: string | undefined;
  email?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const Admin$outboundSchema: z.ZodType<
  Admin$Outbound,
  z.ZodTypeDef,
  Admin
> = z.object({
  id: z.string().optional(),
  username: z.string().optional(),
  email: z.string().optional(),
  createdAt: z
    .date()
    .transform((v) => v.toISOString())
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Admin$ {
  /** @deprecated use `Admin$inboundSchema` instead. */
  export const inboundSchema = Admin$inboundSchema;
  /** @deprecated use `Admin$outboundSchema` instead. */
  export const outboundSchema = Admin$outboundSchema;
  /** @deprecated use `Admin$Outbound` instead. */
  export type Outbound = Admin$Outbound;
}

export function adminToJSON(admin: Admin): string {
  return JSON.stringify(Admin$outboundSchema.parse(admin));
}

export function adminFromJSON(
  jsonString: string,
): SafeParseResult<Admin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Admin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Admin' from JSON`,
  );
}

/** @internal */
export const PostApiAdminSetupResponse$inboundSchema: z.ZodType<
  PostApiAdminSetupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
  admin: z.lazy(() => Admin$inboundSchema).optional(),
});

/** @internal */
export type PostApiAdminSetupResponse$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
  admin?: Admin$Outbound | undefined;
};

/** @internal */
export const PostApiAdminSetupResponse$outboundSchema: z.ZodType<
  PostApiAdminSetupResponse$Outbound,
  z.ZodTypeDef,
  PostApiAdminSetupResponse
> = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
  admin: z.lazy(() => Admin$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAdminSetupResponse$ {
  /** @deprecated use `PostApiAdminSetupResponse$inboundSchema` instead. */
  export const inboundSchema = PostApiAdminSetupResponse$inboundSchema;
  /** @deprecated use `PostApiAdminSetupResponse$outboundSchema` instead. */
  export const outboundSchema = PostApiAdminSetupResponse$outboundSchema;
  /** @deprecated use `PostApiAdminSetupResponse$Outbound` instead. */
  export type Outbound = PostApiAdminSetupResponse$Outbound;
}

export function postApiAdminSetupResponseToJSON(
  postApiAdminSetupResponse: PostApiAdminSetupResponse,
): string {
  return JSON.stringify(
    PostApiAdminSetupResponse$outboundSchema.parse(postApiAdminSetupResponse),
  );
}

export function postApiAdminSetupResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAdminSetupResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAdminSetupResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAdminSetupResponse' from JSON`,
  );
}
