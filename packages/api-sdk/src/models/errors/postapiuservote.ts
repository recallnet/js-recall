/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

/**
 * User has already voted in this competition
 */
export type ConflictErrorData = {
  success?: boolean | undefined;
  error?: string | undefined;
};

/**
 * User has already voted in this competition
 */
export class ConflictError extends Error {
  success?: boolean | undefined;
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ConflictErrorData;

  constructor(err: ConflictErrorData) {
    const message =
      "message" in err && typeof err.message === "string"
        ? err.message
        : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.success != null) this.success = err.success;
    if (err.error != null) this.error = err.error;

    this.name = "ConflictError";
  }
}

/**
 * Invalid request or voting not allowed
 */
export type BadRequestErrorData = {
  success?: boolean | undefined;
  error?: string | undefined;
};

/**
 * Invalid request or voting not allowed
 */
export class BadRequestError extends Error {
  success?: boolean | undefined;
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BadRequestErrorData;

  constructor(err: BadRequestErrorData) {
    const message =
      "message" in err && typeof err.message === "string"
        ? err.message
        : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.success != null) this.success = err.success;
    if (err.error != null) this.error = err.error;

    this.name = "BadRequestError";
  }
}

/** @internal */
export const ConflictError$inboundSchema: z.ZodType<
  ConflictError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    success: z.boolean().optional(),
    error: z.string().optional(),
  })
  .transform((v) => {
    return new ConflictError(v);
  });

/** @internal */
export type ConflictError$Outbound = {
  success?: boolean | undefined;
  error?: string | undefined;
};

/** @internal */
export const ConflictError$outboundSchema: z.ZodType<
  ConflictError$Outbound,
  z.ZodTypeDef,
  ConflictError
> = z
  .instanceof(ConflictError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      success: z.boolean().optional(),
      error: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictError$ {
  /** @deprecated use `ConflictError$inboundSchema` instead. */
  export const inboundSchema = ConflictError$inboundSchema;
  /** @deprecated use `ConflictError$outboundSchema` instead. */
  export const outboundSchema = ConflictError$outboundSchema;
  /** @deprecated use `ConflictError$Outbound` instead. */
  export type Outbound = ConflictError$Outbound;
}

/** @internal */
export const BadRequestError$inboundSchema: z.ZodType<
  BadRequestError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    success: z.boolean().optional(),
    error: z.string().optional(),
  })
  .transform((v) => {
    return new BadRequestError(v);
  });

/** @internal */
export type BadRequestError$Outbound = {
  success?: boolean | undefined;
  error?: string | undefined;
};

/** @internal */
export const BadRequestError$outboundSchema: z.ZodType<
  BadRequestError$Outbound,
  z.ZodTypeDef,
  BadRequestError
> = z
  .instanceof(BadRequestError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      success: z.boolean().optional(),
      error: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestError$ {
  /** @deprecated use `BadRequestError$inboundSchema` instead. */
  export const inboundSchema = BadRequestError$inboundSchema;
  /** @deprecated use `BadRequestError$outboundSchema` instead. */
  export const outboundSchema = BadRequestError$outboundSchema;
  /** @deprecated use `BadRequestError$Outbound` instead. */
  export type Outbound = BadRequestError$Outbound;
}
