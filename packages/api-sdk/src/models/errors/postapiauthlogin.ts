/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { APISDKError } from "./apisdkerror.js";

/**
 * Internal server error
 */
export type PostApiAuthLoginInternalServerErrorData = {
  error?: string | undefined;
};

/**
 * Internal server error
 */
export class PostApiAuthLoginInternalServerError extends APISDKError {
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostApiAuthLoginInternalServerErrorData;

  constructor(
    err: PostApiAuthLoginInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message =
      "message" in err && typeof err.message === "string"
        ? err.message
        : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;

    this.name = "PostApiAuthLoginInternalServerError";
  }
}

/**
 * Authentication failed
 */
export type PostApiAuthLoginUnauthorizedErrorData = {
  error: string;
};

/**
 * Authentication failed
 */
export class PostApiAuthLoginUnauthorizedError extends APISDKError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: PostApiAuthLoginUnauthorizedErrorData;

  constructor(
    err: PostApiAuthLoginUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message =
      "message" in err && typeof err.message === "string"
        ? err.message
        : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "PostApiAuthLoginUnauthorizedError";
  }
}

/** @internal */
export const PostApiAuthLoginInternalServerError$inboundSchema: z.ZodType<
  PostApiAuthLoginInternalServerError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    error: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    return new PostApiAuthLoginInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostApiAuthLoginInternalServerError$Outbound = {
  error?: string | undefined;
};

/** @internal */
export const PostApiAuthLoginInternalServerError$outboundSchema: z.ZodType<
  PostApiAuthLoginInternalServerError$Outbound,
  z.ZodTypeDef,
  PostApiAuthLoginInternalServerError
> = z
  .instanceof(PostApiAuthLoginInternalServerError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      error: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAuthLoginInternalServerError$ {
  /** @deprecated use `PostApiAuthLoginInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAuthLoginInternalServerError$inboundSchema;
  /** @deprecated use `PostApiAuthLoginInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAuthLoginInternalServerError$outboundSchema;
  /** @deprecated use `PostApiAuthLoginInternalServerError$Outbound` instead. */
  export type Outbound = PostApiAuthLoginInternalServerError$Outbound;
}

/** @internal */
export const PostApiAuthLoginUnauthorizedError$inboundSchema: z.ZodType<
  PostApiAuthLoginUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    error: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    return new PostApiAuthLoginUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostApiAuthLoginUnauthorizedError$Outbound = {
  error: string;
};

/** @internal */
export const PostApiAuthLoginUnauthorizedError$outboundSchema: z.ZodType<
  PostApiAuthLoginUnauthorizedError$Outbound,
  z.ZodTypeDef,
  PostApiAuthLoginUnauthorizedError
> = z
  .instanceof(PostApiAuthLoginUnauthorizedError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      error: z.string(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAuthLoginUnauthorizedError$ {
  /** @deprecated use `PostApiAuthLoginUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = PostApiAuthLoginUnauthorizedError$inboundSchema;
  /** @deprecated use `PostApiAuthLoginUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAuthLoginUnauthorizedError$outboundSchema;
  /** @deprecated use `PostApiAuthLoginUnauthorizedError$Outbound` instead. */
  export type Outbound = PostApiAuthLoginUnauthorizedError$Outbound;
}
