/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { APISDKError } from "./apisdkerror.js";

/**
 * Internal server error (e.g., decryption failure)
 */
export type GetApiUserAgentsAgentIdApiKeyInternalServerErrorData = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/**
 * Internal server error (e.g., decryption failure)
 */
export class GetApiUserAgentsAgentIdApiKeyInternalServerError extends APISDKError {
  success?: boolean | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetApiUserAgentsAgentIdApiKeyInternalServerErrorData;

  constructor(
    err: GetApiUserAgentsAgentIdApiKeyInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.success != null) this.success = err.success;

    this.name = "GetApiUserAgentsAgentIdApiKeyInternalServerError";
  }
}

/**
 * Agent not found
 */
export type NotFoundErrorData = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/**
 * Agent not found
 */
export class NotFoundError extends APISDKError {
  success?: boolean | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotFoundErrorData;

  constructor(
    err: NotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.success != null) this.success = err.success;

    this.name = "NotFoundError";
  }
}

/**
 * Access denied (user doesn't own this agent or email verification required)
 */
export type ForbiddenErrorData = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/**
 * Access denied (user doesn't own this agent or email verification required)
 */
export class ForbiddenError extends APISDKError {
  success?: boolean | undefined;

  /** The original data that was passed to this error instance. */
  data$: ForbiddenErrorData;

  constructor(
    err: ForbiddenErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.success != null) this.success = err.success;

    this.name = "ForbiddenError";
  }
}

/**
 * User not authenticated
 */
export type GetApiUserAgentsAgentIdApiKeyUnauthorizedErrorData = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/**
 * User not authenticated
 */
export class GetApiUserAgentsAgentIdApiKeyUnauthorizedError extends APISDKError {
  success?: boolean | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetApiUserAgentsAgentIdApiKeyUnauthorizedErrorData;

  constructor(
    err: GetApiUserAgentsAgentIdApiKeyUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.success != null) this.success = err.success;

    this.name = "GetApiUserAgentsAgentIdApiKeyUnauthorizedError";
  }
}

/**
 * Invalid agent ID format
 */
export type GetApiUserAgentsAgentIdApiKeyBadRequestErrorData = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/**
 * Invalid agent ID format
 */
export class GetApiUserAgentsAgentIdApiKeyBadRequestError extends APISDKError {
  success?: boolean | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetApiUserAgentsAgentIdApiKeyBadRequestErrorData;

  constructor(
    err: GetApiUserAgentsAgentIdApiKeyBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.success != null) this.success = err.success;

    this.name = "GetApiUserAgentsAgentIdApiKeyBadRequestError";
  }
}

/** @internal */
export const GetApiUserAgentsAgentIdApiKeyInternalServerError$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdApiKeyInternalServerError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    return new GetApiUserAgentsAgentIdApiKeyInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetApiUserAgentsAgentIdApiKeyInternalServerError$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdApiKeyInternalServerError$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdApiKeyInternalServerError$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdApiKeyInternalServerError
> = z
  .instanceof(GetApiUserAgentsAgentIdApiKeyInternalServerError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      success: z.boolean().optional(),
      message: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdApiKeyInternalServerError$ {
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserAgentsAgentIdApiKeyInternalServerError$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserAgentsAgentIdApiKeyInternalServerError$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyInternalServerError$Outbound` instead. */
  export type Outbound =
    GetApiUserAgentsAgentIdApiKeyInternalServerError$Outbound;
}

/** @internal */
export const NotFoundError$inboundSchema: z.ZodType<
  NotFoundError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    return new NotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type NotFoundError$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const NotFoundError$outboundSchema: z.ZodType<
  NotFoundError$Outbound,
  z.ZodTypeDef,
  NotFoundError
> = z
  .instanceof(NotFoundError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      success: z.boolean().optional(),
      message: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundError$ {
  /** @deprecated use `NotFoundError$inboundSchema` instead. */
  export const inboundSchema = NotFoundError$inboundSchema;
  /** @deprecated use `NotFoundError$outboundSchema` instead. */
  export const outboundSchema = NotFoundError$outboundSchema;
  /** @deprecated use `NotFoundError$Outbound` instead. */
  export type Outbound = NotFoundError$Outbound;
}

/** @internal */
export const ForbiddenError$inboundSchema: z.ZodType<
  ForbiddenError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    return new ForbiddenError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ForbiddenError$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const ForbiddenError$outboundSchema: z.ZodType<
  ForbiddenError$Outbound,
  z.ZodTypeDef,
  ForbiddenError
> = z
  .instanceof(ForbiddenError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      success: z.boolean().optional(),
      message: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForbiddenError$ {
  /** @deprecated use `ForbiddenError$inboundSchema` instead. */
  export const inboundSchema = ForbiddenError$inboundSchema;
  /** @deprecated use `ForbiddenError$outboundSchema` instead. */
  export const outboundSchema = ForbiddenError$outboundSchema;
  /** @deprecated use `ForbiddenError$Outbound` instead. */
  export type Outbound = ForbiddenError$Outbound;
}

/** @internal */
export const GetApiUserAgentsAgentIdApiKeyUnauthorizedError$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdApiKeyUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    return new GetApiUserAgentsAgentIdApiKeyUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetApiUserAgentsAgentIdApiKeyUnauthorizedError$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdApiKeyUnauthorizedError$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdApiKeyUnauthorizedError$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdApiKeyUnauthorizedError
> = z
  .instanceof(GetApiUserAgentsAgentIdApiKeyUnauthorizedError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      success: z.boolean().optional(),
      message: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdApiKeyUnauthorizedError$ {
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserAgentsAgentIdApiKeyUnauthorizedError$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserAgentsAgentIdApiKeyUnauthorizedError$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyUnauthorizedError$Outbound` instead. */
  export type Outbound =
    GetApiUserAgentsAgentIdApiKeyUnauthorizedError$Outbound;
}

/** @internal */
export const GetApiUserAgentsAgentIdApiKeyBadRequestError$inboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdApiKeyBadRequestError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    return new GetApiUserAgentsAgentIdApiKeyBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetApiUserAgentsAgentIdApiKeyBadRequestError$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const GetApiUserAgentsAgentIdApiKeyBadRequestError$outboundSchema: z.ZodType<
  GetApiUserAgentsAgentIdApiKeyBadRequestError$Outbound,
  z.ZodTypeDef,
  GetApiUserAgentsAgentIdApiKeyBadRequestError
> = z
  .instanceof(GetApiUserAgentsAgentIdApiKeyBadRequestError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      success: z.boolean().optional(),
      message: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUserAgentsAgentIdApiKeyBadRequestError$ {
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    GetApiUserAgentsAgentIdApiKeyBadRequestError$inboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    GetApiUserAgentsAgentIdApiKeyBadRequestError$outboundSchema;
  /** @deprecated use `GetApiUserAgentsAgentIdApiKeyBadRequestError$Outbound` instead. */
  export type Outbound = GetApiUserAgentsAgentIdApiKeyBadRequestError$Outbound;
}
