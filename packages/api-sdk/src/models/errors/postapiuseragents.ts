/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";

import { APISDKError } from "./apisdkerror.js";

/**
 * Agent with this name already exists for this user
 */
export type PostApiUserAgentsConflictErrorData = {
  success?: boolean | undefined;
  error?: string | undefined;
};

/**
 * Agent with this name already exists for this user
 */
export class PostApiUserAgentsConflictError extends APISDKError {
  success?: boolean | undefined;
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostApiUserAgentsConflictErrorData;

  constructor(
    err: PostApiUserAgentsConflictErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message =
      "message" in err && typeof err.message === "string"
        ? err.message
        : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.success != null) this.success = err.success;
    if (err.error != null) this.error = err.error;

    this.name = "PostApiUserAgentsConflictError";
  }
}

/** @internal */
export const PostApiUserAgentsConflictError$inboundSchema: z.ZodType<
  PostApiUserAgentsConflictError,
  z.ZodTypeDef,
  unknown
> = z
  .object({
    success: z.boolean().optional(),
    error: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    return new PostApiUserAgentsConflictError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostApiUserAgentsConflictError$Outbound = {
  success?: boolean | undefined;
  error?: string | undefined;
};

/** @internal */
export const PostApiUserAgentsConflictError$outboundSchema: z.ZodType<
  PostApiUserAgentsConflictError$Outbound,
  z.ZodTypeDef,
  PostApiUserAgentsConflictError
> = z
  .instanceof(PostApiUserAgentsConflictError)
  .transform((v) => v.data$)
  .pipe(
    z.object({
      success: z.boolean().optional(),
      error: z.string().optional(),
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiUserAgentsConflictError$ {
  /** @deprecated use `PostApiUserAgentsConflictError$inboundSchema` instead. */
  export const inboundSchema = PostApiUserAgentsConflictError$inboundSchema;
  /** @deprecated use `PostApiUserAgentsConflictError$outboundSchema` instead. */
  export const outboundSchema = PostApiUserAgentsConflictError$outboundSchema;
  /** @deprecated use `PostApiUserAgentsConflictError$Outbound` instead. */
  export type Outbound = PostApiUserAgentsConflictError$Outbound;
}
